(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const o of r)if(o.type==="childList")for(const a of o.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function n(r){const o={};return r.integrity&&(o.integrity=r.integrity),r.referrerPolicy&&(o.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?o.credentials="include":r.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function s(r){if(r.ep)return;r.ep=!0;const o=n(r);fetch(r.href,o)}})();function l0(c){return c&&c.__esModule&&Object.prototype.hasOwnProperty.call(c,"default")?c.default:c}var C1={},Z1;function u0(){return Z1||(Z1=1,(function(c){Object.defineProperty(c,"__esModule",{value:!0}),c.countMap=c.Random=c.phi=c.radiansPerDegree=c.degreesPerRadian=c.FULL_CIRCLE=c.FIGURE_SPACE=c.NON_BREAKING_SPACE=c.MIN_DATE=c.MAX_DATE=c.csvStringToArray=void 0,c.assertClass=e,c.assertNonNullable=n,c.sleep=s,c.testXml=r,c.parseXml=o,c.followPath=a,c.getAttribute=i,c.parseFloatX=l,c.parseIntX=h,c.parseTimeT=M,c.pickAny=d,c.pick=y,c.take=k,c.filterMap=Q,c.makePromise=f,c.dateIsValid=u,c.angleBetween=p,c.positiveModulo=m,c.rotateArray=v,c.rectUnion=E,c.rectAddPoint=$,c.dateToFileName=S,c.lerp=I,c.assertFinite=R,c.shuffleArray=P,c.zip=T,c.count=F,c.initializedArray=O,c.sum=Z,c.makeLinear=a1,c.makeBoundedLinear=i1,c.polarToRectangular=y1,c.permutations=_1,c.gcd=l1,c.lcm=R1;function e(x,w,A="Assertion Failed."){const H=D=>{throw new Error(`${A}  Expected type:  ${w.name}.  Found type:  ${D}.`)};if(x===null)H("null");else if(typeof x!="object")H(typeof x);else if(!(x instanceof w))H(x.constructor.name);else return x;throw new Error("wtf")}function n(x){if(x==null)throw new Error("wtf");return x}function s(x){return new Promise(w=>{setTimeout(w,x)})}function r(x){const A=new DOMParser().parseFromString(x,"application/xml");for(const H of Array.from(A.querySelectorAll("parsererror")))if(H instanceof HTMLElement)return{error:H};return{parsed:A}}function o(x){if(x!==void 0){const{parsed:w}=r(x);return w?.documentElement}}function a(x,...w){for(const A of w){if(x===void 0)return;if(typeof A=="number")x=x.children[A];else{const H=x.getElementsByTagName(A);if(H.length!=1)return;x=H[0]}}return x}function i(x,w,...A){if(w=a(w,...A),w!==void 0&&w.hasAttribute(x))return w.getAttribute(x)??void 0}function l(x){if(x==null)return;const w=+x;if(isFinite(w))return w}function h(x){const w=l(x);if(w!==void 0)return w>Number.MAX_SAFE_INTEGER||w<Number.MIN_SAFE_INTEGER||w!=Math.floor(w)?void 0:w}function M(x){if(typeof x=="string"&&(x=h(x)),x!=null&&!(x<=0))return new Date(x*1e3)}const g=x=>{const w=/(,|\r?\n|\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^,\r\n]*))/gi,A=[[]];let H;for(;H=w.exec(x);)H[1].length&&H[1]!==","&&A.push([]),A[A.length-1].push(H[2]!==void 0?H[2].replace(/""/g,'"'):H[3]);return A};c.csvStringToArray=g;function d(x){const w=x.values().next();if(!w.done)return w.value}function y(x){if(x.length==0)throw new Error("wtf");return x[Math.random()*x.length|0]}function k(x){if(x.length<1)throw new Error("wtf");const w=Math.random()*x.length|0;return x.splice(w,1)[0]}function Q(x,w){const A=[];return x.forEach((H,D)=>{const N=w(H,D);N!==void 0&&A.push(N)}),A}function f(){let x,w;return{promise:new Promise((H,D)=>{x=H,w=D}),resolve:x,reject:w}}c.MAX_DATE=new Date(864e13),c.MIN_DATE=new Date(-864e13);function u(x){return isFinite(x.getTime())}c.NON_BREAKING_SPACE=" ",c.FIGURE_SPACE=" ",c.FULL_CIRCLE=2*Math.PI,c.degreesPerRadian=360/c.FULL_CIRCLE,c.radiansPerDegree=c.FULL_CIRCLE/360,c.phi=(1+Math.sqrt(5))/2;function p(x,w){const A=m(x,c.FULL_CIRCLE);let D=m(w,c.FULL_CIRCLE)-A;const N=c.FULL_CIRCLE/2;if(D>N?D-=c.FULL_CIRCLE:D<-N&&(D+=c.FULL_CIRCLE),Math.abs(D)>N)throw new Error("wtf");return D}function m(x,w){const A=x%w;return A<0?A+Math.abs(w):A}function v(x,w){if((w|0)!=w)throw new Error(`invalid input: ${w}`);return w=m(w,x.length),w==0?x:[...x.slice(w),...x.slice(0,w)]}class L{constructor(){throw new Error("wtf")}static sfc32(w,A,H,D){function N(){w|=0,A|=0,H|=0,D|=0;let s1=(w+A|0)+D|0;return D=D+1|0,w=A^A>>>9,A=H+(H<<3)|0,H=H<<21|H>>>11,H=H+s1|0,(s1>>>0)/4294967296}const J=N;return Object.defineProperty(J,"currentSeed",{get(){return JSON.stringify([w,A,H,D])}}),J}static#t=42;static seedIsValid(w){try{return this.create(w),!0}catch{return!1}}static create(w=this.newSeed()){console.info(w);const A=JSON.parse(w);if(!(A instanceof Array))throw new Error("invalid input");if(A.length!=4)throw new Error("invalid input");const[H,D,N,J]=A;if(!(typeof H=="number"&&typeof D=="number"&&typeof N=="number"&&typeof J=="number"))throw new Error("invalid input");return this.sfc32(H,D,N,J)}static newSeed(){const w=[];return w.push(Date.now()|0),w.push(this.#t++|0),w.push(Math.random()*2**31|0),w.push(performance.now()*1e4|0),JSON.stringify(w)}static fromString(w){try{return this.create(w)}catch{return this.create(this.anyStringToSeed(w))}}static anyStringToSeed(w){function A(N,J){return(N<<J|N>>>32-J)>>>0}const H=[2654435769,608135816,2242054355,320440878];return new TextEncoder().encode(w).forEach(N=>{H[0]^=N,H[0]=A(H[0],3),H[1]^=N,H[1]=A(H[1],5),H[2]^=N,H[2]=A(H[2],7),H[3]^=N,H[3]=A(H[3],11)}),H[0]^=A(H[1],7),H[1]^=A(H[2],11),H[2]^=A(H[3],13),H[3]^=A(H[0],17),JSON.stringify(H)}static test(){const H=[this.create()];for(;H.length<=10;){for(let N=0;N<20;N++){const J=H.map(s1=>s1());for(let s1=1;s1<J.length;s1++)if(J[s1]!==J[0]){debugger;throw new Error("wtf")}}const D=y(H).currentSeed;H.forEach(N=>{if(N.currentSeed!=D){debugger;throw new Error("wtf")}}),H.push(this.create(D))}}}c.Random=L;function E(x,w){const A=Math.min(x.x,w.x),H=Math.min(x.y,w.y),D=Math.max(x.x+x.width,w.x+w.width),N=Math.max(x.y+x.height,w.y+w.height),J=D-A,s1=N-H;return{x:A,y:H,width:J,height:s1}}function $(x,w,A){return E(x,{x:w,y:A,width:0,height:0})}function S(x){return isNaN(x.getTime())?"0000⸱00⸱00 00⦂00⦂00":`${x.getFullYear().toString().padStart(4,"0")}⸱${(x.getMonth()+1).toString().padStart(2,"0")}⸱${x.getDate().toString().padStart(2,"0")} ${x.getHours().toString().padStart(2,"0")}⦂${x.getMinutes().toString().padStart(2,"0")}⦂${x.getSeconds().toString().padStart(2,"0")}`}function I(x,w,A){return x+(w-x)*A}function R(...x){x.forEach(w=>{if(!Number.isFinite(w))throw new Error("wtf")})}function P(x){for(let w=x.length-1;w>0;w--){const A=Math.floor(Math.random()*(w+1));[x[w],x[A]]=[x[A],x[w]]}return x}function*T(...x){const w=x.map(A=>A[Symbol.iterator]());for(;;){const A=w.map(H=>H.next());if(A.some(({done:H})=>H))break;yield A.map(({value:H})=>H)}}function*F(x=0,w=1/0,A=1){for(let H=x;H<w;H+=A)yield H}function O(x,w){const A=[];for(let H=0;H<x;H++)A.push(w(H));return A}c.countMap=O;function Z(x){return x.reduce((w,A)=>w+A,0)}function a1(x,w,A,H){const D=(H-w)/(A-x);return function(N){return(N-x)*D+w}}function i1(x,w,A,H){A<x&&([x,w,A,H]=[A,H,x,w]);const D=(H-w)/(A-x);return function(N){return N<=x?w:N>=A?H:(N-x)*D+w}}function y1(x,w){return{x:Math.cos(w)*x,y:Math.sin(w)*x}}function*_1(x,w=[]){if(x.length==0)yield w;else for(let A=0;A<x.length;A++){const H=x[A],D=[...w,H],N=[...x.slice(0,A),...x.slice(A+1)];yield*_1(N,D)}}function l1(x,w){return w?l1(w,x%w):x}function R1(x,w){return x*w/l1(x,w)}})(C1)),C1}var V=u0(),Y={},Y1;function b0(){if(Y1)return Y;Y1=1,Object.defineProperty(Y,"__esModule",{value:!0}),Y.AnimationLoop=void 0,Y.getById=e,Y.selectorQueryAll=n,Y.selectorQuery=s,Y.loadDateTimeLocal=r,Y.getBlobFromCanvas=o,Y.getAudioBalanceControl=a,Y.getHashInfo=i,Y.createElementFromHTML=l,Y.download=h,Y.getDataUrl=g;const c=u0();function e(d,y){const k=document.getElementById(d);if(!k)throw new Error("Could not find element with id "+d+".  Expected type:  "+y.name);if(k instanceof y)return k;throw new Error("Element with id "+d+" has type "+k.constructor.name+".  Expected type:  "+y.name)}function n(d,y,k=1,Q=1/0,f=document){const u=[];if(f.querySelectorAll(d).forEach(p=>{u.push((0,c.assertClass)(p,y))}),u.length<k||u.length>Q)throw new Error(`Expecting "${d}" to return [${k} - ${Q}] instances of ${y.name}, found ${u.length}.`);return u}function s(d,y,k=document){return n(d,y,1,1,k)[0]}function r(d,y,k="milliseconds"){let Q;switch(k){case"minutes":{Q=y.getSeconds()*1e3+y.getMilliseconds();break}case"seconds":{Q=y.getMilliseconds();break}case"milliseconds":{Q=0;break}default:throw new Error("wtf")}d.valueAsNumber=+y-y.getTimezoneOffset()*6e4-Q}function o(d){const{reject:y,resolve:k,promise:Q}=(0,c.makePromise)();return d.toBlob(f=>{f?k(f):y(new Error("blob is null!"))}),Q}function a(d){const y=new AudioContext,k=y.createMediaElementSource(d),Q=new StereoPannerNode(y,{pan:0});return k.connect(Q).connect(y.destination),f=>{Q.pan.value=f}}function i(){const d=new Map;return/^#?(.*)$/.exec(location.hash.replace("+","%20"))[1].split("&").forEach(Q=>{const f=Q.split("=",2);if(f.length==2){const u=decodeURIComponent(f[0]),p=decodeURIComponent(f[1]);d.set(u,p)}}),d}function l(d,y){var k=document.createElement("div");return k.innerHTML=d.trim(),(0,c.assertClass)(k.firstChild,y,"createElementFromHTML:")}function h(d,y){var k=document.createElement("a");if(k.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(y)),k.setAttribute("download",d),document.createEvent){var Q=document.createEvent("MouseEvents");Q.initEvent("click",!0,!0),k.dispatchEvent(Q)}else k.click()}class M{onWake;constructor(y){this.onWake=y,this.callback=this.callback.bind(this),requestAnimationFrame(this.callback)}#t=!1;cancel(){this.#t=!0}callback(y){this.#t||(requestAnimationFrame(this.callback),this.onWake(y))}}Y.AnimationLoop=M;async function g(d){const y=document.createElement("img");y.src=d,await y.decode();const k=y.naturalHeight,Q=y.naturalWidth;if(k==0||Q==0)throw new Error("problem with image");const f=document.createElement("canvas");f.width=Q,f.height=k;const u=f.getContext("2d");if(!u)throw new Error("wtf");return u.drawImage(y,0,0,f.width,f.height),f.toDataURL()}return Y}var j=b0(),X;(function(c){c.LOAD="LOAD",c.EXEC="EXEC",c.FFPROBE="FFPROBE",c.WRITE_FILE="WRITE_FILE",c.READ_FILE="READ_FILE",c.DELETE_FILE="DELETE_FILE",c.RENAME="RENAME",c.CREATE_DIR="CREATE_DIR",c.LIST_DIR="LIST_DIR",c.DELETE_DIR="DELETE_DIR",c.ERROR="ERROR",c.DOWNLOAD="DOWNLOAD",c.PROGRESS="PROGRESS",c.LOG="LOG",c.MOUNT="MOUNT",c.UNMOUNT="UNMOUNT"})(X||(X={}));const H0=(()=>{let c=0;return()=>c++})(),$0=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),A0=new Error("called FFmpeg.terminate()");class V0{#t=null;#e={};#n={};#o=[];#r=[];loaded=!1;#a=()=>{this.#t&&(this.#t.onmessage=({data:{id:e,type:n,data:s}})=>{switch(n){case X.LOAD:this.loaded=!0,this.#e[e](s);break;case X.MOUNT:case X.UNMOUNT:case X.EXEC:case X.FFPROBE:case X.WRITE_FILE:case X.READ_FILE:case X.DELETE_FILE:case X.RENAME:case X.CREATE_DIR:case X.LIST_DIR:case X.DELETE_DIR:this.#e[e](s);break;case X.LOG:this.#o.forEach(r=>r(s));break;case X.PROGRESS:this.#r.forEach(r=>r(s));break;case X.ERROR:this.#n[e](s);break}delete this.#e[e],delete this.#n[e]})};#s=({type:e,data:n},s=[],r)=>this.#t?new Promise((o,a)=>{const i=H0();this.#t&&this.#t.postMessage({id:i,type:e,data:n},s),this.#e[i]=o,this.#n[i]=a,r?.addEventListener("abort",()=>{a(new DOMException(`Message # ${i} was aborted`,"AbortError"))},{once:!0})}):Promise.reject($0);on(e,n){e==="log"?this.#o.push(n):e==="progress"&&this.#r.push(n)}off(e,n){e==="log"?this.#o=this.#o.filter(s=>s!==n):e==="progress"&&(this.#r=this.#r.filter(s=>s!==n))}load=({classWorkerURL:e,...n}={},{signal:s}={})=>(this.#t||(this.#t=e?new Worker(new URL(e,import.meta.url),{type:"module"}):new Worker(new URL(""+new URL("worker-DYSz7Krg.js",import.meta.url).href,import.meta.url),{type:"module"}),this.#a()),this.#s({type:X.LOAD,data:n},void 0,s));exec=(e,n=-1,{signal:s}={})=>this.#s({type:X.EXEC,data:{args:e,timeout:n}},void 0,s);ffprobe=(e,n=-1,{signal:s}={})=>this.#s({type:X.FFPROBE,data:{args:e,timeout:n}},void 0,s);terminate=()=>{const e=Object.keys(this.#n);for(const n of e)this.#n[n](A0),delete this.#n[n],delete this.#e[n];this.#t&&(this.#t.terminate(),this.#t=null,this.loaded=!1)};writeFile=(e,n,{signal:s}={})=>{const r=[];return n instanceof Uint8Array&&r.push(n.buffer),this.#s({type:X.WRITE_FILE,data:{path:e,data:n}},r,s)};mount=(e,n,s)=>{const r=[];return this.#s({type:X.MOUNT,data:{fsType:e,options:n,mountPoint:s}},r)};unmount=e=>{const n=[];return this.#s({type:X.UNMOUNT,data:{mountPoint:e}},n)};readFile=(e,n="binary",{signal:s}={})=>this.#s({type:X.READ_FILE,data:{path:e,encoding:n}},void 0,s);deleteFile=(e,{signal:n}={})=>this.#s({type:X.DELETE_FILE,data:{path:e}},void 0,n);rename=(e,n,{signal:s}={})=>this.#s({type:X.RENAME,data:{oldPath:e,newPath:n}},void 0,s);createDir=(e,{signal:n}={})=>this.#s({type:X.CREATE_DIR,data:{path:e}},void 0,n);listDir=(e,{signal:n}={})=>this.#s({type:X.LIST_DIR,data:{path:e}},void 0,n);deleteDir=(e,{signal:n}={})=>this.#s({type:X.DELETE_DIR,data:{path:e}},void 0,n)}var J1;(function(c){c.MEMFS="MEMFS",c.NODEFS="NODEFS",c.NODERAWFS="NODERAWFS",c.IDBFS="IDBFS",c.WORKERFS="WORKERFS",c.PROXYFS="PROXYFS"})(J1||(J1={}));const I0=""+new URL("ffmpeg-core-CI9Irx9p.js",import.meta.url).href,R0=""+new URL("ffmpeg-core-CgUfceKH.wasm",import.meta.url).href;class G1{top;bottom;width;letters;spaceAfter;constructor(e,n){const s=n.getWord(e);let r=0;this.letters=s.map(i=>{const l={x:r,description:i};return r+=i.advance+n.kerning,l});const o=this.letters.at(-1);this.width=o?o.x+o.description.advance:0,this.top=n.top,this.bottom=n.bottom;let a=0;[...e].forEach(i=>{i==" "&&a++}),this.spaceAfter=a*n.spaceWidth+n.kerning}}class C0{}class T0{constructor(e){this.font=e}#t=[];addWord(e,n=this.font){const s=new G1(e,n);return this.#t.push(s),s}addText(e,n=this.font){const s=[];for(const r of e.matchAll(/(\n)|([^ \n]*(( +)|$|(?=\n)))/gms)){const o=r[0];if(o[0]==`
`)for(let a=0;a<o.length;a++)this.addLineBreak();else o!=""&&this.addWord(o,n)}return s}addLineBreak(){this.#t.push(new C0)}align(e=1/0,n="left"){const s=[[]],r=new Set;let o=0;for(this.#t.forEach(d=>{if(d instanceof G1)o>0&&o+d.width>e&&(o=0,s.push([])),o+=d.width+d.spaceAfter,s.at(-1).push(d);else{const y=s.length-1;r.add(y),o=0,s.push([])}});s.length>0&&s.at(-1).length==0;)s.pop();let a=0;const i=new Array;s.forEach(d=>{if(d.length==0){const y=a,k=y-this.font.top,Q=k+this.font.bottom;i.push({top:y,baseline:k,bottom:Q,minWidth:0}),a=Q}else{const y=a,k=y-Math.min(...d.map(u=>u.top)),Q=k+Math.max(...d.map(u=>u.bottom)),f=V.sum(d.map(u=>u.width+u.spaceAfter))-d.at(-1).spaceAfter;i.push({top:y,baseline:k,bottom:Q,minWidth:f}),a=Q}});const l=new Array;e==1/0&&(e=Math.max(...i.map(({minWidth:d})=>d))),s.forEach((d,y)=>{const k=i[y],Q=k.baseline;function f(){let v=(e-k.minWidth)/2;d.forEach(L=>{l.push({x:v,baseline:Q,wordInfo:L}),v+=L.width+L.spaceAfter})}function u(){let v=0;d.forEach(L=>{l.push({x:v,baseline:Q,wordInfo:L}),v+=L.width+L.spaceAfter})}function p(){let v=e-k.minWidth;d.forEach(L=>{l.push({x:v,baseline:Q,wordInfo:L}),v+=L.width+L.spaceAfter})}function m(){const v=(e-k.minWidth)/(d.length-1);let L=0;d.forEach(E=>{l.push({x:L,baseline:Q,wordInfo:E}),L+=E.width+E.spaceAfter+v})}switch(n){case"center":{f();break}case"left":{u();break}case"right":{p();break}case"justify":{y==s.length-1||r.has(y)?u():m();break}default:throw new Error("wtf")}});function*h(d=0,y=0){for(const k of l)for(const Q of k.wordInfo.letters){const f=d+k.x+Q.x,u=y+k.baseline;yield{x:f,baseline:u,letter:Q.description,translatedShape:Q.description.shape.translate(f,u),word:k}}}function M(d,y=0,k=0){d.lineCap="round",d.lineJoin="round";for(const Q of h(y,k)){const f=new Path2D(Q.translatedShape.rawPath);d.stroke(f)}}function g(d=0,y=0){let k=0;const Q=[...h(d,y)].flatMap(({translatedShape:p})=>p.splitOnMove()).map(p=>{const m=p.getLength(),v=k+m,E={path:new Path2D(p.rawPath),start:k,length:m,end:v};return k=v,E}),f=k;function u(p,m){m.lineCap="round",m.lineJoin="round";for(const v of Q){if(p<=v.start)break;p>=v.end?m.setLineDash([]):m.setLineDash([p-v.start,f]),m.stroke(v.path)}}return{totalLength:f,drawTo:u}}return{width:e,words:l,allRowMetrics:i,getAllLetters:h,drawAll:M,drawPartial:g}}}function n1(c,e,n){return new DOMPoint(c,e).matrixTransform(n)}function K1(c,e,n,s=.5,r=.5){const o=c.width/c.height,a=e.width/e.height;let i,l;switch(n){case"meet":case"srcRect fits completely into destRect":{o>a?(i=e.width/c.width,l=i):(l=e.height/c.height,i=l);break}case"slice":case"srcRect completely covers destRect":{o>a?(l=e.height/c.height,i=l):(i=e.width/c.width,l=i);break}default:throw new Error("wtf")}const h=-c.x*i+s*(e.width-c.width*i)+e.x,M=-c.y*l+r*(e.height-c.height*l)+e.y;return new DOMMatrix().translate(h,M).scale(i,l)}function z0(){{const c={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:244,width:325},n=K1(c,e,"meet");[{x:c.x,y:c.y},{x:c.x+c.width,y:c.y},{x:c.x+c.width,y:c.y+c.height},{x:c.x,y:c.y+c.height}].forEach(({x:r,y:o})=>{const a=n1(r,o,n);if(a.x<e.x||a.x>e.x+e.width||a.y<e.y||a.y>e.y+e.height)throw new Error(`Test 1 failed: Point (${a.x}, ${a.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}{const c={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:325,width:244},n=K1(c,e,"meet");[{x:c.x,y:c.y},{x:c.x+c.width,y:c.y},{x:c.x+c.width,y:c.y+c.height},{x:c.x,y:c.y+c.height}].forEach(({x:r,y:o})=>{const a=n1(r,o,n);if(a.x<e.x||a.x>e.x+e.width||a.y<e.y||a.y>e.y+e.height)throw new Error(`Test 2 failed: Point (${a.x}, ${a.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}}z0();var T1,t0;function P0(){if(t0)return T1;t0=1,T1=n;var c={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},e=/([astvzqmhlc])([^astvzqmhlc]*)/ig;function n(o){var a=[];return o.replace(e,function(i,l,h){var M=l.toLowerCase();for(h=r(h),M=="m"&&h.length>2&&(a.push([l].concat(h.splice(0,2))),M="l",l=l=="m"?"l":"L");;){if(h.length==c[M])return h.unshift(l),a.push(h);if(h.length<c[M])throw new Error("malformed path data");a.push([l].concat(h.splice(0,c[M])))}}),a}var s=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;function r(o){var a=o.match(s);return a?a.map(Number):[]}return T1}var O0=P0();const F0=l0(O0);var z1,e0;function N0(){if(e0)return z1;e0=1,z1=c;function c(e){var n=0,s=0,r=0,o=0;return e.map(function(a){a=a.slice();var i=a[0],l=i.toUpperCase();if(i!=l)switch(a[0]=l,i){case"a":a[6]+=r,a[7]+=o;break;case"v":a[1]+=o;break;case"h":a[1]+=r;break;default:for(var h=1;h<a.length;)a[h++]+=r,a[h++]+=o}switch(l){case"Z":r=n,o=s;break;case"H":r=a[1];break;case"V":o=a[1];break;case"M":r=n=a[1],o=s=a[2];break;default:r=a[a.length-2],o=a[a.length-1]}return a})}return z1}var D0=N0();const W0=l0(D0);var U0=(function(){function c(e,n){var s=[],r=!0,o=!1,a=void 0;try{for(var i=e[Symbol.iterator](),l;!(r=(l=i.next()).done)&&(s.push(l.value),!(n&&s.length===n));r=!0);}catch(h){o=!0,a=h}finally{try{!r&&i.return&&i.return()}finally{if(o)throw a}}return s}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return c(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}})(),w1=Math.PI*2,P1=function(e,n,s,r,o,a,i){var l=e.x,h=e.y;l*=n,h*=s;var M=r*l-o*h,g=o*l+r*h;return{x:M+a,y:g+i}},q0=function(e,n){var s=n===1.5707963267948966?.551915024494:n===-1.5707963267948966?-.551915024494:1.3333333333333333*Math.tan(n/4),r=Math.cos(e),o=Math.sin(e),a=Math.cos(e+n),i=Math.sin(e+n);return[{x:r-o*s,y:o+r*s},{x:a+i*s,y:i-a*s},{x:a,y:i}]},n0=function(e,n,s,r){var o=e*r-n*s<0?-1:1,a=e*s+n*r;return a>1&&(a=1),a<-1&&(a=-1),o*Math.acos(a)},X0=function(e,n,s,r,o,a,i,l,h,M,g,d){var y=Math.pow(o,2),k=Math.pow(a,2),Q=Math.pow(g,2),f=Math.pow(d,2),u=y*k-y*f-k*Q;u<0&&(u=0),u/=y*f+k*Q,u=Math.sqrt(u)*(i===l?-1:1);var p=u*o/a*d,m=u*-a/o*g,v=M*p-h*m+(e+s)/2,L=h*p+M*m+(n+r)/2,E=(g-p)/o,$=(d-m)/a,S=(-g-p)/o,I=(-d-m)/a,R=n0(1,0,E,$),P=n0(E,$,S,I);return l===0&&P>0&&(P-=w1),l===1&&P<0&&(P+=w1),[v,L,R,P]},B0=function(e){var n=e.px,s=e.py,r=e.cx,o=e.cy,a=e.rx,i=e.ry,l=e.xAxisRotation,h=l===void 0?0:l,M=e.largeArcFlag,g=M===void 0?0:M,d=e.sweepFlag,y=d===void 0?0:d,k=[];if(a===0||i===0)return[];var Q=Math.sin(h*w1/360),f=Math.cos(h*w1/360),u=f*(n-r)/2+Q*(s-o)/2,p=-Q*(n-r)/2+f*(s-o)/2;if(u===0&&p===0)return[];a=Math.abs(a),i=Math.abs(i);var m=Math.pow(u,2)/Math.pow(a,2)+Math.pow(p,2)/Math.pow(i,2);m>1&&(a*=Math.sqrt(m),i*=Math.sqrt(m));var v=X0(n,s,r,o,a,i,g,y,Q,f,u,p),L=U0(v,4),E=L[0],$=L[1],S=L[2],I=L[3],R=Math.abs(I)/(w1/4);Math.abs(1-R)<1e-7&&(R=1);var P=Math.max(Math.ceil(R),1);I/=P;for(var T=0;T<P;T++)k.push(q0(S,I)),S+=I;return k.map(function(F){var O=P1(F[0],a,i,f,Q,E,$),Z=O.x,a1=O.y,i1=P1(F[1],a,i,f,Q,E,$),y1=i1.x,_1=i1.y,l1=P1(F[2],a,i,f,Q,E,$),R1=l1.x,x=l1.y;return{x1:Z,y1:a1,x2:y1,y2:_1,x:R1,y:x}})};function j0(c){for(var e,n=[],s=0,r=0,o=0,a=0,i=null,l=null,h=0,M=0,g=0,d=c.length;g<d;g++){var y=c[g],k=y[0];switch(k){case"M":o=y[1],a=y[2];break;case"A":var Q=B0({px:h,py:M,cx:y[6],cy:y[7],rx:y[1],ry:y[2],xAxisRotation:y[3],largeArcFlag:y[4],sweepFlag:y[5]});if(!Q.length)continue;for(var f=0,u;f<Q.length;f++)u=Q[f],y=["C",u.x1,u.y1,u.x2,u.y2,u.x,u.y],f<Q.length-1&&n.push(y);break;case"S":var p=h,m=M;(e=="C"||e=="S")&&(p+=p-s,m+=m-r),y=["C",p,m,y[1],y[2],y[3],y[4]];break;case"T":e=="Q"||e=="T"?(i=h*2-i,l=M*2-l):(i=h,l=M),y=s0(h,M,i,l,y[1],y[2]);break;case"Q":i=y[1],l=y[2],y=s0(h,M,y[1],y[2],y[3],y[4]);break;case"L":y=b1(h,M,y[1],y[2]);break;case"H":y=b1(h,M,y[1],M);break;case"V":y=b1(h,M,h,y[1]);break;case"Z":y=b1(h,M,o,a);break}e=k,h=y[y.length-2],M=y[y.length-1],y.length>4?(s=y[y.length-4],r=y[y.length-3]):(s=h,r=M),n.push(y)}return n}function b1(c,e,n,s){return["C",c,e,n,s,n,s]}function s0(c,e,n,s,r,o){return["C",c/3+2/3*n,e/3+2/3*s,r/3+2/3*n,o/3+2/3*s,r,o]}const{abs:m1,cos:o1,sin:u1,acos:Z0,atan2:M1,sqrt:c1,pow:K}=Math;function g1(c){return c<0?-K(-c,1/3):K(c,1/3)}const f0=Math.PI,H1=2*f0,Q1=f0/2,Y0=1e-6,O1=Number.MAX_SAFE_INTEGER||9007199254740991,F1=Number.MIN_SAFE_INTEGER||-9007199254740991,J0={x:0,y:0,z:0},b={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(c,e){const n=e(c);let s=n.x*n.x+n.y*n.y;return typeof n.z<"u"&&(s+=n.z*n.z),c1(s)},compute:function(c,e,n){if(c===0)return e[0].t=0,e[0];const s=e.length-1;if(c===1)return e[s].t=1,e[s];const r=1-c;let o=e;if(s===0)return e[0].t=c,e[0];if(s===1){const i={x:r*o[0].x+c*o[1].x,y:r*o[0].y+c*o[1].y,t:c};return n&&(i.z=r*o[0].z+c*o[1].z),i}if(s<4){let i=r*r,l=c*c,h,M,g,d=0;s===2?(o=[o[0],o[1],o[2],J0],h=i,M=r*c*2,g=l):s===3&&(h=i*r,M=i*c*3,g=r*l*3,d=c*l);const y={x:h*o[0].x+M*o[1].x+g*o[2].x+d*o[3].x,y:h*o[0].y+M*o[1].y+g*o[2].y+d*o[3].y,t:c};return n&&(y.z=h*o[0].z+M*o[1].z+g*o[2].z+d*o[3].z),y}const a=JSON.parse(JSON.stringify(e));for(;a.length>1;){for(let i=0;i<a.length-1;i++)a[i]={x:a[i].x+(a[i+1].x-a[i].x)*c,y:a[i].y+(a[i+1].y-a[i].y)*c},typeof a[i].z<"u"&&(a[i].z=a[i].z+(a[i+1].z-a[i].z)*c);a.splice(a.length-1,1)}return a[0].t=c,a[0]},computeWithRatios:function(c,e,n,s){const r=1-c,o=n,a=e;let i=o[0],l=o[1],h=o[2],M=o[3],g;if(i*=r,l*=c,a.length===2)return g=i+l,{x:(i*a[0].x+l*a[1].x)/g,y:(i*a[0].y+l*a[1].y)/g,z:s?(i*a[0].z+l*a[1].z)/g:!1,t:c};if(i*=r,l*=2*r,h*=c*c,a.length===3)return g=i+l+h,{x:(i*a[0].x+l*a[1].x+h*a[2].x)/g,y:(i*a[0].y+l*a[1].y+h*a[2].y)/g,z:s?(i*a[0].z+l*a[1].z+h*a[2].z)/g:!1,t:c};if(i*=r,l*=1.5*r,h*=3*r,M*=c*c*c,a.length===4)return g=i+l+h+M,{x:(i*a[0].x+l*a[1].x+h*a[2].x+M*a[3].x)/g,y:(i*a[0].y+l*a[1].y+h*a[2].y+M*a[3].y)/g,z:s?(i*a[0].z+l*a[1].z+h*a[2].z+M*a[3].z)/g:!1,t:c}},derive:function(c,e){const n=[];for(let s=c,r=s.length,o=r-1;r>1;r--,o--){const a=[];for(let i=0,l;i<o;i++)l={x:o*(s[i+1].x-s[i].x),y:o*(s[i+1].y-s[i].y)},e&&(l.z=o*(s[i+1].z-s[i].z)),a.push(l);n.push(a),s=a}return n},between:function(c,e,n){return e<=c&&c<=n||b.approximately(c,e)||b.approximately(c,n)},approximately:function(c,e,n){return m1(c-e)<=(n||Y0)},length:function(c){const n=b.Tvalues.length;let s=0;for(let r=0,o;r<n;r++)o=.5*b.Tvalues[r]+.5,s+=b.Cvalues[r]*b.arcfn(o,c);return .5*s},map:function(c,e,n,s,r){const o=n-e,a=r-s,i=c-e,l=i/o;return s+a*l},lerp:function(c,e,n){const s={x:e.x+c*(n.x-e.x),y:e.y+c*(n.y-e.y)};return e.z!==void 0&&n.z!==void 0&&(s.z=e.z+c*(n.z-e.z)),s},pointToString:function(c){let e=c.x+"/"+c.y;return typeof c.z<"u"&&(e+="/"+c.z),e},pointsToString:function(c){return"["+c.map(b.pointToString).join(", ")+"]"},copy:function(c){return JSON.parse(JSON.stringify(c))},angle:function(c,e,n){const s=e.x-c.x,r=e.y-c.y,o=n.x-c.x,a=n.y-c.y,i=s*a-r*o,l=s*o+r*a;return M1(i,l)},round:function(c,e){const n=""+c,s=n.indexOf(".");return parseFloat(n.substring(0,s+1+e))},dist:function(c,e){const n=c.x-e.x,s=c.y-e.y;return c1(n*n+s*s)},closest:function(c,e){let n=K(2,63),s,r;return c.forEach(function(o,a){r=b.dist(e,o),r<n&&(n=r,s=a)}),{mdist:n,mpos:s}},abcratio:function(c,e){if(e!==2&&e!==3)return!1;if(typeof c>"u")c=.5;else if(c===0||c===1)return c;const n=K(c,e)+K(1-c,e),s=n-1;return m1(s/n)},projectionratio:function(c,e){if(e!==2&&e!==3)return!1;if(typeof c>"u")c=.5;else if(c===0||c===1)return c;const n=K(1-c,e),s=K(c,e)+n;return n/s},lli8:function(c,e,n,s,r,o,a,i){const l=(c*s-e*n)*(r-a)-(c-n)*(r*i-o*a),h=(c*s-e*n)*(o-i)-(e-s)*(r*i-o*a),M=(c-n)*(o-i)-(e-s)*(r-a);return M==0?!1:{x:l/M,y:h/M}},lli4:function(c,e,n,s){const r=c.x,o=c.y,a=e.x,i=e.y,l=n.x,h=n.y,M=s.x,g=s.y;return b.lli8(r,o,a,i,l,h,M,g)},lli:function(c,e){return b.lli4(c,c.c,e,e.c)},makeline:function(c,e){return new B(c.x,c.y,(c.x+e.x)/2,(c.y+e.y)/2,e.x,e.y)},findbbox:function(c){let e=O1,n=O1,s=F1,r=F1;return c.forEach(function(o){const a=o.bbox();e>a.x.min&&(e=a.x.min),n>a.y.min&&(n=a.y.min),s<a.x.max&&(s=a.x.max),r<a.y.max&&(r=a.y.max)}),{x:{min:e,mid:(e+s)/2,max:s,size:s-e},y:{min:n,mid:(n+r)/2,max:r,size:r-n}}},shapeintersections:function(c,e,n,s,r){if(!b.bboxoverlap(e,s))return[];const o=[],a=[c.startcap,c.forward,c.back,c.endcap],i=[n.startcap,n.forward,n.back,n.endcap];return a.forEach(function(l){l.virtual||i.forEach(function(h){if(h.virtual)return;const M=l.intersects(h,r);M.length>0&&(M.c1=l,M.c2=h,M.s1=c,M.s2=n,o.push(M))})}),o},makeshape:function(c,e,n){const s=e.points.length,r=c.points.length,o=b.makeline(e.points[s-1],c.points[0]),a=b.makeline(c.points[r-1],e.points[0]),i={startcap:o,forward:c,back:e,endcap:a,bbox:b.findbbox([o,c,e,a])};return i.intersections=function(l){return b.shapeintersections(i,i.bbox,l,l.bbox,n)},i},getminmax:function(c,e,n){if(!n)return{min:0,max:0};let s=O1,r=F1,o,a;n.indexOf(0)===-1&&(n=[0].concat(n)),n.indexOf(1)===-1&&n.push(1);for(let i=0,l=n.length;i<l;i++)o=n[i],a=c.get(o),a[e]<s&&(s=a[e]),a[e]>r&&(r=a[e]);return{min:s,mid:(s+r)/2,max:r,size:r-s}},align:function(c,e){const n=e.p1.x,s=e.p1.y,r=-M1(e.p2.y-s,e.p2.x-n),o=function(a){return{x:(a.x-n)*o1(r)-(a.y-s)*u1(r),y:(a.x-n)*u1(r)+(a.y-s)*o1(r)}};return c.map(o)},roots:function(c,e){e=e||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=c.length-1,s=b.align(c,e),r=function($){return 0<=$&&$<=1};if(n===2){const $=s[0].y,S=s[1].y,I=s[2].y,R=$-2*S+I;if(R!==0){const P=-c1(S*S-$*I),T=-$+S,F=-(P+T)/R,O=-(-P+T)/R;return[F,O].filter(r)}else if(S!==I&&R===0)return[(2*S-I)/(2*S-2*I)].filter(r);return[]}const o=s[0].y,a=s[1].y,i=s[2].y,l=s[3].y;let h=-o+3*a-3*i+l,M=3*o-6*a+3*i,g=-3*o+3*a,d=o;if(b.approximately(h,0)){if(b.approximately(M,0))return b.approximately(g,0)?[]:[-d/g].filter(r);const $=c1(g*g-4*M*d),S=2*M;return[($-g)/S,(-g-$)/S].filter(r)}M/=h,g/=h,d/=h;const y=(3*g-M*M)/3,k=y/3,Q=(2*M*M*M-9*M*g+27*d)/27,f=Q/2,u=f*f+k*k*k;let p,m,v,L,E;if(u<0){const $=-y/3,S=$*$*$,I=c1(S),R=-Q/(2*I),P=R<-1?-1:R>1?1:R,T=Z0(P),F=g1(I),O=2*F;return v=O*o1(T/3)-M/3,L=O*o1((T+H1)/3)-M/3,E=O*o1((T+2*H1)/3)-M/3,[v,L,E].filter(r)}else{if(u===0)return p=f<0?g1(-f):-g1(f),v=2*p-M/3,L=-p-M/3,[v,L].filter(r);{const $=c1(u);return p=g1(-f+$),m=g1(f+$),[p-m-M/3].filter(r)}}},droots:function(c){if(c.length===3){const e=c[0],n=c[1],s=c[2],r=e-2*n+s;if(r!==0){const o=-c1(n*n-e*s),a=-e+n,i=-(o+a)/r,l=-(-o+a)/r;return[i,l]}else if(n!==s&&r===0)return[(2*n-s)/(2*(n-s))];return[]}if(c.length===2){const e=c[0],n=c[1];return e!==n?[e/(e-n)]:[]}return[]},curvature:function(c,e,n,s,r){let o,a,i,l,h=0,M=0;const g=b.compute(c,e),d=b.compute(c,n),y=g.x*g.x+g.y*g.y;if(s?(o=c1(K(g.y*d.z-d.y*g.z,2)+K(g.z*d.x-d.z*g.x,2)+K(g.x*d.y-d.x*g.y,2)),a=K(y+g.z*g.z,3/2)):(o=g.x*d.y-g.y*d.x,a=K(y,3/2)),o===0||a===0)return{k:0,r:0};if(h=o/a,M=a/o,!r){const k=b.curvature(c-.001,e,n,s,!0).k,Q=b.curvature(c+.001,e,n,s,!0).k;l=(Q-h+(h-k))/2,i=(m1(Q-h)+m1(h-k))/2}return{k:h,r:M,dk:l,adk:i}},inflections:function(c){if(c.length<4)return[];const e=b.align(c,{p1:c[0],p2:c.slice(-1)[0]}),n=e[2].x*e[1].y,s=e[3].x*e[1].y,r=e[1].x*e[2].y,o=e[3].x*e[2].y,a=18*(-3*n+2*s+3*r-o),i=18*(3*n-s-3*r),l=18*(r-n);if(b.approximately(a,0)){if(!b.approximately(i,0)){let d=-l/i;if(0<=d&&d<=1)return[d]}return[]}const h=2*a;if(b.approximately(h,0))return[];const M=i*i-4*a*l;if(M<0)return[];const g=Math.sqrt(M);return[(g-i)/h,-(i+g)/h].filter(function(d){return 0<=d&&d<=1})},bboxoverlap:function(c,e){const n=["x","y"],s=n.length;for(let r=0,o,a,i,l;r<s;r++)if(o=n[r],a=c[o].mid,i=e[o].mid,l=(c[o].size+e[o].size)/2,m1(a-i)>=l)return!1;return!0},expandbox:function(c,e){e.x.min<c.x.min&&(c.x.min=e.x.min),e.y.min<c.y.min&&(c.y.min=e.y.min),e.z&&e.z.min<c.z.min&&(c.z.min=e.z.min),e.x.max>c.x.max&&(c.x.max=e.x.max),e.y.max>c.y.max&&(c.y.max=e.y.max),e.z&&e.z.max>c.z.max&&(c.z.max=e.z.max),c.x.mid=(c.x.min+c.x.max)/2,c.y.mid=(c.y.min+c.y.max)/2,c.z&&(c.z.mid=(c.z.min+c.z.max)/2),c.x.size=c.x.max-c.x.min,c.y.size=c.y.max-c.y.min,c.z&&(c.z.size=c.z.max-c.z.min)},pairiteration:function(c,e,n){const s=c.bbox(),r=e.bbox(),o=1e5,a=n||.5;if(s.x.size+s.y.size<a&&r.x.size+r.y.size<a)return[(o*(c._t1+c._t2)/2|0)/o+"/"+(o*(e._t1+e._t2)/2|0)/o];let i=c.split(.5),l=e.split(.5),h=[{left:i.left,right:l.left},{left:i.left,right:l.right},{left:i.right,right:l.right},{left:i.right,right:l.left}];h=h.filter(function(g){return b.bboxoverlap(g.left.bbox(),g.right.bbox())});let M=[];return h.length===0||(h.forEach(function(g){M=M.concat(b.pairiteration(g.left,g.right,a))}),M=M.filter(function(g,d){return M.indexOf(g)===d})),M},getccenter:function(c,e,n){const s=e.x-c.x,r=e.y-c.y,o=n.x-e.x,a=n.y-e.y,i=s*o1(Q1)-r*u1(Q1),l=s*u1(Q1)+r*o1(Q1),h=o*o1(Q1)-a*u1(Q1),M=o*u1(Q1)+a*o1(Q1),g=(c.x+e.x)/2,d=(c.y+e.y)/2,y=(e.x+n.x)/2,k=(e.y+n.y)/2,Q=g+i,f=d+l,u=y+h,p=k+M,m=b.lli8(g,d,Q,f,y,k,u,p),v=b.dist(m,c);let L=M1(c.y-m.y,c.x-m.x),E=M1(e.y-m.y,e.x-m.x),$=M1(n.y-m.y,n.x-m.x),S;return L<$?((L>E||E>$)&&(L+=H1),L>$&&(S=$,$=L,L=S)):$<E&&E<L?(S=$,$=L,L=S):$+=H1,m.s=L,m.e=$,m.r=v,m},numberSort:function(c,e){return c-e}};class k1{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map(function(e){return b.pointsToString(e.points)}).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map(function(e){return e.length()}).reduce(function(e,n){return e+n})}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var n=e[0].bbox(),s=1;s<e.length;s++)b.expandbox(n,e[s].bbox());return n}offset(e){const n=[];return this.curves.forEach(function(s){n.push(...s.offset(e))}),new k1(n)}}const{abs:L1,min:r0,max:o0,cos:G0,sin:K0,acos:tt,sqrt:v1}=Math,et=Math.PI;class B{constructor(e){let n=e&&e.forEach?e:Array.from(arguments).slice(),s=!1;if(typeof n[0]=="object"){s=n.length;const y=[];n.forEach(function(k){["x","y","z"].forEach(function(Q){typeof k[Q]<"u"&&y.push(k[Q])})}),n=y}let r=!1;const o=n.length;if(s){if(s>4){if(arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");r=!0}}else if(o!==6&&o!==8&&o!==9&&o!==12&&arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const a=this._3d=!r&&(o===9||o===12)||e&&e[0]&&typeof e[0].z<"u",i=this.points=[];for(let y=0,k=a?3:2;y<o;y+=k){var l={x:n[y],y:n[y+1]};a&&(l.z=n[y+2]),i.push(l)}const h=this.order=i.length-1,M=this.dims=["x","y"];a&&M.push("z"),this.dimlen=M.length;const g=b.align(i,{p1:i[0],p2:i[h]}),d=b.dist(i[0],i[h]);this._linear=g.reduce((y,k)=>y+L1(k.y),0)<d/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,n,s,r){if(typeof r>"u"&&(r=.5),r===0)return new B(n,n,s);if(r===1)return new B(e,n,n);const o=B.getABC(2,e,n,s,r);return new B(e,o.A,s)}static cubicFromPoints(e,n,s,r,o){typeof r>"u"&&(r=.5);const a=B.getABC(3,e,n,s,r);typeof o>"u"&&(o=b.dist(n,a.C));const i=o*(1-r)/r,l=b.dist(e,s),h=(s.x-e.x)/l,M=(s.y-e.y)/l,g=o*h,d=o*M,y=i*h,k=i*M,Q={x:n.x-g,y:n.y-d},f={x:n.x+y,y:n.y+k},u=a.A,p={x:u.x+(Q.x-u.x)/(1-r),y:u.y+(Q.y-u.y)/(1-r)},m={x:u.x+(f.x-u.x)/r,y:u.y+(f.y-u.y)/r},v={x:e.x+(p.x-e.x)/r,y:e.y+(p.y-e.y)/r},L={x:s.x+(m.x-s.x)/(1-r),y:s.y+(m.y-s.y)/(1-r)};return new B(e,v,L,s)}static getUtils(){return b}getUtils(){return B.getUtils()}static get PolyBezier(){return k1}valueOf(){return this.toString()}toString(){return b.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,n=e[0].x,s=e[0].y,r=["M",n,s,this.order===2?"Q":"C"];for(let o=1,a=e.length;o<a;o++)r.push(e[o].x),r.push(e[o].y);return r.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map(function(e,n){return""+n+e.x+e.y+(e.z?e.z:0)}).join("")}update(){this._lut=[],this.dpoints=b.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,n=b.angle(e[0],e[this.order],e[1]);this.clockwise=n>0}length(){return b.length(this.derivative.bind(this))}static getABC(e=2,n,s,r,o=.5){const a=b.projectionratio(o,e),i=1-a,l={x:a*n.x+i*r.x,y:a*n.y+i*r.y},h=b.abcratio(o,e);return{A:{x:s.x+(s.x-l.x)/h,y:s.y+(s.y-l.y)/h},B:s,C:l,S:n,E:r}}getABC(e,n){n=n||this.get(e);let s=this.points[0],r=this.points[this.order];return B.getABC(this.order,s,n,r,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e+1)return this._lut;this._lut=[],e++,this._lut=[];for(let n=0,s,r;n<e;n++)r=n/(e-1),s=this.compute(r),s.t=r,this._lut.push(s);return this._lut}on(e,n){n=n||5;const s=this.getLUT(),r=[];for(let o=0,a,i=0;o<s.length;o++)a=s[o],b.dist(a,e)<n&&(r.push(a),i+=o/s.length);return r.length?t/=r.length:!1}project(e){const n=this.getLUT(),s=n.length-1,r=b.closest(n,e),o=r.mpos,a=(o-1)/s,i=(o+1)/s,l=.1/s;let h=r.mdist,M=a,g=M,d;h+=1;for(let y;M<i+l;M+=l)d=this.compute(M),y=b.dist(e,d),y<h&&(h=y,g=M);return g=g<0?0:g>1?1:g,d=this.compute(g),d.t=g,d.d=h,d}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?b.computeWithRatios(e,this.points,this.ratios,this._3d):b.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,n=[e[0]],s=e.length;for(let r=1,o,a;r<s;r++)o=e[r],a=e[r-1],n[r]={x:(s-r)/s*o.x+r/s*a.x,y:(s-r)/s*o.y+r/s*a.y};return n[s]=e[s-1],new B(n)}derivative(e){return b.compute(e,this.dpoints[0],this._3d)}dderivative(e){return b.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new B(b.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return b.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return b.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const n=this.derivative(e),s=v1(n.x*n.x+n.y*n.y);return{t:e,x:-n.y/s,y:n.x/s}}__normal3(e){const n=this.derivative(e),s=this.derivative(e+.01),r=v1(n.x*n.x+n.y*n.y+n.z*n.z),o=v1(s.x*s.x+s.y*s.y+s.z*s.z);n.x/=r,n.y/=r,n.z/=r,s.x/=o,s.y/=o,s.z/=o;const a={x:s.y*n.z-s.z*n.y,y:s.z*n.x-s.x*n.z,z:s.x*n.y-s.y*n.x},i=v1(a.x*a.x+a.y*a.y+a.z*a.z);a.x/=i,a.y/=i,a.z/=i;const l=[a.x*a.x,a.x*a.y-a.z,a.x*a.z+a.y,a.x*a.y+a.z,a.y*a.y,a.y*a.z-a.x,a.x*a.z-a.y,a.y*a.z+a.x,a.z*a.z];return{t:e,x:l[0]*n.x+l[1]*n.y+l[2]*n.z,y:l[3]*n.x+l[4]*n.y+l[5]*n.z,z:l[6]*n.x+l[7]*n.y+l[8]*n.z}}hull(e){let n=this.points,s=[],r=[],o=0;for(r[o++]=n[0],r[o++]=n[1],r[o++]=n[2],this.order===3&&(r[o++]=n[3]);n.length>1;){s=[];for(let a=0,i,l=n.length-1;a<l;a++)i=b.lerp(e,n[a],n[a+1]),r[o++]=i,s.push(i);n=s}return r}split(e,n){if(e===0&&n)return this.split(n).left;if(n===1)return this.split(e).right;const s=this.hull(e),r={left:this.order===2?new B([s[0],s[3],s[5]]):new B([s[0],s[4],s[7],s[9]]),right:this.order===2?new B([s[5],s[4],s[2]]):new B([s[9],s[8],s[6],s[3]]),span:s};return r.left._t1=b.map(0,0,1,this._t1,this._t2),r.left._t2=b.map(e,0,1,this._t1,this._t2),r.right._t1=b.map(e,0,1,this._t1,this._t2),r.right._t2=b.map(1,0,1,this._t1,this._t2),n?(n=b.map(n,e,1,0,1),r.right.split(n).left):r}extrema(){const e={};let n=[];return this.dims.forEach((function(s){let r=function(a){return a[s]},o=this.dpoints[0].map(r);e[s]=b.droots(o),this.order===3&&(o=this.dpoints[1].map(r),e[s]=e[s].concat(b.droots(o))),e[s]=e[s].filter(function(a){return a>=0&&a<=1}),n=n.concat(e[s].sort(b.numberSort))}).bind(this)),e.values=n.sort(b.numberSort).filter(function(s,r){return n.indexOf(s)===r}),e}bbox(){const e=this.extrema(),n={};return this.dims.forEach((function(s){n[s]=b.getminmax(this,s,e[s])}).bind(this)),n}overlaps(e){const n=this.bbox(),s=e.bbox();return b.bboxoverlap(n,s)}offset(e,n){if(typeof n<"u"){const s=this.get(e),r=this.normal(e),o={c:s,n:r,x:s.x+r.x*n,y:s.y+r.y*n};return this._3d&&(o.z=s.z+r.z*n),o}if(this._linear){const s=this.normal(0),r=this.points.map(function(o){const a={x:o.x+e*s.x,y:o.y+e*s.y};return o.z&&s.z&&(a.z=o.z+e*s.z),a});return[new B(r)]}return this.reduce().map(function(s){return s._linear?s.offset(e)[0]:s.scale(e)})}simple(){if(this.order===3){const r=b.angle(this.points[0],this.points[3],this.points[1]),o=b.angle(this.points[0],this.points[3],this.points[2]);if(r>0&&o<0||r<0&&o>0)return!1}const e=this.normal(0),n=this.normal(1);let s=e.x*n.x+e.y*n.y;return this._3d&&(s+=e.z*n.z),L1(tt(s))<et/3}reduce(){let e,n=0,s=0,r=.01,o,a=[],i=[],l=this.extrema().values;for(l.indexOf(0)===-1&&(l=[0].concat(l)),l.indexOf(1)===-1&&l.push(1),n=l[0],e=1;e<l.length;e++)s=l[e],o=this.split(n,s),o._t1=n,o._t2=s,a.push(o),n=s;return a.forEach(function(h){for(n=0,s=0;s<=1;)for(s=n+r;s<=1+r;s+=r)if(o=h.split(n,s),!o.simple()){if(s-=r,L1(n-s)<r)return[];o=h.split(n,s),o._t1=b.map(n,0,1,h._t1,h._t2),o._t2=b.map(s,0,1,h._t1,h._t2),i.push(o),n=s;break}n<1&&(o=h.split(n,1),o._t1=b.map(n,0,1,h._t1,h._t2),o._t2=h._t2,i.push(o))}),i}translate(e,n,s){s=typeof s=="number"?s:n;const r=this.order;let o=this.points.map((a,i)=>(1-i/r)*n+i/r*s);return new B(this.points.map((a,i)=>({x:a.x+e.x*o[i],y:a.y+e.y*o[i]})))}scale(e){const n=this.order;let s=!1;if(typeof e=="function"&&(s=e),s&&n===2)return this.raise().scale(s);const r=this.clockwise,o=this.points;if(this._linear)return this.translate(this.normal(0),s?s(0):e,s?s(1):e);const a=s?s(0):e,i=s?s(1):e,l=[this.offset(0,10),this.offset(1,10)],h=[],M=b.lli4(l[0],l[0].c,l[1],l[1].c);if(!M)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach(function(g){const d=h[g*n]=b.copy(o[g*n]);d.x+=(g?i:a)*l[g].n.x,d.y+=(g?i:a)*l[g].n.y}),s?([0,1].forEach(function(g){if(!(n===2&&g)){var d=o[g+1],y={x:d.x-M.x,y:d.y-M.y},k=s?s((g+1)/n):e;s&&!r&&(k=-k);var Q=v1(y.x*y.x+y.y*y.y);y.x/=Q,y.y/=Q,h[g+1]={x:d.x+k*y.x,y:d.y+k*y.y}}}),new B(h)):([0,1].forEach(g=>{if(n===2&&g)return;const d=h[g*n],y=this.derivative(g),k={x:d.x+y.x,y:d.y+y.y};h[g+1]=b.lli4(d,k,M,o[g+1])}),new B(h))}outline(e,n,s,r){if(n=n===void 0?e:n,this._linear){const L=this.normal(0),E=this.points[0],$=this.points[this.points.length-1];let S,I,R;s===void 0&&(s=e,r=n),S={x:E.x+L.x*e,y:E.y+L.y*e},R={x:$.x+L.x*s,y:$.y+L.y*s},I={x:(S.x+R.x)/2,y:(S.y+R.y)/2};const P=[S,I,R];S={x:E.x-L.x*n,y:E.y-L.y*n},R={x:$.x-L.x*r,y:$.y-L.y*r},I={x:(S.x+R.x)/2,y:(S.y+R.y)/2};const T=[R,I,S],F=b.makeline(T[2],P[0]),O=b.makeline(P[2],T[0]),Z=[F,new B(P),O,new B(T)];return new k1(Z)}const o=this.reduce(),a=o.length,i=[];let l=[],h,M=0,g=this.length();const d=typeof s<"u"&&typeof r<"u";function y(L,E,$,S,I){return function(R){const P=S/$,T=(S+I)/$,F=E-L;return b.map(R,0,1,L+P*F,L+T*F)}}o.forEach(function(L){const E=L.length();d?(i.push(L.scale(y(e,s,g,M,E))),l.push(L.scale(y(-n,-r,g,M,E)))):(i.push(L.scale(e)),l.push(L.scale(-n))),M+=E}),l=l.map(function(L){return h=L.points,h[3]?L.points=[h[3],h[2],h[1],h[0]]:L.points=[h[2],h[1],h[0]],L}).reverse();const k=i[0].points[0],Q=i[a-1].points[i[a-1].points.length-1],f=l[a-1].points[l[a-1].points.length-1],u=l[0].points[0],p=b.makeline(f,k),m=b.makeline(Q,u),v=[p].concat(i).concat([m]).concat(l);return new k1(v)}outlineshapes(e,n,s){n=n||e;const r=this.outline(e,n).curves,o=[];for(let a=1,i=r.length;a<i/2;a++){const l=b.makeshape(r[a],r[i-a],s);l.startcap.virtual=a>1,l.endcap.virtual=a<i/2-1,o.push(l)}return o}intersects(e,n){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof B&&(e=e.reduce()),this.curveintersects(this.reduce(),e,n)):this.selfintersects(n)}lineIntersects(e){const n=r0(e.p1.x,e.p2.x),s=r0(e.p1.y,e.p2.y),r=o0(e.p1.x,e.p2.x),o=o0(e.p1.y,e.p2.y);return b.roots(this.points,e).filter(a=>{var i=this.get(a);return b.between(i.x,n,r)&&b.between(i.y,s,o)})}selfintersects(e){const n=this.reduce(),s=n.length-2,r=[];for(let o=0,a,i,l;o<s;o++)i=n.slice(o,o+1),l=n.slice(o+2),a=this.curveintersects(i,l,e),r.push(...a);return r}curveintersects(e,n,s){const r=[];e.forEach(function(a){n.forEach(function(i){a.overlaps(i)&&r.push({left:a,right:i})})});let o=[];return r.forEach(function(a){const i=b.pairiteration(a.left,a.right,s);i.length>0&&(o=o.concat(i))}),o}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,n,s,r){const o=(r-s)/4,a=this.get(s+o),i=this.get(r-o),l=b.dist(e,n),h=b.dist(e,a),M=b.dist(e,i);return L1(h-l)+L1(M-l)}_iterate(e,n){let s=0,r=1,o;do{o=0,r=1;let a=this.get(s),i,l,h,M,g=!1,d=!1,y,k=r,Q=1;do if(d=g,M=h,k=(s+r)/2,i=this.get(k),l=this.get(r),h=b.getccenter(a,i,l),h.interval={start:s,end:r},g=this._error(h,a,s,r)<=e,y=d&&!g,y||(Q=r),g){if(r>=1){if(h.interval.end=Q=1,M=h,r>1){let u={x:h.x+h.r*G0(h.e),y:h.y+h.r*K0(h.e)};h.e+=b.angle({x:h.x,y:h.y},u,this.get(1))}break}r=r+(r-s)/2}else r=k;while(!y&&o++<100);if(o>=100)break;M=M||h,n.push(M),s=Q}while(r<1);return n}}class p0{#t=document.createElementNS("http://www.w3.org/2000/svg","svg");#e=document.createElementNS("http://www.w3.org/2000/svg","path");constructor(){this.#t.style.width="0",this.#t.style.height="0",this.#t.style.position="absolute",this.#t.appendChild(this.#e),document.body.appendChild(this.#t)}getBBox(){return this.#e.getBBox()}get d(){return this.#e.getAttribute("d")??""}set d(e){this.#e.style.d="",this.#e.style.d=z.cssifyPath(e);const n=this.#e.style.d!="";if(this.#e.style.d="",n)this.#e.setAttribute("d",e);else throw new Error("Invalid path")}get empty(){return this.d==""}clear(){this.d=""}get length(){return this.#e.getTotalLength()}getPoint(e){return this.#e.getPointAtLength(e)}load(e){typeof e!="string"&&(e instanceof z||(e=new z([e])),e=e.rawPath),this.d=e}measure(e){return this.load(e),this.length}}const G=new Intl.NumberFormat("en-US",{maximumSignificantDigits:8,useGrouping:!1}).format;class U{constructor(e,n,s,r){this.x0=e,this.y0=n,this.x=s,this.y=r,V.assertFinite(e,n,s,r),this.asString=`L ${G(s)},${G(r)}`,this.outgoingAngle=this.incomingAngle=Math.atan2(r-n,s-e)}reverse(){return new U(this.x,this.y,this.x0,this.y0)}toJSON(){return{command:"L",x0:this.x0,y0:this.y0,x:this.x,y:this.y}}static relative(e,n,s,r){return new this(e,n,s+e,r+n)}incomingAngle;outgoingAngle;command="L";asString;get length(){return Math.hypot(this.x0-this.x,this.y0-this.y)}translate(e,n){return new U(this.x0+e,this.y0+n,this.x+e,this.y+n)}toCubic(){return new r1(this.x0,this.y0,V.lerp(this.x0,this.x,1/3),V.lerp(this.y0,this.y,1/3),V.lerp(this.x0,this.x,2/3),V.lerp(this.y0,this.y,2/3),this.x,this.y)}transform(e){const n=n1(this.x,this.y,e),s=n1(this.x0,this.y0,e);return new U(s.x,s.y,n.x,n.y)}}class q{constructor(e,n,s,r,o,a,i){this.x0=e,this.y0=n,this.x1=s,this.y1=r,this.x=o,this.y=a,this.creationInfo=i,V.assertFinite(e,n,s,r,o,a),this.asString=`Q ${G(s)},${G(r)} ${G(o)},${G(a)}`}reverse(){return q.controlPoints(this.x,this.y,this.x1,this.y1,this.x0,this.y0)}static line(e,n,s,r,o){return new this(e,n,(e+s)/2,(n+r)/2,s,r,o)}static line4(e,n,s,r){return this.line(e,n,s,r,{source:"line"})}static line2(e,n){return this.line4(e.x,e.y,n.x,n.y)}static angles(e,n,s,r,o,a){V.assertFinite(e,n,s,r,o,a);const i=ft({x0:e,y0:n,angle:s},{x0:r,y0:o,angle:a+Math.PI});return i?new this(e,n,i.x,i.y,r,o,{source:"angles",success:!0,angle:a,angle0:s}):this.line(e,n,r,o,{source:"angles",success:!1,angle:a,angle0:s})}newAngles(e,n){return e??=this.requestedIncomingAngle,n??=this.requestedOutgoingAngle,q.angles(this.x0,this.y0,e,this.x,this.y,n)}toJSON(){return{command:"Q",x0:this.x0,y0:this.y0,x1:this.x1,y1:this.y1,x:this.x,y:this.y,creationInfo:this.creationInfo}}static controlPoints(e,n,s,r,o,a){return new this(e,n,s,r,o,a,{source:"controlPoints"})}static relative(e,n,s,r,o,a){return this.controlPoints(e,n,s+e,r+n,o+e,a+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y1,this.x-this.x1)}get requestedIncomingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle0:this.incomingAngle}get requestedOutgoingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle:this.outgoingAngle}command="Q";asString;translate(e,n){return q.controlPoints(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x+e,this.y+n)}transform(e){const n=n1(this.x0,this.y0,e),s=n1(this.x1,this.y1,e),r=n1(this.x,this.y,e);return q.controlPoints(n.x,n.y,s.x,s.y,r.x,r.y)}toCubic(){return new r1(this.x0,this.y0,V.lerp(this.x0,this.x1,2/3),V.lerp(this.y0,this.y1,2/3),V.lerp(this.x,this.x1,2/3),V.lerp(this.y,this.y1,2/3),this.x,this.y)}split(e){const{x:n,x0:s,x1:r,y:o,y0:a,y1:i}=this,l=s,h=a,M=(1-e)*s+e*r,g=(1-e)*a+e*i,d=(1-e)**2*s+2*(1-e)*e*r+e**2*n,y=(1-e)**2*a+2*(1-e)*e*i+e**2*o,k=q.controlPoints(l,h,M,g,d,y),Q=d,f=y,u=(1-e)*r+e*n,p=(1-e)*i+e*o,m=n,v=o,L=q.controlPoints(Q,f,u,p,m,v);return[k,L]}multiSplit(e){if(V.assertFinite(e),e<1||(e|0)!=e)throw new Error("wtf");const n=[];let s=this;for(;e>1;){const r=1/e;let o;[o,s]=s.split(r),n.push(o),e--}return n.push(s),n}}class r1{constructor(e,n,s,r,o,a,i,l){this.x0=e,this.y0=n,this.x1=s,this.y1=r,this.x2=o,this.y2=a,this.x=i,this.y=l,V.assertFinite(e,n,s,r,o,a,i,l),this.asString=`C ${G(s)},${G(r)} ${G(o)},${G(a)} ${G(i)},${G(l)}`}reverse(){return new r1(this.x,this.y,this.x2,this.y2,this.x1,this.y1,this.x0,this.y0)}static relative(e,n,s,r,o,a,i,l){return new this(e,n,s+e,r+n,o+e,a+n,i+e,l+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y2,this.x-this.x2)}command="C";asString;translate(e,n){return new r1(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x2+e,this.y2+n,this.x+e,this.y+n)}transform(e){const n=n1(this.x0,this.y0,e),s=n1(this.x1,this.y1,e),r=n1(this.x2,this.y2,e),o=n1(this.x,this.y,e);return new r1(n.x,n.y,s.x,s.y,r.x,r.y,o.x,o.y)}toCubic(){return this}}class _{get commands(){return this.#t}addCommand(e){this.#t.push(e),this.#e=void 0}addCommands(e){return e.forEach(n=>this.addCommand(n)),this}static fromStrings(e){let n=e.join(" ");const s=[];let r;for(;n=n.replace(/^ */,""),n!="";){let o=m0.exec(n);if(o){const a=V.parseFloatX(o[1]),i=V.parseFloatX(o[2]);if(a===void 0||i===void 0)throw console.error(o,a,i,this),new Error("wtf");r&&s.push(r),r=this.M(a,i),n=o[3];continue}if(r){if(o=M0.exec(n),o){const a=V.parseFloatX(o[1]),i=V.parseFloatX(o[2]);if(a===void 0||i===void 0)throw console.error(o,a,i,this),new Error("wtf");r=r.L(a,i),n=o[3];continue}if(o=L0.exec(n),o){const a=V.parseFloatX(o[1]),i=V.parseFloatX(o[2]),l=V.parseFloatX(o[3]),h=V.parseFloatX(o[4]);if(a===void 0||i===void 0||l===void 0||h===void 0)throw console.error(o,a,i,l,h,this),new Error("wtf");r=r.Q(a,i,l,h),n=o[5];continue}if(o=v0.exec(n),o){const a=V.parseFloatX(o[1]),i=V.parseFloatX(o[2]),l=V.parseFloatX(o[3]),h=V.parseFloatX(o[4]),M=V.parseFloatX(o[5]),g=V.parseFloatX(o[6]);if(a===void 0||i===void 0||l===void 0||h===void 0||M===void 0||g===void 0)throw console.error(o,a,i,l,h,M,g,this),new Error("wtf");r=r.C(a,i,l,h,M,g),n=o[7];continue}}throw console.error(n),new Error("wtf")}return r&&s.push(r),s}static M(e,n){const s=new _;return s.M(e,n),s}#t=[];get pathShape(){return new z(this.#t)}#e;M(e,n,s=NaN){return V.assertFinite(e,n),this.#e={x:e,y:n,outgoingAngle:s},this}previous(){return this.#e??this.#t.at(-1)}H(e){const n=this.previous();return this.addCommand(new U(n.x,n.y,e,n.y)),this}V(e){const n=this.previous();return this.addCommand(new U(n.x,n.y,n.x,e)),this}L(e,n){const s=this.previous();return this.addCommand(new U(s.x,s.y,e,n)),this}Q(e,n,s,r){const o=this.previous();return this.addCommand(q.controlPoints(o.x,o.y,e,n,s,r)),this}Q_HV(e,n){const s=this.previous();return this.Q(e,s.y,e,n)}Q_VH(e,n){const s=this.previous();return this.Q(s.x,n,e,n)}Q_angles(e,n,s,r){const o=this.previous();if(r??=o.outgoingAngle,r===void 0)throw new Error("wtf");return this.addCommand(q.angles(o.x,o.y,r,e,n,s)),this}C(e,n,s,r,o,a){const i=this.previous();return this.addCommand(new r1(i.x,i.y,e,n,s,r,o,a)),this}circle(e,n,s="cw"){const r=this.previous(),o=r.x,a=r.y,i=Math.atan2(a-n,o-e),l=Math.hypot(a-n,o-e),h=s=="cw"?1:-1,M=i+Math.PI*2*h,g=V.makeLinear(0,i,1,M);function d(Q){switch(Q){case 0:case 1:return r;default:{const f=g(Q),u=V.polarToRectangular(l,f);return{x:e+u.x,y:n+u.y}}}}function y(Q){return d(Q)}return this.addParametricPath(y,8),this}arc(e,n,s,r,o){const a=this.previous(),i=a.x,l=a.y;let h=V.positiveModulo(Math.atan2(l-n,i-e),Math.PI*2);const M=Math.hypot(l-n,i-e);let g=V.positiveModulo(Math.atan2(r-n,s-e),Math.PI*2);const d=Math.hypot(r-n,s-e);o=="cw"?h>g&&(g+=Math.PI*2):h<g&&(h+=Math.PI*2);const y=Math.abs(h-g),k=Math.ceil(y*1.17+1e-4),Q=V.makeLinear(0,M,1,d),f=V.makeLinear(0,h,1,g);function u(p){switch(p){case 0:return a;case 1:return{x:s,y:r};default:{const m=V.polarToRectangular(Q(p),f(p));return{x:e+m.x,y:n+m.y}}}}return this.addParametricPath(u,k)}addParametricPath(e,n){if(n<=0)throw new Error("wtf");const s=1e-4/n,r=V.initializedArray(n+1,o=>{const a=o/n,i=e(a),l=y0(e,a,s);return{t:a,point:i,direction:l}});if(r.some(o=>!isFinite(o.direction))){const{x:o,y:a}=r[0].point;if(V.assertFinite(o,a),r.some(i=>i.point.x!=o||i.point.y!=a))throw new Error("Unable to create a path from this function.  Unable to compute the derivative.");for(let i=0;i<n;i++)this.Q(o,a,o,a)}else V.initializedArray(n,a=>({from:r[a],to:r[a+1]})).forEach(a=>{this.Q_angles(a.to.point.x,a.to.point.y,a.to.direction,a.from.direction)});return this}}function a0(c,e,n){if(!(e>=0&&e<=1))throw new Error("Expected 0 ≤ t ≤ 1");const s=Math.max(0,e-n),r=c(s),o=Math.min(1,e+n),a=c(o),i=a.x-r.x,l=a.y-r.y;return i==0&&l==0?NaN:Math.atan2(l,i)}function y0(c,e,n){const s=a0(c,e,n*2),r=a0(c,e,n*1),o=s-r;return r-o}const t1=" *",C="(-?[0-9]+\\.?[0-9]*(?:[eE][-+]?[0-9]+)?)",W="(?: *[, ] *|(?=-))",m0=new RegExp(`^M${t1}${C}${W}${C}(.*)$`),nt=new RegExp(`^m${t1}${C}${W}${C}(.*)$`),M0=new RegExp(`^L${t1}${C}${W}${C}(.*)$`),i0=new RegExp(`^${W}${C}${W}${C}(.*)$`),st=new RegExp(`^l${t1}${C}${W}${C}(.*)$`),rt=new RegExp(`^H${t1}${C}(.*)$`),ot=new RegExp(`^h${t1}${C}(.*)$`),at=new RegExp(`^V${t1}${C}(.*)$`),it=new RegExp(`^v${t1}${C}(.*)$`),g0=new RegExp(`^${W}${C}(.*)$`),ct=g0,L0=new RegExp(`^Q${t1}${C}${W}${C}${W}${C}${W}${C}(.*)$`),Qt=new RegExp(`^${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),ht=new RegExp(`^q${t1}${C}${W}${C}${W}${C}${W}${C}(.*)$`),v0=new RegExp(`^C${t1}${C}${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),c0=new RegExp(`^${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),dt=new RegExp(`^c${t1}${C}${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),lt=new RegExp("^[zZ](.*)$");class ut extends Error{constructor(e,n){super(e),this.where=n}}class z{getLength(){const e=j0(W0(F0(this.rawPath)));let n=0;return e.forEach((s,r)=>{if(r>0){const o=e[r-1];if(s[0]!="C")throw new Error("wtf");const i=o.at(-2),l=o.at(-1);if(typeof i!="number"||typeof l!="number")throw new Error("wtf");const h=[i,l,...s.slice(1)],M=new B(h);n+=M.length()}}),n}reverse(){return new z(this.commands.toReversed().map(e=>e.reverse()))}static fromString(e){const n=this.fromJson(e);if(n)return n;let s=e,r=null;const o=d=>new ut(d,s),a=d=>{const y=V.parseFloatX(d);if(y===void 0)throw o(`Invalid number: "${d}"`);return y};let i=0,l=0;const h=[],M=d=>{h.push(d),i=d.x,l=d.y};let g;for(;s=s.replace(/^ */,""),s!="";){if(r=m0.exec(s)){i=a(r[1]),l=a(r[2]),g={x0:i,y0:l},s=r[3];continue}if(r=nt.exec(s)){for(i+=a(r[1]),l+=a(r[2]),g={x0:i,y0:l},s=r[3];r=i0.exec(s);){const d=U.relative(i,l,a(r[1]),a(r[2]));M(d),s=r[3]}continue}if(!g)throw o("Must start with an M command.");if(r=lt.exec(s)){if(i!=g.x0||l!=g.y0){const d=new U(i,l,g.x0,g.y0);M(d)}s=r[1];continue}if(r=M0.exec(s)){const d=a(r[1]),y=a(r[2]),k=new U(i,l,d,y);M(k),s=r[3];continue}if(r=st.exec(s)){for(;r;){const d=a(r[1]),y=a(r[2]),k=U.relative(i,l,d,y);M(k),s=r[3],r=i0.exec(s)}continue}if(r=rt.exec(s)){const d=a(r[1]),y=new U(i,l,d,l);M(y),s=r[2];continue}if(r=ot.exec(s)){for(;r;){const d=a(r[1]),y=new U(i,l,i+d,l);M(y),s=r[2],r=ct.exec(s)}continue}if(r=at.exec(s)){const d=a(r[1]),y=new U(i,l,i,d);M(y),s=r[2];continue}if(r=it.exec(s)){for(;r;){const d=a(r[1]),y=new U(i,l,i,l+d);M(y),s=r[2],r=g0.exec(s)}continue}if(r=L0.exec(s)){const d=a(r[1]),y=a(r[2]),k=a(r[3]),Q=a(r[4]),f=q.controlPoints(i,l,d,y,k,Q);M(f),s=r[5];continue}if(r=ht.exec(s)){for(;r;){const d=a(r[1]),y=a(r[2]),k=a(r[3]),Q=a(r[4]),f=q.relative(i,l,d,y,k,Q);M(f),s=r[5],r=Qt.exec(s)}continue}if(r=v0.exec(s)){for(;r;){const d=a(r[1]),y=a(r[2]),k=a(r[3]),Q=a(r[4]),f=a(r[5]),u=a(r[6]),p=new r1(i,l,d,y,k,Q,f,u);M(p),s=r[7],r=c0.exec(s)}continue}if(r=dt.exec(s)){for(;r;){const d=a(r[1]),y=a(r[2]),k=a(r[3]),Q=a(r[4]),f=a(r[5]),u=a(r[6]),p=r1.relative(i,l,d,y,k,Q,f,u);M(p),s=r[7],r=c0.exec(s)}continue}throw o("Confused.")}return new this(h)}static fromJson(e){try{const s=JSON.parse(e).commands.map(r=>{switch(r.command){case"C":{const{x0:o,y0:a,x1:i,y1:l,x2:h,y2:M,x:g,y:d}=r;return new r1(o,a,i,l,h,M,g,d)}case"L":{const{x0:o,y0:a,x:i,y:l}=r;return new U(o,a,i,l)}case"Q":{const{x0:o,y0:a,x:i,y:l,creationInfo:h}=r;switch(h.source){case"angles":{const{angle0:M,angle:g}=h,d=q.angles(o,a,M,i,l,g);return(d.creationInfo.source!="angles"||d.creationInfo.success!=h.success)&&console.warn("different",r,d),d}case"controlPoints":{const{x1:M,y1:g}=r;return q.controlPoints(o,a,M,g,i,l)}case"line":return q.line4(o,a,i,l);default:throw new Error(`Unknown source: "${h.source}"`)}}default:throw new Error(`Unknown command: "${r.command}"`)}});return new z(s)}catch{return}}matchForMorph(e){const n=this.commands.map(i=>i.toCubic()),s=e.commands.map(i=>i.toCubic());if(n.length!=s.length){const{shorter:i,longer:l}=n.length<s.length?{shorter:n,longer:s}:{shorter:s,longer:n};if(i.length==0)throw new Error("can't morph something into nothing");const h=l.length/i.length,M=[];i.forEach((g,d)=>{const y=Math.round((d+1)*h);for(;M.length<y;)M.push(g)}),i.length=0,i.push(...M)}if(n.length!=s.length)throw new Error("wtf");function r(i){return z.cssifyPath(i.map(l=>new z([l]).rawPath).join())}const o=r(n),a=r(s);return[o,a]}commands;get endX(){return this.commands.at(-1)?.x}get endY(){return this.commands.at(-1)?.y}get startX(){return this.commands.at(0)?.x0}get startY(){return this.commands.at(0)?.y0}constructor(e){this.commands=[...e]}static cssifyPath(e){return`path('${e}')`}get cssPath(){return z.cssifyPath(this.rawPath)}makeElement(){const e=document.createElementNS("http://www.w3.org/2000/svg","path"),n=this.cssPath;if(e.style.d=n,e.style.d=="")throw console.error(n,e),new Error("wtf");return e}static needAnM(e,n){return n?!e||e.x!=n.x0||e.y!=n.y0:!1}get rawPath(){return this.splitOnMove().flatMap(e=>{const n=[`M ${G(e.startX)},${G(e.startY)}`];return e.commands.forEach(s=>n.push(s.asString)),e.startX==e.endX&&e.startY==e.endY&&n.push("Z"),n}).join(" ")}splitOnMove(){const e=[];let n=[];return this.commands.forEach(s=>{z.needAnM(n.at(-1),s)&&(n=[],e.push(n)),n.push(s)}),e.map(s=>new z(s))}static join(e){return new z(e.flatMap(({Δx:n,Δy:s,shape:r})=>r.translate(n,s).commands))}convertToCubics(){return new z(this.commands.map(e=>e.toCubic()))}translate(e,n){return new z(this.commands.map(s=>s.translate(e,n)))}transform(e){return new z(this.commands.map(n=>n.transform(e)))}static parametric(e,n){const s=e(0);return _.M(s.x,s.y).addParametricPath(e,n).pathShape}static glitchFreeParametric(e,n){const s=this.#e(e,n,0);return V.assertNonNullable(s)}static#t=new p0;static#e(e,n,s){if(s>0&&console.log(s),s>=4){console.log("⚝");return}const o=this.parametric(e,n).commands.map((l,h,M)=>{const g=h/M.length,d=(h+1)/M.length;return{command:l,initialT:g,finalT:d}});let a=0;const i=l=>{const h=new this([l]);this.#t.d=h.rawPath;const M=this.#t.length,g=Math.hypot(l.x0-l.x,l.y0-l.y),d=M/g;return d<2||!isFinite(d)};for(;a<o.length;){const l=o[a].command;if(i(l))a++;else{const h=Math.max(0,a-1);let M=a+1;for(;M<o.length;){const p=o[M].command;if(M++,i(p))break}const g=o[h].initialT,d=o[M-1].finalT,y=V.makeLinear(0,g,1,d),k=p=>e(y(p)),Q=M-h,f=Q+1,u=this.#e(k,f,s+1);if(u===void 0){if(s>0)return;const p=o[a],{x0:m,y0:v,x:L,y:E}=p.command;p.command=q.line4(m,v,L,E),a++}else o.splice(h,Q,...u.commands.map((p,m,v)=>{const L=y(m/v.length),E=y((m+1)/v.length);return{command:p,initialT:L,finalT:E}})),a+=f}}return new z(o.map(l=>l.command))}static fixAngleRounding(e){return e+400-400}static toDegrees(e){return Math.round(e*V.degreesPerRadian*100)/100}dump(){const e=this.commands.map((n,s)=>{const{x0:r,y0:o,x:a,y:i,incomingAngle:l,outgoingAngle:h,command:M}=n,g=document.createElementNS("http://www.w3.org/2000/svg","path");g.setAttribute("d",new z([n]).rawPath);const d=g.getTotalLength(),y=this.commands[s-1],Q=z.needAnM(y,n)?{}:{difference:z.toDegrees(V.angleBetween(y.outgoingAngle,l))};return{x0:r,y0:o,x:a,y:i,incomingAngle:z.toDegrees(l),outgoingAngle:z.toDegrees(h),length:d,c:M,...Q}});console.table(e),console.log(this.rawPath),console.log(JSON.stringify(this))}}function ft(c,e){if(V.assertFinite(c.x0,c.y0,c.angle,e.x0,e.y0,e.angle),isNaN(c.angle)||isNaN(e.angle)||c.angle==e.angle)return;const n=Math.tan(c.angle),s=Math.tan(e.angle),r=Math.abs(n)*100>Number.MAX_SAFE_INTEGER,o=Math.abs(s)*100>Number.MAX_SAFE_INTEGER;if(r&&o)return;const a=Math.atan2(e.y0-c.y0,e.x0-c.x0),i=V.angleBetween(c.angle,a),l=V.angleBetween(e.angle,a);if(i==0||Math.abs(l)==Math.PI){if(Math.abs(i)==Math.PI||l==0)return;const g=(c.x0+e.x0)/2,d=(c.y0+e.y0)/2;return{x:g,y:d}}const h=Math.sign(i),M=Math.sign(l);if(!(h!=M||h==0)&&!(Math.abs(l)<=Math.abs(i)+V.radiansPerDegree))if(r||o){const g=r?c.x0:e.x0,d=r?{...e,slope:s}:{...c,slope:n},y=d.slope*(g-d.x0)+d.y0;return{x:g,y}}else{const g=(e.y0-s*e.x0-c.y0+n*c.x0)/(n-s),d=n*(g-c.x0)+c.y0;return{x:g,y:d}}}function pt(c){if(!(c instanceof q))throw new Error("wtf");if(c.creationInfo.source!="angles")throw new Error("wtf");return c}class E1{constructor(e,n=16,s){this.f=e;const r=z.parametric(e,n);this.#e=r.commands.map((o,a,i)=>{const l=a/i.length,h=(a+1)/i.length;return this.#r(l,h,pt(o))}).sort((o,a)=>o.metric-a.metric),s===void 0&&(E1.#t.load(r),s=E1.#t.getBBox()),typeof s!="number"&&(s=Math.hypot(s.height,s.width)),this.#n=.001*s}static#t=new p0;#e;#n;get commands(){return this.#e}#o(e){this.#e.splice(this.#e.findLastIndex(n=>n.metric<=e.metric)+1,0,e)}#r(e,n,s){let o=0;{const l=[{x:s.x0,y:s.y0}];for(let h=1;h<4;h++){const M=h/4,g=V.lerp(e,n,M);l.push(this.f(g))}l.push({x:s.x,y:s.y}),l.forEach((h,M)=>{const g=l[M+1];g&&(o+=Math.hypot(h.x-g.x,h.y-g.y))})}const a=E1.#t.measure(s),i=Math.abs(o-a);return s.creationInfo.success,{startT:e,endT:n,command:s,polyLineLength:o,curveLength:a,metric:i}}add(e){for(let n=0;n<e;n++)this.addOne()}addOne(){const e=this.#e.pop(),{startT:n,endT:s}=e,r=(n+s)/2,o=this.f(r),a=1e-4*(r-n),i=y0(this.f,r,a),l=q.angles(e.command.x0,e.command.y0,e.command.requestedIncomingAngle,o.x,o.y,i),h=this.#r(n,r,l);this.#o(h);const M=q.angles(o.x,o.y,i,e.command.x,e.command.y,e.command.requestedOutgoingAngle),g=this.#r(r,s,M);return this.#o(g),{toSplit:e,firstCommandInfo:h,secondCommandInfo:g}}done(){return this.commands.at(-1).metric<this.#n}go(e=50){for(let n=0;n<e&&!this.done();n++)this.addOne()}get pathShape(){return new z(this.#e.toSorted((e,n)=>e.startT-n.startT).map(({command:e})=>e))}summarize(){function e(n){n.sort((M,g)=>M-g);const s=n.length;function r(M){const d=(n.length-1)*M;if(Number.isInteger(d))return n[d];{const y=Math.floor(d),k=y+1,Q=d-y;return V.lerp(n[y],n[k],Q)}}if(n.length<2)throw new Error("wtf");const o=V.initializedArray(5,M=>r(M/4));let a=0,i=0;n.forEach(M=>{a+=M,i+=M*M});const l=a/s,h=Math.sqrt((i-s*l*l)/(s-1));return{quartiles:o,mean:l,standardDeviation:h}}return{polyLineLength:e(this.#e.map(({polyLineLength:n})=>n)),curveLength:e(this.#e.map(({curveLength:n})=>n)),metric:e(this.#e.map(({metric:n})=>n)),tCoverage:e(this.#e.map(({startT:n,endT:s})=>s-n)),generation:e(this.#e.map(({startT:n,endT:s})=>-Math.log2(s-n))),count:this.#e.length}}dump(){console.table(this.commands.map(({startT:e,endT:n,metric:s,curveLength:r})=>({startT:e,tCoverage:n-e,generation:-Math.log2(n-e),metric:s,curveLength:r})))}static chordRatio(e){const n=V.FULL_CIRCLE/e,s=2*Math.sin(n/2);return n/s}}window.ParametricToPath=E1;const yt=-26,mt=8,Mt=16,gt=1,Lt=0,vt=21,xt=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 5,-19 Q 4,-19 4,-20 Q 4,-21 5,-21 Q 5.5857864,-21 6,-20 Q 6.3007391,-19.273951 6,-18 Q 5.7849593,-17.089073 5,-16 Q 4.5811388,-15.418861 4,-15","advance":10},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 9,-21 L 1,0 M 9,-21 L 17,0 M 4,-7 L 14,-7","advance":18},{"key":"B","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.618034,-11.145898 13,-11 M 4,-11 L 13,-11 Q 14.381966,-11 16,-10 Q 16.503548,-9.6887901 17,-9 Q 17.784959,-7.9109272 18,-7 Q 18.354102,-5.5 18,-4 Q 17.784959,-3.0890728 17,-2 Q 16.503548,-1.3112099 16,-1 Q 14.381966,0.0000000000000002220446 13,0 L 4,0","advance":21},{"key":"C","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.662278,-3.9188612 18,-5","advance":21},{"key":"D","d":"M 4,-21 L 4,0 M 4,-21 L 11,-21 Q 12.381966,-21 14,-20 Q 15.007096,-19.37758 16,-18 Q 16.403407,-17.440302 17,-16 Q 17.84371,-13.963105 18,-13 Q 18.405694,-10.5 18,-8 Q 17.84371,-7.0368952 17,-5 Q 16.403407,-3.5596976 16,-3 Q 15.007096,-1.6224198 14,-1 Q 12.381966,0.0000000000000002220446 11,0 L 4,0","advance":21},{"key":"E","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11 M 4,0 L 17,0","advance":19},{"key":"F","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11","advance":18},{"key":"G","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.784959,-4.0890728 18,-5 Q 18.354102,-6.5 18,-8 M 13,-8 L 18,-8","advance":21},{"key":"H","d":"M 4,-21 L 4,0 M 18,-21 L 18,0 M 4,-11 L 18,-11","advance":22},{"key":"I","d":"M 4,-21 L 4,0","advance":8},{"key":"J","d":"M 12,-21 L 12,-5 Q 12,-3.618034 11,-2 Q 10.68879,-1.4964518 10,-1 Q 8.9109272,-0.21504074 8,0 Q 7,0.23606798 6,0 Q 5.0890728,-0.21504074 4,-1 Q 3.3112099,-1.4964518 3,-2 Q 2.3041135,-3.125968 2,-5 Q 1.8377223,-6 2,-7","advance":16},{"key":"K","d":"M 4,-21 L 4,0 M 18,-21 L 4,-7 M 9,-12 L 18,0","advance":21},{"key":"L","d":"M 4,-21 L 4,0 L 16,0","advance":17},{"key":"M","d":"M 4,-21 L 4,0 M 4,-21 L 12,0 M 20,-21 L 12,0 M 20,-21 L 20,0","advance":24},{"key":"N","d":"M 4,-21 L 4,0 M 4,-21 L 18,0 M 18,-21 L 18,0","advance":22},{"key":"O","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z","advance":22},{"key":"P","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.354102,-15.5 18,-14 Q 17.784959,-13.089073 17,-12 Q 16.503548,-11.31121 16,-11 Q 14.381966,-10 13,-10 L 4,-10","advance":21},{"key":"Q","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z M 12,-4 L 18,2","advance":22},{"key":"R","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.381966,-11 13,-11 L 4,-11 M 11,-11 L 18,0","advance":21},{"key":"S","d":"M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"T","d":"M 8,-21 L 8,0 M 1,-21 L 15,-21","advance":16},{"key":"U","d":"M 4,-21 L 4,-6 Q 4,-4.618034 5,-3 Q 5.763932,-1.763932 7,-1 Q 8.125968,-0.30411354 10,0 Q 11,0.16227766 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.236068,-1.763932 17,-3 Q 18,-4.618034 18,-6 L 18,-21","advance":22},{"key":"V","d":"M 1,-21 L 9,0 M 17,-21 L 9,0","advance":18},{"key":"W","d":"M 2,-21 L 7,0 M 12,-21 L 7,0 M 12,-21 L 17,0 M 22,-21 L 17,0","advance":24},{"key":"X","d":"M 3,-21 L 17,0 M 17,-21 L 3,0","advance":20},{"key":"Y","d":"M 1,-21 L 9,-11 L 9,0 M 17,-21 L 9,-11","advance":18},{"key":"Z","d":"M 17,-21 L 3,0 M 3,-21 L 17,-21 M 3,0 L 17,0","advance":20},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 18,7","advance":18},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 15,-14 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"b","d":"M 4,-21 L 4,0 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"c","d":"M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"d","d":"M 15,-21 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"e","d":"M 3,-8 L 15,-8 Q 15.472136,-8 15,-10 Q 14.784959,-10.910927 14,-12 Q 13.581139,-12.581139 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"f","d":"M 10,-21 Q 9,-21.236068 8,-21 Q 6.575679,-20.663763 6,-20 Q 5,-18.84699 5,-17 L 5,0 M 2,-14 L 9,-14","advance":12},{"key":"g","d":"M 15,-14 L 15,2 Q 15,3.381966 14,5 Q 13.68879,5.5035482 13,6 Q 11.910927,6.7849593 11,7 Q 9.5,7.354102 8,7 Q 6.881966,6.736068 6,6 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"h","d":"M 4,-21 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"i","d":"M 3,-21 Q 3,-20 4,-20 Q 5,-20 5,-21 Q 5,-22 4,-22 Q 3,-22 3,-21 Z M 4,-14 L 4,0","advance":8},{"key":"j","d":"M 5,-21 Q 5,-20 6,-20 Q 7,-20 7,-21 Q 7,-22 6,-22 Q 5,-22 5,-21 Z M 6,-14 L 6,3 Q 6,4.8469903 5,6 Q 4.424321,6.6637634 3,7 Q 2,7.236068 1,7","advance":10},{"key":"k","d":"M 4,-21 L 4,0 M 14,-14 L 4,-4 M 8,-8 L 15,0","advance":17},{"key":"l","d":"M 4,-21 L 4,0","advance":8},{"key":"m","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0 M 15,-10 Q 16.256584,-11.743416 18,-13 Q 19.089073,-13.784959 20,-14 Q 21.5,-14.354102 23,-14 Q 24.424321,-13.663763 25,-13 Q 26,-11.84699 26,-10 L 26,0","advance":30},{"key":"n","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"o","d":"M 8,-14 Q 6.9188612,-13.662278 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.37758,-1.9929036 15,-3 Q 15.695886,-4.125968 16,-6 Q 16.162278,-7 16,-8 Q 15.695886,-9.874032 15,-11 Q 14.37758,-12.007096 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Z","advance":19},{"key":"p","d":"M 4,-14 L 4,7 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"q","d":"M 15,-14 L 15,7 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"r","d":"M 4,-14 L 4,0 M 4,-8 Q 4.145898,-9.618034 5,-11 Q 5.6224198,-12.007096 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14","advance":13},{"key":"s","d":"M 14,-11 Q 13.914214,-12.207107 13,-13 Q 12.272122,-13.631285 10,-14 Q 8.5,-14.243416 7,-14 Q 4.7278782,-13.631285 4,-13 Q 3,-12.132705 3,-11 Q 3,-10 4,-9 Q 4.75,-8.25 6,-8 L 11,-7 Q 12.25,-6.75 13,-6 Q 13.690983,-5.309017 14,-4 Q 14.118034,-3.5 14,-3 Q 13.663763,-1.575679 13,-1 Q 12.272122,-0.36871462 10,0 Q 8.5,0.24341649 7,0 Q 4.7278782,-0.36871462 4,-1 Q 3.0857864,-1.7928932 3,-3","advance":17},{"key":"t","d":"M 5,-21 L 5,-4 Q 5,-2.1530097 6,-1 Q 6.575679,-0.33623659 8,0 Q 9,0.23606798 10,0 M 2,-14 L 9,-14","advance":12},{"key":"u","d":"M 4,-14 L 4,-4 Q 4,-2.1530097 5,-1 Q 5.575679,-0.33623659 7,0 Q 8.5,0.35410197 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.743416,-2.2565835 15,-4 M 15,-14 L 15,0","advance":19},{"key":"v","d":"M 2,-14 L 8,0 M 14,-14 L 8,0","advance":16},{"key":"w","d":"M 3,-14 L 7,0 M 11,-14 L 7,0 M 11,-14 L 15,0 M 19,-14 L 15,0","advance":22},{"key":"x","d":"M 3,-14 L 14,0 M 14,-14 L 3,0","advance":17},{"key":"y","d":"M 2,-14 L 8,0 M 14,-14 L 8,0 Q 6.7047906,3.0221553 6,4 Q 5.1622777,5.1622777 4,6 Q 2.9109272,6.7849593 2,7 Q 1.5,7.118034 1,7","advance":16},{"key":"z","d":"M 14,-14 L 3,0 M 3,-14 L 14,-14 M 3,0 L 14,0","advance":17},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),wt={top:yt,bottom:mt,spaceWidth:Mt,strokeWidth:gt,kerning:Lt,mHeight:vt,letters:xt},kt=-25,Et=12,St=16,_t=1,bt=0,Ht=21,$t=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 2,-14 L 2,-10","advance":4},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 3.0619516,-1.7654114 5,-4 Q 6.5336244,-5.7682838 8,-8 Q 10.09173,-11.183459 12,-15 L 15,-21 L 15,0 Q 14.700877,-1.566959 14,-3 Q 13.320601,-4.3891255 12,-6 Q 11.09902,-7.0990195 10,-8 Q 7.8885621,-9.7309651 7,-10 Q 5.8445752,-10.349834 5,-10 Q 4.2928932,-9.7071068 4,-9 Q 3.6992609,-8.2739515 4,-7 Q 4.2150407,-6.0890728 5,-5 Q 5.6349159,-4.1191013 7,-3 Q 8.6108745,-1.6793988 10,-1 Q 12.044639,0.0000000000000002220446 13,0 L 18,0","advance":20},{"key":"B","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 16.777863,-21.288507 18,-21 Q 19.309017,-20.690983 20,-20 Q 20.690983,-19.309017 21,-18 Q 21.236068,-17 21,-16 Q 20.784959,-15.089073 20,-14 Q 19.581139,-13.418861 19,-13 Q 18.440302,-12.596593 17,-12 Q 15.535534,-11.393398 14,-11 M 13,-11 Q 13.5,-11.081139 14,-11 Q 15.874032,-10.695886 17,-10 Q 17.503548,-9.6887901 18,-9 Q 18.784959,-7.9109272 19,-7 Q 19.354102,-5.5 19,-4 Q 18.784959,-3.0890728 18,-2 Q 17.581139,-1.4188612 17,-1 Q 15.910927,-0.21504074 15,0 Q 13.5,0.35410197 12,0 Q 10.690983,-0.30901699 10,-1 Q 9.1666667,-1.8333333 9,-3","advance":23},{"key":"C","d":"M 12,-15 Q 11.792893,-14.5 12,-14 Q 12.292893,-13.292893 13,-13 Q 13.726049,-12.699261 15,-13 Q 16.309017,-13.309017 17,-14 Q 17.690983,-14.690983 18,-16 Q 18.236068,-17 18,-18 Q 17.690983,-19.309017 17,-20 Q 16.309017,-20.690983 15,-21 Q 13.777863,-21.288507 12,-21 Q 10.125968,-20.695886 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 13.007096,-1.6224198 14,-3 Q 14.662278,-3.9188612 15,-5","advance":20},{"key":"D","d":"M 13,-21 Q 11.833333,-20.833333 11,-20 Q 10.58711,-19.58711 10,-18 Q 9.3933406,-16.360043 9,-14 L 8,-8 Q 7.8366366,-7.0198193 7,-5 Q 6.4034072,-3.5596976 6,-3 Q 5.1622777,-1.8377223 4,-1 Q 2.9109272,-0.21504074 2,0 Q 0.72604853,0.30073915 0,0 Q -0.70710678,-0.29289322 -1,-1 Q -1.4142136,-2 -1,-3 Q -0.70710678,-3.7071068 0,-4 Q 0.72604853,-4.3007391 2,-4 Q 3.309017,-3.690983 4,-3 L 6,-1 Q 6.6125741,-0.38742589 9,0 Q 10.5,0.24341649 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.007096,-1.6224198 17,-3 Q 18.197734,-4.6617677 19,-7 Q 19.709727,-9.0685242 20,-12 Q 20.245983,-14.484185 20,-16 Q 19.695886,-17.874032 19,-19 Q 18.68879,-19.503548 18,-20 Q 16.910927,-20.784959 16,-21 Q 14.089073,-21.451109 13,-21 Q 11.585786,-20.414214 11,-19 Q 10.766804,-18.437016 11,-17 Q 11.232017,-15.570249 12,-14 Q 12.679399,-12.610875 14,-11 Q 14.90098,-9.9009805 16,-9 Q 17.081639,-8.1132681 19,-7 Q 19.968871,-6.4377423 21,-6","advance":23},{"key":"E","d":"M 14,-17 Q 13.792893,-16.5 14,-16 Q 14.292893,-15.292893 15,-15 Q 16,-14.585786 17,-15 Q 17.707107,-15.292893 18,-16 Q 18.300739,-16.726049 18,-18 Q 17.663763,-19.424321 17,-20 Q 16.272122,-20.631285 14,-21 Q 12,-21.324555 10,-21 Q 7.7278782,-20.631285 7,-20 Q 6.3362366,-19.424321 6,-18 Q 5.645898,-16.5 6,-15 Q 6.2150407,-14.089073 7,-13 Q 7.4964518,-12.31121 8,-12 Q 9.381966,-11.145898 11,-11 Q 9.5,-11.243416 8,-11 Q 6.125968,-10.695886 5,-10 Q 4.4964518,-9.6887901 4,-9 Q 3.2150407,-7.9109272 3,-7 Q 2.645898,-5.5 3,-4 Q 3.2150407,-3.0890728 4,-2 Q 4.4964518,-1.3112099 5,-1 Q 6.125968,-0.30411354 8,0 Q 9.5,0.24341649 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.007096,-1.6224198 16,-3 Q 16.662278,-3.9188612 17,-5","advance":20},{"key":"F","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5 M 9,-11 L 18,-11","advance":20},{"key":"G","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 4.0054842,-2.4454712 6,-5 Q 7.7042607,-7.1827769 9,-10 Q 9.3445349,-10.749095 10,-13 Q 10.879306,-16.019586 11,-17 Q 11.284702,-19.312668 11,-20 Q 10.707107,-20.707107 10,-21 Q 9.5,-21.207107 9,-21 Q 8.6019102,-20.835106 8,-20 Q 7.2150407,-18.910927 7,-18 Q 6.645898,-16.5 7,-15 Q 7.309017,-13.690983 8,-13 Q 8.690983,-12.309017 10,-12 Q 11.629516,-11.615323 14,-12 Q 15.874032,-12.304114 17,-13 Q 17.503548,-13.31121 18,-14 Q 18.662278,-14.918861 19,-16 L 19,-10 Q 19,-7.9145363 18,-5 Q 17.598867,-3.8308838 17,-3 Q 16.007096,-1.6224198 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":23},{"key":"H","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 7,-9 L 16,-12 Q 16.650413,-12.216804 18,-13 Q 19.918361,-14.113268 21,-15 Q 22.365084,-16.119101 23,-17 Q 23.784959,-18.089073 24,-19 Q 24.15037,-19.636976 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.5,-21.207107 22,-21 Q 21.20382,-20.670212 20,-19 Q 19.193186,-17.880605 18,-15 Q 16.866964,-12.26461 16,-9 Q 15.194907,-5.9683709 15,-4 Q 14.760254,-1.5787985 15,-1 Q 15.292893,-0.29289322 16,0 Q 16.363024,0.15036957 17,0 Q 17.910927,-0.21504074 19,-1 Q 19.440449,-1.3174579 20,-2 Q 21.148529,-3.4009805 22,-5","advance":24},{"key":"I","d":"M 14,-5 Q 12.90098,-5.9009805 12,-7 Q 11.113268,-8.081639 10,-10 Q 9.4005886,-11.032893 9,-12 Q 8.1562904,-14.036895 8,-15 Q 7.7114926,-16.777863 8,-18 Q 8.2150407,-18.910927 9,-20 Q 9.6019102,-20.835106 10,-21 Q 11,-21.414214 12,-21 Q 12.39809,-20.835106 13,-20 Q 13.784959,-18.910927 14,-18 Q 14.209277,-17.11349 14,-15 Q 13.757083,-12.546781 13,-10 Q 12.519554,-8.3838089 11,-5 Q 10.270239,-3.3749372 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":17},{"key":"J","d":"M 10,3 Q 8.8438171,1.604122 8,0 Q 6.7160888,-2.4407544 6,-5 Q 5.2851244,-7.5549099 5,-11 Q 4.6711435,-14.973495 5,-17 Q 5.3687146,-19.272122 6,-20 Q 6.575679,-20.663763 8,-21 Q 9.2739515,-21.300739 10,-21 Q 10.513394,-20.787345 11,-20 Q 11.695886,-18.874032 12,-17 Q 12.184487,-15.863139 12,-14 Q 11.805093,-12.031629 11,-9 Q 9.5,-4.5 8,0 Q 7,3 6,6 Q 5.5,7.5 5,9 Q 4.2928932,10.707107 4,11 Q 2.8603796,12.13962 2,12 Q 1.372001,11.89809 1,11 Q 0.7668044,10.437016 1,9 Q 1.2320166,7.570249 2,6 Q 2.6793988,4.6108745 4,3 Q 4.9009805,1.9009805 6,1 Q 7.081639,0.1132681 9,-1 Q 10.937742,-2.1245155 13,-3","advance":15},{"key":"K","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 24,-18 Q 24.414214,-19 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.636976,-21.15037 22,-21 Q 21.089073,-20.784959 20,-20 Q 18.7167,-19.075049 18,-18 L 16,-15 Q 15.2833,-13.924951 14,-13 Q 12.910927,-12.215041 12,-12 Q 11,-11.763932 10,-12 M 12,-12 Q 13,-10.801787 13,-10 L 13,-3 Q 13,-2.3874259 14,-1 Q 14.60191,-0.16489419 15,0 Q 15.363024,0.15036957 16,0 Q 16.910927,-0.21504074 18,-1 Q 18.440449,-1.3174579 19,-2 Q 20.148529,-3.4009805 21,-5","advance":24},{"key":"L","d":"M 4,-9 Q 5,-8.8768944 6,-9 Q 8.410165,-9.2967049 10,-10 Q 11.217197,-10.538451 13,-12 Q 14.365084,-13.119101 15,-14 Q 15.784959,-15.089073 16,-16 Q 16.354102,-17.5 16,-19 Q 15.618034,-20.618034 15,-21 Q 14.197453,-21.496001 13,-21 Q 12.60191,-20.835106 12,-20 Q 11.401133,-19.169116 11,-18 Q 11,-18 10,-13 Q 9.5,-10.5 9,-8 Q 8.5665179,-6.3676952 8,-5 Q 7.4034072,-3.5596976 7,-3 Q 6.1622777,-1.8377223 5,-1 Q 3.9109272,-0.21504074 3,0 Q 1.7260485,0.30073915 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12,0.16227766 13,0 Q 14.874032,-0.30411354 16,-1 Q 17.236068,-1.763932 18,-3","advance":19},{"key":"M","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 15.5,-21.118034 16,-21 Q 17.309017,-20.690983 18,-20 Q 18.690983,-19.309017 19,-18 Q 19.139518,-17.408993 19,-16 Q 18.902173,-15.012043 18,-11 Q 17.472066,-8.6522317 17,-7 L 15,0 M 17,-7 L 20,-15 Q 20.957715,-17.553907 22,-19 Q 22.418861,-19.581139 23,-20 Q 24.089073,-20.784959 25,-21 Q 25.5,-21.118034 26,-21 Q 27.309017,-20.690983 28,-20 Q 28.690983,-19.309017 29,-18 Q 29.139518,-17.408993 29,-16 Q 28.772694,-13.704427 28,-11 L 26,-4 Q 25.492747,-2.224616 26,-1 Q 26.292893,-0.29289322 27,0 Q 27.363024,0.15036957 28,0 Q 28.910927,-0.21504074 30,-1 Q 30.440449,-1.3174579 31,-2 Q 32.148529,-3.4009805 33,-5","advance":33},{"key":"N","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 16,-21.236068 17,-21 Q 18.309017,-20.690983 19,-20 Q 19.690983,-19.309017 20,-18 Q 20.139518,-17.408993 20,-16 Q 19.772694,-13.704427 19,-11 L 17,-4 Q 16.492747,-2.224616 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"O","d":"M 12,-21 Q 10.381966,-20.854102 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 12.730525,-1.4514891 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.717553,-7.2364722 17,-8 Q 17.760742,-10.056481 18,-12 Q 18.280006,-14.274522 18,-16 Q 17.695886,-17.874032 17,-19 Q 16.68879,-19.503548 16,-20 Q 14.910927,-20.784959 14,-21 Q 12.726049,-21.300739 12,-21 Q 10.585786,-20.414214 10,-19 Q 9.6502066,-18.155524 10,-16 Q 10.232017,-14.570249 11,-13 Q 11.679399,-11.610875 13,-10 Q 13.90098,-8.9009805 15,-8 Q 16.081639,-7.1132681 18,-6 Q 18.968871,-5.4377423 20,-5","advance":21},{"key":"P","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.963105,-21.480846 20,-21 Q 20.910927,-20.784959 22,-20 Q 22.581139,-19.581139 23,-19 Q 23.784959,-17.910927 24,-17 Q 24.354102,-15.5 24,-14 Q 23.784959,-13.089073 23,-12 Q 22.581139,-11.418861 22,-11 Q 20.910927,-10.215041 20,-10 Q 18.5,-9.645898 17,-10 Q 16.089073,-10.215041 15,-11 Q 14.418861,-11.418861 14,-12","advance":25},{"key":"Q","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.767983,-12.570249 17,-11 Q 16.320601,-9.6108745 15,-8 Q 13.198039,-5.801961 11,-4 Q 9.918361,-3.1132681 8,-2 Q 6.9671065,-1.4005886 6,-1 Q 3.9631048,-0.1562904 3,0 Q 1.562984,0.2331956 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12.5,0.24341649 14,0 Q 15.874032,-0.30411354 17,-1 Q 18.236068,-1.763932 19,-3","advance":22},{"key":"R","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.370484,-21.384677 19,-21 Q 19.910927,-20.784959 21,-20 Q 21.581139,-19.581139 22,-19 Q 22.784959,-17.910927 23,-17 Q 23.354102,-15.5 23,-14 Q 22.784959,-13.089073 22,-12 Q 21.581139,-11.418861 21,-11 Q 19.910927,-10.215041 19,-10 Q 17.777863,-9.7114926 16,-10 Q 14.418861,-10.256584 13,-11 Q 13.581139,-10.581139 14,-10 Q 15,-8.6125741 15,-8 L 15,-3 Q 15,-2 16,-1 Q 17,-0.0000000000000001110223 18,0 Q 18.612574,0.000000000000000034004694 20,-1 Q 20.440449,-1.3174579 21,-2 Q 22.148529,-3.4009805 23,-5","advance":25},{"key":"S","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 2.7079677,-1.5102743 4,-3 Q 4.9224409,-4.0635833 7,-7 Q 8.440881,-9.0365375 9,-10 Q 10.198823,-12.065787 11,-14 Q 11.84371,-16.036895 12,-17 Q 12.349793,-19.155524 12,-20 Q 11.707107,-20.707107 11,-21 Q 10.5,-21.207107 10,-21 Q 9.6019102,-20.835106 9,-20 Q 8.2150407,-18.910927 8,-18 Q 7.763932,-17 8,-16 Q 8.2150407,-15.089073 9,-14 Q 9.9249506,-12.7167 11,-12 L 14,-10 Q 15.075049,-9.2833004 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.236068,-5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":20},{"key":"T","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":19},{"key":"U","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.309017,-1.690983 7,-1 Q 7.690983,-0.30901699 9,0 Q 10,0.23606798 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.581139,-1.4188612 14,-2 Q 14.647421,-2.898248 16,-6 Q 18.071616,-10.750654 19,-14 L 21,-21 M 19,-14 Q 18.420128,-12.019968 18,-10 Q 17.163856,-5.9798285 17,-4 Q 16.79306,-1.4995966 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"V","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.7572653,-3.0282406 6,-2 Q 6.381966,-0.38196601 7,0 Q 7.5527864,0.34164079 9,0 Q 9.9109272,-0.21504074 11,-1 Q 12.321348,-1.9523738 14,-4 Q 14.886732,-5.081639 16,-7 Q 17.198823,-9.065787 18,-11 Q 18.425612,-12.027518 19,-14 Q 19.879306,-17.019586 20,-18 Q 20.189802,-19.541778 20,-20 Q 19.707107,-20.707107 19,-21 Q 18.5,-21.207107 18,-21 Q 17.60191,-20.835106 17,-20 Q 16.215041,-18.910927 16,-18 Q 15.807662,-17.185242 16,-16 Q 16.304114,-14.125968 17,-13 Q 17.62242,-11.992904 19,-11 Q 19.918861,-10.337722 21,-10","advance":23},{"key":"W","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.155957,-17.339355 9,-15 L 8,0 M 18,-21 L 8,0 M 18,-21 L 16,0 M 30,-21 Q 28.918861,-20.662278 28,-20 Q 26.938048,-19.234589 25,-17 Q 23.163318,-14.882287 22,-13 Q 20.601984,-10.737962 19,-7 L 16,0","advance":28},{"key":"X","d":"M 8,-15 Q 7,-14.585786 6,-15 Q 5.2928932,-15.292893 5,-16 Q 4.6992609,-16.726049 5,-18 Q 5.309017,-19.309017 6,-20 Q 6.690983,-20.690983 8,-21 Q 9,-21.236068 10,-21 Q 11.309017,-20.690983 12,-20 Q 12.690983,-19.309017 13,-18 Q 13.343404,-16.545318 13,-15 L 11,-6 Q 10.656596,-4.4546824 11,-3 Q 11.309017,-1.690983 12,-1 Q 12.690983,-0.30901699 14,0 Q 15,0.23606798 16,0 Q 17.309017,-0.30901699 18,-1 Q 18.690983,-1.690983 19,-3 Q 19.300739,-4.2739515 19,-5 Q 18.707107,-5.7071068 18,-6 Q 17,-6.4142136 16,-6 M 23,-18 Q 23.414214,-19 23,-20 Q 22.707107,-20.707107 22,-21 Q 21.273951,-21.300739 20,-21 Q 19.089073,-20.784959 18,-20 Q 17.119101,-19.365084 16,-18 Q 14.543967,-16.223925 14,-15 L 10,-6 Q 9.4560335,-4.7760753 8,-3 Q 6.8808987,-1.6349159 6,-1 Q 4.9109272,-0.21504074 4,0 Q 2.7260485,0.30073915 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3","advance":24},{"key":"Y","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.2150407,-2.0890728 7,-1 Q 7.6019102,-0.16489419 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.880899,-1.6349159 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.783196,-7.3495867 17,-8 L 19,-14 M 21,-21 L 19,-14 Q 17.464952,-8.6273337 16,-4 Q 14.740258,-0.020863203 14,2 Q 12.914109,4.9644227 12,7 Q 10.369801,10.630199 10,11 Q 8.8603796,12.13962 8,12 Q 7.372001,11.89809 7,11 Q 6.7668044,10.437016 7,9 Q 7.2320166,7.570249 8,6 Q 8.6793988,4.6108745 10,3 Q 11.351471,1.3514707 13,0 Q 13.909902,-0.74594117 16,-2 L 21,-5","advance":23},{"key":"Z","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.84371,-13.036895 17,-11 Q 15.806814,-8.1193952 15,-7 Q 14.234589,-5.9380484 12,-4 Q 9.8822874,-2.1633176 8,-1 Q 6.618034,-0.14589803 6,0 Q 4.0890728,0.45110872 3,0 Q 2.2928932,-0.29289322 2,-1 Q 1.5857864,-2 2,-3 Q 2.2928932,-3.7071068 3,-4 Q 4.0890728,-4.4511087 6,-4 Q 6.9109272,-3.7849593 8,-3 Q 8.5811388,-2.5811388 9,-2 Q 9.7849593,-0.91092721 10,0 Q 10.288507,1.2221371 10,3 Q 9.8437096,3.9631048 9,6 Q 8.5994114,6.9671065 8,8 Q 6.5311289,10.531129 6,11 Q 4.7325556,12.118877 4,12 Q 3.372001,11.89809 3,11 Q 2.7668044,10.437016 3,9 Q 3.2320166,7.570249 4,6 Q 4.6793988,4.6108745 6,3 Q 7.3514707,1.3514707 9,0 Q 10.563458,-1.281729 12,-2 L 18,-5","advance":21},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 20,7","advance":20},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"b","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.3775802,-1.9929036 7,-3 Q 7.6958865,-4.125968 8,-6 Q 8.2434165,-7.5 8,-9 Q 7.9460321,-6.861508 9,-5 Q 9.4332814,-4.2347425 10,-4 Q 10.726049,-3.6992609 12,-4 Q 13.118034,-4.263932 14,-5","advance":14},{"key":"c","d":"M 7,-7 Q 7.2071068,-7.5 7,-8 Q 6.7071068,-8.7071068 6,-9 Q 5.2739515,-9.3007391 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4.6856967,0.39793901 6,0 Q 7.4342585,-0.43425855 9,-2 Q 10.3,-3.3 11,-5","advance":11},{"key":"d","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 14,-21 M 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"e","d":"M 1,-2 Q 2.0811388,-2.3377223 3,-3 Q 3.5811388,-3.4188612 4,-4 Q 4.7849593,-5.0890728 5,-6 Q 5.3007391,-7.2739515 5,-8 Q 4.7071068,-8.7071068 4,-9 Q 3.6369757,-9.1503696 3,-9 Q 1.690983,-8.690983 1,-8 Q 0.30901699,-7.309017 0,-6 Q -0.35410197,-4.5 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.4404493,-1.3174579 8,-2 Q 9.1485293,-3.4009805 10,-5","advance":10},{"key":"f","d":"M 0,-5 L 4,-10 Q 4.9433189,-11.179149 6,-13 Q 6.5994114,-14.032893 7,-15 Q 7.8437096,-17.036895 8,-18 Q 8.2331956,-19.437016 8,-20 Q 7.627999,-20.89809 7,-21 Q 6.1396204,-21.13962 5,-20 Q 4.3333333,-19.333333 4,-18 L 2,-10 Q 0.8,-5.2 -1,-1 L -4,6 Q -4.8258876,7.9270711 -5,9 Q -5.2331956,10.437016 -5,11 Q -4.627999,11.89809 -4,12 Q -3.0070463,12.161134 -2,11 Q -1.2353756,10.118381 -1,8 L 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"g","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 M 10,-9 L 8,-2 Q 6.5529061,3.0648285 4,9 Q 3.2452082,10.754792 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"h","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.3693981,-7.1081942 9,-6 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"i","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.3630243,0.15036957 2,0 Q 2.9109272,-0.21504074 4,-1 Q 4.4404493,-1.3174579 5,-2 Q 6.1485293,-3.4009805 7,-5","advance":7},{"key":"j","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L -4,9 Q -4.5,10.5 -5,11 Q -6.1396204,12.13962 -7,12 Q -7.627999,11.89809 -8,11 Q -8.2331956,10.437016 -8,9 Q -7.6958865,7.125968 -7,6 Q -6.3227663,4.9042129 -4,3 Q -2.4365419,1.718271 -1,1 L 1,0 Q 2.4365419,-0.71827095 4,-2 Q 5.6485293,-3.3514707 7,-5","advance":7},{"key":"k","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.4960013,-6.802547 9,-6 Q 8.618034,-5.381966 7,-5 Q 5.5,-4.645898 4,-5 Q 5.7071068,-4.8786797 6,-4 L 7,-1 Q 7.2265409,-0.32037724 8,0 Q 8.3630243,0.15036957 9,0 Q 9.9109272,-0.21504074 11,-1 Q 11.440449,-1.3174579 12,-2 Q 13.148529,-3.4009805 14,-5","advance":14},{"key":"l","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"m","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.094901,-7.7708892 12,-7 Q 11.879306,-6.019586 11,-3 Q 10.557607,-1.4807976 10,0 M 11,-3 Q 11.437742,-4.0311289 12,-5 Q 13.468871,-7.5311289 14,-8 Q 14.816225,-8.7205485 16,-9 Q 17.273951,-9.3007391 18,-9 Q 18.707107,-8.7071068 19,-8 Q 19.369398,-7.1081942 19,-6 L 18,-3 Q 17.630602,-1.8918058 18,-1 Q 18.292893,-0.29289322 19,0 Q 19.363024,0.15036957 20,0 Q 20.910927,-0.21504074 22,-1 Q 22.440449,-1.3174579 23,-2 Q 24.148529,-3.4009805 25,-5","advance":25},{"key":"n","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.369398,-7.1081942 12,-6 L 11,-3 Q 10.630602,-1.8918058 11,-1 Q 11.292893,-0.29289322 12,0 Q 12.363024,0.15036957 13,0 Q 13.910927,-0.21504074 15,-1 Q 15.440449,-1.3174579 16,-2 Q 17.148529,-3.4009805 18,-5","advance":18},{"key":"o","d":"M 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 Q 8.7849593,-3.0890728 9,-4 Q 9.236068,-5 9,-6 Q 8.690983,-7.309017 8,-8 Q 6.8603796,-9.1396204 6,-9 Q 5.372001,-8.8980898 5,-8 Q 4.6992609,-7.2739515 5,-6 Q 5.309017,-4.690983 6,-4 Q 6.690983,-3.309017 8,-3 Q 9.5,-2.645898 11,-3 Q 11.910927,-3.2150407 13,-4 Q 13.581139,-4.4188612 14,-5","advance":14},{"key":"p","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.4354686,-7.3064058 2,-6 L -4,12 M 2,-6 Q 2.1666667,-7.1666667 3,-8 Q 3.690983,-8.690983 5,-9 Q 6,-9.236068 7,-9 Q 8.309017,-8.690983 9,-8 Q 9.690983,-7.309017 10,-6 Q 10.236068,-5 10,-4 Q 9.7849593,-3.0890728 9,-2 Q 8.5811388,-1.4188612 8,-1 Q 7.0811388,-0.33772234 6,0 M 2,-1 Q 2.881966,-0.26393202 4,0 Q 5.2221371,0.28850743 7,0 Q 7.9631048,-0.1562904 10,-1 Q 11.440302,-1.5965928 12,-2 Q 13.743416,-3.2565835 15,-5","advance":15},{"key":"q","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.118034,-0.26393202 7,-1 M 10,-9 Q 9.5440795,-7.4853068 9,-6 Q 8.1595457,-3.7056066 7,-1 L 4,6 Q 3.1741124,7.9270711 3,9 Q 2.7668044,10.437016 3,11 Q 3.372001,11.89809 4,12 Q 4.9929537,12.161134 6,11 Q 7,9.8469903 7,8 L 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"r","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 1,-8 3,-8 L 6,-8 Q 6.5857864,-8 7,-7 Q 7.3693981,-6.1081942 7,-5 L 6,-2 Q 5.815301,-1.4459029 6,-1 Q 6.2928932,-0.29289322 7,0 Q 7.3630243,0.15036957 8,0 Q 8.9109272,-0.21504074 10,-1 Q 10.440449,-1.3174579 11,-2 Q 12.148529,-3.4009805 13,-5","advance":13},{"key":"s","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.5835741,-8.6246388 3,-8 L 5,-5 Q 5.817256,-3.774116 6,-3 Q 6.3416408,-1.5527864 6,-1 Q 5.309017,0.11803399 4,0 M 0,-1 Q 0.88196601,-0.26393202 2,0 Q 4,0.47213595 6,0 Q 6.9109272,-0.21504074 8,-1 Q 8.4404493,-1.3174579 9,-2 Q 10.148529,-3.4009805 11,-5","advance":11},{"key":"t","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 3.1245155,-9.9377423 4,-12 M 7,-21 L 1,-3 Q 0.63060194,-1.8918058 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.7260485,0.30073915 4,0 Q 4.9109272,-0.21504074 6,-1 Q 6.4404493,-1.3174579 7,-2 Q 8.1485293,-3.4009805 9,-5 M 1,-13 L 8,-13","advance":9},{"key":"u","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"v","d":"M 0,-5 L 2,-9 L 1,-4 Q 0.59537178,-1.9768589 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.281492,0.1165978 3,0 Q 4.874032,-0.30411354 6,-1 Q 7.236068,-1.763932 8,-3 Q 8.6958865,-4.125968 9,-6 Q 9.2434165,-7.5 9,-9 Q 8.9460321,-6.861508 10,-5 Q 10.433281,-4.2347425 11,-4 Q 11.726049,-3.6992609 13,-4 Q 14.118034,-4.263932 15,-5","advance":15},{"key":"w","d":"M 3,-9 Q 1.763932,-8.236068 1,-7 Q 0.30411354,-5.874032 0,-4 Q -0.19233829,-2.8147581 0,-2 Q 0.38196601,-0.38196601 1,0 Q 1.5527864,0.34164079 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.1622777,-1.8377223 7,-3 M 9,-9 L 7,-3 Q 6.6306019,-1.8918058 7,-1 Q 7.2928932,-0.29289322 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.37758,-1.9929036 14,-3 Q 14.695886,-4.125968 15,-6 Q 15.243416,-7.5 15,-9 Q 14.946032,-6.861508 16,-5 Q 16.433281,-4.2347425 17,-4 Q 17.726049,-3.6992609 19,-4 Q 20.118034,-4.263932 21,-5","advance":21},{"key":"x","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7,-8.5857864 7,-8 L 7,-1 Q 7,-0.41421356 8,0 Q 9.2668628,0.52475173 11,0 Q 12.434259,-0.43425855 14,-2 Q 15.3,-3.3 16,-5 M 13,-8 Q 12.707107,-8.7071068 12,-9 Q 11,-9.4142136 10,-9 Q 9.438533,-8.7674328 9,-8 L 5,-1 Q 4.561467,-0.23256725 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1","advance":16},{"key":"y","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 4,9 Q 3.5,10.5 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"z","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7.4142136,-8.4142136 8,-7 Q 8.3007391,-6.2739515 8,-5 Q 7.7849593,-4.0890728 7,-3 Q 6.0070964,-1.6224198 5,-1 Q 3.618034,-0.14589803 2,0 Q 3.1666667,0.16666667 4,1 Q 4.690983,1.690983 5,3 Q 5.2885074,4.2221371 5,6 Q 4.8437096,6.9631048 4,9 Q 3.2928932,10.707107 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 2.0511187,4.2992542 4,3 L 7,1 Q 9.3385564,-0.55903758 11,-2 Q 12.606602,-3.3933983 14,-5","advance":14},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),At={top:kt,bottom:Et,spaceWidth:St,strokeWidth:_t,kerning:bt,mHeight:Ht,letters:$t};class S1{constructor(e,n,s,r,o,a,i){this.top=e,this.bottom=n,this.spaceWidth=s,this.strokeWidth=r,this.kerning=o,this.mHeight=a,this.#t=new Map(i)}getWord(e){const n=[];for(const s of e){const r=this.getChar(s);r&&n.push(r)}return n}#t;getChar(e){return this.#t.get(e)}static fromJSON(e){typeof e=="string"&&(e=JSON.parse(e));const n=e.top,s=e.bottom,r=e.spaceWidth,o=e.strokeWidth,a=e.kerning,i=e.mHeight;V.assertFinite(n,s,r,o,a,i);const l=new this(n,s,r,o,a,i,[]);return V.assertClass(e.letters,Array).forEach(M=>{const g=M.key,d=M.advance,y=M.d;if(V.assertFinite(d),typeof g!="string"||typeof y!="string")throw console.error("Expecting {key,advance,d}, found",M),new Error("wtf");const k={shape:z.fromString(y),advance:d};l.#t.set(g,k)}),l}resize(e){const n=e/this.mHeight;if(n==1)return this;const s=new S1(n*this.top,n*this.bottom,n*this.spaceWidth,n*this.strokeWidth,n*this.kerning,e,[]),r=new DOMMatrix;return r.scaleSelf(n),this.#t.forEach((o,a)=>{const i={advance:n*o.advance,shape:o.shape.transform(r)};s.#t.set(a,i)}),s}static cursive(e){return this.fromJSON(At).resize(e)}static futuraL(e){return this.fromJSON(wt).resize(e)}}const $1=0,d1=Math.PI/4,x1=2*d1,Vt=3*d1,Q0=4*d1,It=5*d1,A1=6*d1,h0=7*d1;class q1{constructor(e,n,s){this.advance=n,this.fontMetrics=s,e instanceof z?this.#t=()=>e:this.#t=e}reshape(e){return new q1(e,this.advance,this.fontMetrics)}#t;get shape(){return this.#t()}get cssPath(){return this.shape.cssPath}get d(){return this.shape.rawPath}makeElement(){return this.shape.makeElement()}makeElements(){return this.shape.splitOnMove().map(e=>({innerShape:e,element:e.makeElement()}))}}function Rt(c){const e=Ct(c),{top:n,bottom:s,spaceWidth:r,strokeWidth:o,defaultKerning:a,mHeight:i}=(e.get("0")??V.pickAny(e)).fontMetrics;return new S1(n,s,r,o,a,i,e)}function Ct(c){const e=new Map;typeof c=="number"&&(c=new x0(c));const n=(Q,f,u)=>{const p=new q1(f,u,c);if(e.has(Q))throw new Error(`duplicate letter: "${Q}", previous letter: "${[...e].at(-1)[0]}"`);e.set(Q,p)},{aWidth:s,digitWidth:r,capitalTop:o,capitalTopMiddle:a,capitalMiddle:i,capitalBottomMiddle:l,baseline:h,descender:M,strokeWidth:g}=c,d=0,y=g/3;{const Q=c.mHeight,f=.5803571598560251*Q,u=[];u.push(q.controlPoints(.5803571598560251*Q,-.011904772996231272*Q,.1993461912459357*Q,-.4845653833822309*Q,.15178572549774305*Q,-.5833333559985097*Q)),u.push(q.controlPoints(.15178572549774305*Q,-.5833333559985097*Q,.07142858010885174*Q,-.7502096094253163*Q,.07142858010885174*Q,-.8809523915616125*Q)),u.push(q.controlPoints(.07142858010885174*Q,-.8809523915616125*Q,.07142858010885174*Q,-1*Q,.18154763484090689*Q,-1*Q)),u.push(q.controlPoints(.18154763484090689*Q,-1*Q,.3125000278492327*Q,-1*Q,.3125000278492327*Q,-.8809523857747589*Q)),u.push(q.controlPoints(.3125000278492327*Q,-.8809523857747589*Q,.3125000278492327*Q,-.795672021064033*Q,.14880952935525849*Q,-.5863095347804337*Q)),u.push(q.controlPoints(.14880952935525849*Q,-.5863095347804337*Q,0*Q,-.39598002063544424*Q,0*Q,-.23511904966855834*Q)),u.push(q.controlPoints(0*Q,-.23511904966855834*Q,0*Q,0*Q,.16369048113341364*Q,0*Q)),u.push(q.controlPoints(.16369048113341364*Q,0*Q,.31699631330709954*Q,0*Q,.45535713019840074*Q,-.4583333263408854*Q)),n("&",new z(u),f)}{const Q=r,f=Q/2*Math.sqrt(3),u=(h+o)/2,p=u-Q/2,m=p+Q,v=0,L=f;n("<",new z([q.line4(L,p,v,u),q.line4(v,u,L,m)]),f),n(">",new z([q.line4(v,p,L,u),q.line4(L,u,v,m)]),f)}{const Q=r*.9,f=Q/2,u=Q/2,p=u*Math.SQRT1_2,m=_.M(d,o+u);m.arc(f,o+u,f+p,o+u+p,"cw"),m.Q_angles(f,l,x1),m.M(f,h-y),m.L(f,h),n("?",m.pathShape,Q)}{const Q=r*7/8,f=Q/2,u=Q,p=Q/2,m=c.mHeight/8,v=o-m,L=h+m;if(L-v<p*4)throw new Error("wtf");const E=(v+L)/2,$=_.M(u,v).arc(u,v+p,f,v+p,"ccw").L(f,E-p).arc(d,E-p,d,E,"cw").arc(d,E+p,f,E+p,"cw").L(f,L-p).arc(u,L-p,u,L,"ccw").pathShape;n("{",$,Q);const S=_.M(d,v).arc(d,v+p,f,v+p,"cw").L(f,E-p).arc(u,E-p,u,E,"ccw").arc(u,E+p,f,E+p,"ccw").L(f,L-p).arc(d,L-p,d,L,"cw").pathShape;n("}",S,Q)}{const Q=r,u=Q/2,p=Q;{const m=(M-h)*2,v=M,L=v-m,E=o-m/4,$=E+m;if(m<=0||v<=L||L<=$||$<=E)throw new Error("wtf");const S=r*.5;{const I=_.M(S,E).Q_HV(0,$).V(L).Q_VH(S,v).pathShape;n("(",I,S)}{const I=r*.5,R=_.M(0,E).Q_HV(I,$).V(L).Q_VH(0,v).pathShape;n(")",R,I)}{const I=_.M(S,E).H(0).V(v).H(S).pathShape;n("[",I,S)}{const I=_.M(0,E).H(S).V(v).H(0).pathShape;n("]",I,S)}}{const m=r*.4,v=r*.3,L=d,E=L+m,$=E+v,S=$+v,I=S+m,R=I,P=r*.25,T=i,F=T-P,O=T+P,Z=_.M(L,T).Q_angles(E,F,$1,h0).Q_angles($,T,(x1+d1)/2).Q_angles(S,O,$1).Q_angles(I,T,h0).pathShape;n("~",Z,R)}{const m=r*.75,v=m/2,L=_.M(v,i-v).V(i+v).M(d,i).H(m).pathShape;n("+",L,m)}{const m=r*.75,v=_.M(d,i).H(m).pathShape;n("-",v,m)}{const m=r*.75,v=2*g,L=m+v,E=i-L/2,$=E+L,S=E,I=E+m,R=(S+I)/2,P=0,T=m,F=m/2,O=new z([new U(P,R,T,R),new U(F,S,F,I),new U(P,$,T,$)]);n("±",O,m)}{const m=r*.75,v=0,L=m/2,E=m,$=2*g,S=i,I=new z([new U(v,S,E,S),new U(L,S-$-y,L,S-$),new U(L,S+$,L,S+$+y)]);_.M(v,i).H(m).pathShape,n("÷",I,m)}{const m=r*.75*Math.SQRT1_2,v=i-m/2,L=i+m/2,E=0,$=m,S=new z([new U(E,v,$,L),new U($,v,E,L)]);n("×",S,m)}{const m=r/2*.9,v=5,L=-Math.PI/2,E=(o+h)/2,$=0,S=V.initializedArray(v,O=>{const Z=O*(Math.PI*2)/v+L,a1=V.polarToRectangular($,Z),i1=V.polarToRectangular(m,Z);return[a1,i1]}),I=S.flat(),R=Math.min(...I.map(({x:O})=>O));I.forEach(O=>{O.x-=R,O.y+=E});const P=S.map(([O,Z])=>new U(O.x,O.y,Z.x,Z.y)),T=new z(P),F=Math.max(...I.map(({x:O})=>O));n("*",T,F)}{const m=r*.75,v=_.M(d,i-g*1.25).H(m).M(d,i+g*1.25).H(m).pathShape;n("=",v,m)}{const m=r*1.25,v=h+g,L=_.M(0,v).H(m).pathShape;n("_",L,m)}{const m=r/2,v=3*m,L=m/3,E=o,$=E+m,S=$+m,I=S+m,R=_.M(m+L,E).L(m-L,I).M(2*m+L,E).L(2*m-L,I).M(0,$).H(v).M(0,S).H(v).pathShape;n("#",R,v)}{const m=r/2,v=3*m,L=0,E=m,$=v/2,S=2*m,I=v,R=o+(c.mHeight-v)/2,P=R+E,T=R+$,F=R+S,O=R+I,Z=_.M(S,T).Q_VH($,P).Q_HV(E,T).Q_VH($,F).Q_HV(S,T).Q_VH((S+I)/2,F).Q_HV(I,T).V((P+T)/2).Q_VH($,R).Q_HV(L,T).Q_VH($,O).H((S+I)/2).pathShape;n("@",Z,v)}{const m=_.M(u,o).Q(p,o,p,a).L(p,l).Q(p,h,u,h).Q(d,h,d,l).L(d,a).Q(d,o,u,o).M(p,a).L(d,l).pathShape;n("0",m,Q)}{const m=_.M(d,a).Q(u,a,u,o).L(u,h).M(d,h).L(p,h).pathShape;n("1",m,Q)}{const m=_.M(d,a).Q_VH(u,o).Q_HV(p,a).Q_VH(u,i).Q_HV(d,h).L(p,h).pathShape;n("2",m,Q)}{const m=_.M(d,a).Q_VH(u,o).Q_HV(p,a).Q_VH(u,i).Q_HV(p,l).Q_VH(u,h).Q_HV(d,l).pathShape;n("3",m,Q)}{const m=(u+p)/2,v=(u+d)/2,L=_.M(p,i).L(d,i).L(v,o).M(m,o).L(m,h).pathShape;n("4",L,Q)}{const m=d+r/5,v=p-r/5,L=(i+l)/2,E=_.M(v,o).L(m,o).L(d,i).Q_VH(u,a).Q_HV(p,L).Q_VH(u,h).Q_HV(d,l).pathShape;n("5",E,Q)}{const m=_.M(p,o).Q_HV(d,l).Q_VH(u,h).Q_HV(p,l).Q_VH(u,i).Q_HV(d,l).pathShape;n("6",m,Q)}{const m=_.M(d,o).L(p,o).L(d,h).pathShape;n("7",m,Q)}{const m=_.M(u,o).Q(p,o,p,a).Q(p,i,u,i).Q(d,i,d,l).Q(d,h,u,h).Q(p,h,p,l).Q(p,i,u,i).Q(d,i,d,a).Q(d,o,u,o).pathShape;n("8",m,Q)}{const m=_.M(p,a).Q(p,o,u,o).Q(d,o,d,a).Q(d,i,u,i).Q(p,i,p,a).Q(p,h,d,h).pathShape;n("9",m,Q)}}{const Q=_.M(d,h).L(s/2,o).L(c.aWidth,h).M(c.aWidth/4,i).L(c.aWidth*.75,i).pathShape;n("A",Q,s)}{const Q=r,f=a-o;if(f<=0)throw new Error("wtf");const u=(Q-f)*(2/3),p=h-l;if(p<=0)throw new Error("wtf");const m=Q-p,v=_.M(d,h).L(d,o).L(u,o).Q_HV(u+f,o+f).Q(u+f,i,u,i).L(d,i).M(Math.max(m,u),i).Q_HV(m+p,h-p).Q_VH(m,h).L(d,h).pathShape;n("B",v,Q)}{const Q=r,u=Q/2,p=Q,m=_.M(p,a).Q(p,o,u,o).Q(d,o,d,a).L(d,l).Q(d,h,u,h).Q(p,h,p,l).pathShape;n("C",m,Q)}{const Q=r,u=Q/2,p=Q,m=_.M(d,o).L(d,h).L(u,h).Q(p,h,p,l).L(p,a).Q(p,o,u,o).L(d,o).pathShape;n("D",m,Q)}{const Q=r,f=Q*(2/3),u=Q,p=_.M(u,o).L(d,o).L(d,h).L(u,h).M(f,i).L(d,i).pathShape;n("E",p,Q)}{const Q=r,f=Q*(2/3),u=Q,p=_.M(u,o).L(d,o).L(d,h).M(f,i).L(d,i).pathShape;n("F",p,Q)}{const Q=r,u=Q/2,p=Q,m=_.M(p,a).Q(p,o,u,o).Q(d,o,d,a).L(d,l).Q(d,h,u,h).Q(p,h,p,l).L(p,i).L(u,i).pathShape;n("G",m,Q)}{const Q=r,f=Q,u=_.M(d,o).L(d,h).M(f,o).L(f,h).M(d,i).L(f,i).pathShape;n("H",u,Q)}{const Q=c.mHeight/3,f=Q/2,u=Q,p=_.M(d,o).L(u,o).M(d,h).L(u,h).M(f,o).L(f,h).pathShape;n("I",p,Q)}{const Q=r*.85,u=Q/2,p=Q,m=_.M(p,o).L(p,l).Q(p,h,u,h).Q(d,h,d,l).pathShape;n("J",m,Q)}{const Q=r+g,f=(o+h)/2,u=_.M(d,o).L(d,h).M(Q,o).L(d+g,f).L(Q,h).pathShape;n("K",u,Q)}{const Q=r,f=_.M(d,o).L(d,h).L(Q,h).pathShape;n("L",f,Q)}{const Q=r*1.5,f=Q/2,u=_.M(d,h).L(d,o).L(f,i).L(Q,o).L(Q,h).pathShape;n("M",u,Q)}{const Q=r*1.2,f=_.M(d,h).L(d,o).L(Q,h).L(Q,o).pathShape;n("N",f,Q)}{const Q=r*1.5,f=Q/2,u=(o+h)/2,p=_.M(f,o).Q_HV(Q,u).Q_VH(f,h).Q_HV(d,u).Q_VH(f,o).pathShape;n("O",p,Q)}{const Q=r,f=i-a;if(f<=0)throw new Error("wtf");const u=Q-f,p=_.M(d,o).L(d,h).M(d,o).L(u,o).Q_HV(Q,a).Q_VH(u,i).L(d,i).pathShape;n("P",p,Q)}{const Q=r*1.5,f=Q/2,u=(o+h)/2,p=_.M(f,o).Q_HV(Q,u).Q_VH(f,h).Q_HV(d,u).Q_VH(f,o).M(Q-f*.75,h-f*.75).L(Q+f/6,h+f/6).pathShape;n("Q",p,Q)}{const Q=r,f=i-a;if(f<=0)throw new Error("wtf");const u=Q-f,p=_.M(d,o).L(d,h).M(d,o).L(u,o).Q_HV(Q,a).Q_VH(u,i).L(d,i).M(u,i).L(Q,h).pathShape;n("R",p,Q)}{const Q=r,f=r/2,u=r,p=_.M(u,a).Q_VH(f,o).Q_HV(d,a).Q_VH(f,i).Q_HV(u,l).Q_VH(f,h).Q_HV(d,l).pathShape;n("S",p,Q)}{const f=r+g,u=f/2,p=f,m=c.mHeight/8,v=_.M(p,a).Q_VH(u,o).Q_HV(d,a).Q_VH(u,i).Q_HV(p,l).Q_VH(u,h).Q_HV(d,l).M(u,o-m).V(h+m).pathShape;n("$",v,f)}{const Q=r,f=Q/2,u=_.M(f,o).L(f,h).M(Q,o).L(d,o).pathShape;n("T",u,Q)}{const Q=(l+i)/2,f=Math.abs(Q-h)*.85,u=f*2,p=_.M(d,o).V(Q).Q_VH(f,h).Q_HV(u,Q).V(o).pathShape;n("U",p,u)}{const Q=s,f=Q/2,u=_.M(d,o).L(f,h).L(Q,o).pathShape;n("V",u,Q)}{const Q=s*1.5,f=Q/3,u=Q/2,p=f*2,m=_.M(d,o).L(f,h).L(u,i).L(p,h).L(Q,o).pathShape;n("W",m,Q)}{const Q=r,f=_.M(Q,o).L(d,h).M(d,o).L(Q,h).pathShape;n("X",f,Q)}{const Q=g,f=r+Q,u=_.M(f,o).L(Q,h).M(d,o).L(f/2,i).pathShape;n("Y",u,f)}{const Q=r,f=_.M(d,o).H(Q).L(d,h).H(Q).pathShape;n("Z",f,Q)}{const Q=r/4,f=r*1.2,u=_.M(Q*2,o+Q).Q_VH(Q,o).Q_HV(0,o+Q).Q_VH(Q,o+Q*2).Q_HV(Q*2,o+Q),m=u.pathShape.translate(f-Q*2,c.mHeight-Q*2);u.addCommands(m.commands),u.M(f,o).L(d,h);const v=u.pathShape;n("%",v,f)}{const Q=r,f=_.M(Q,o).L(d,h).pathShape;n("/",f,Q)}{const Q=r,f=_.M(d,o).L(Q,h).pathShape;n("\\",f,Q)}{const Q=r,f=Q*.05,u=Q+f,p=Q/2,m=_.M(Q,l).Q_VH(p,i).Q_HV(d,l).Q_VH(p,h).Q_HV(u,i).V(h).pathShape;n("a",m,u)}{const Q=r,f=Q*.05,u=Q+f,p=f,m=f+Q/2,v=u,L=_.M(p,l).Q_VH(m,h).Q_HV(v,l).Q_VH(m,i).Q_HV(d,h).V(o).pathShape;n("b",L,u)}{const Q=r*.875,f=0,u=r/2,p=Q,m=(i+l)/2,v=(l+h)/2,L=_.M(p,m).Q_VH(u,i).Q_HV(f,l).Q_VH(u,h).Q_HV(p,v).pathShape;n("c",L,Q)}{const Q=r,f=Q*.05,u=Q+f,p=Q/2,m=_.M(u,o).L(u,h).Q_VH(p,i).Q_HV(d,l).Q_VH(p,h).Q_HV(Q,l).pathShape;n("d",m,u)}const k=r/8;{const Q=r,f=r/2,u=Q,p=u-k,m=_.M(d,l).H(u).Q_VH(f,i).Q_HV(d,l).Q_VH(f,h).H(p).pathShape;n("e",m,Q)}{const Q=r*.75,f=Q/2,u=Q,p=_.M(u,o).Q_HV(f,a).V(h).M(u,i).H(d).pathShape;n("f",p,Q)}{const Q=r,f=Q*.05,u=Q+f,p=Q/2,m=_.M(Q,l).Q_VH(p,i).Q_HV(d,l).Q_VH(p,h).Q_HV(u,i).V(h).Q_VH(p,M).H(d+k).pathShape;n("g",m,u)}{const Q=r*.85,f=Q/2,u=_.M(d,o).V(h).Q_VH(f,i).Q_HV(Q,l).V(h).pathShape;n("h",u,Q)}{const f=_.M(d,i).V(h).M(d,a).V(a-y).pathShape;n("i",f,0)}{const Q=Math.abs(h-M),f=Q/2,u=_.M(Q,i).V(h).Q_VH(f,M).Q_HV(d,h).M(Q,a).V(a-y).pathShape;n("j",u,Q)}{const f=_.M(d,h).V(h-y).pathShape;n(".",f,0)}{const f=_.M(d,o).V(l).M(d,h).V(h-y).pathShape;n("!",f,0)}{const f=(M-h)/2,u=f/2,p=_.M(d,h-y).V(h).Q_VH(-u,h+f).pathShape;n(",",p,0)}{const u=(M-h)/2+y,p=new z([new U(d,o,d,o+u)]);n("'",p,0)}{const f=(M-h)/2+y,u=f,p=f,m=new z([new U(d,o,p,o+f)]);n("`",m,u)}{const f=(M-h)/2+y,u=f,p=f*2,m=p,v=o,L=o+f,E=_.M(d,L).L(u,v).L(m,L).pathShape;n("^",E,p)}{const Q=g*2,u=(M-h)/2+y,p=new z([new U(d,o,d,o+u),new U(Q,o,Q,o+u)]);n('"',p,Q)}{const f=i,u=_.M(d,h).V(h-y).M(d,f-y).V(f).pathShape;n(":",u,0)}{const f=new z([new U(d,o,d,h)]);n("|",f,0)}{const f=i,u=(M-h)/2,p=u/2,m=_.M(d,h-y).V(h).Q_VH(-p,h+u).M(d,f-y).V(f).pathShape;n(";",m,0)}{const Q=c.xHeight*2/3,f=r/10,u=Q+f,p=_.M(d,o).V(h).M(Q,i).L(d,i+Q).M(Q/2,h-Q).L(u,h).pathShape;n("k",p,u)}{const f=_.M(d,o).V(h).pathShape;n("l",f,0)}{const Q=r*1.5,f=Q/4,u=Q/2,p=Q*3/4,m=Q,v=_.M(d,i).V(h).Q_VH(f,i).Q_HV(u,l).V(h).M(u,l).Q_VH(p,i).Q_HV(m,l).V(h).pathShape;n("m",v,Q)}{const Q=r*.85,f=Q/2,u=_.M(d,i).V(h).Q_VH(f,i).Q_HV(Q,l).V(h).pathShape;n("n",u,Q)}{const Q=r,f=0,u=Q/2,p=Q,m=_.M(u,i).Q_HV(p,l).Q_VH(u,h).Q_HV(f,l).Q_VH(u,i).pathShape;n("o",m,Q)}{const Q=r,f=r*.05,u=Q+f,p=f,m=f+Q/2,v=u,L=_.M(p,l).Q_VH(m,i).Q_HV(v,l).Q_VH(m,h).Q_HV(d,i).V(M).pathShape;n("p",L,u)}{const Q=r,f=Q/2,u=r*.05,p=Q+u,m=Math.abs(h-M),v=p+m/2,L=p+m,E=_.M(Q,l).Q_VH(f,i).Q_HV(d,l).Q_VH(f,h).Q_HV(p,i).V(h).Q_VH(v,M).Q_HV(L,(h+M*2)/3).pathShape;n("q",E,L*.667)}{const Q=r,f=Q/2,u=_.M(d,i).V(h).Q_VH(f,i).Q_HV(Q,l).pathShape;n("r",u,Q)}{const Q=c.xHeight*2/3,f=Q/2,u=h,p=l,m=i,v=(u+p)/2,L=(p+m)/2,E=(L+m)/2,$=(u+v)/2,S=_.M(Q,E).Q_VH(f,m).Q_HV(d,L).Q_VH(f,p).Q_HV(Q,v).Q_VH(f,u).Q_HV(d,$).pathShape;n("s",S,Q)}{const Q=r*.75,f=Q/2,u=Q,p=_.M(f,a).V(l).Q_VH(u,h).M(u,i).H(d).pathShape;n("t",p,Q)}{const Q=r*.85,f=Q/2,u=_.M(d,i).V(l).Q_VH(f,h).Q_HV(Q,i).L(Q,h).pathShape;n("u",u,Q)}{const Q=r,f=Q/2,u=_.M(d,i).L(f,h).L(Q,i).pathShape;n("v",u,Q)}{const Q=c.xHeight*1.5,f=Q/3,u=Q/2,p=f*2,m=_.M(d,i).L(f,h).L(u,l).L(p,h).L(Q,i).pathShape;n("w",m,Q)}{const Q=r,f=_.M(Q,i).L(d,h).M(d,i).L(Q,h).pathShape;n("x",f,Q)}{const Q=r,f=Q/2,u=(i+M)/2,p=_.M(Q,i).L(d,M).M(d,i).L(f,u).pathShape;n("y",p,Q)}{const Q=r,f=_.M(d,i).H(Q).L(d,h).H(Q).pathShape;n("z",f,Q)}{const Q=r/2,f=Q/2,u=_.M(f,o).circle(f,o+f,"cw").pathShape;n("°",u,Q)}{const Q=-o,f=Q/2,u=_.M(f,o).circle(f,o+f,"cw").pathShape;n("◯",u,Q)}{const Q=-o,f=Q/2,u=o/2,p=_.M(0,u).arc(f,u,Q,u,"cw").pathShape;n("◠",p,Q)}{const Q=-o,f=Q/2,u=o/2,p=_.M(0,u).arc(f,u,Q,u,"ccw").pathShape;n("◡",p,Q)}{const Q=-o,f=Q/4,u=o+f,p=_.M(f*2,u).arc(f*3,u,Q,u,"cw").Q_angles(f*2,h,Vt,x1).Q_angles(0,u,A1,It).arc(f,u,f*2,u,"cw").pathShape;n("♡",p,Q)}{const Q=c.mHeight,f=Q/4,u=f;{const p=Q,m=(o+h)/2,v=_.M(u,m-f).L(0,m).L(u,m+f).M(0,m).L(p,m).M(p-u,m-f).L(p,m).L(p-u,m+f);n("↔",v.pathShape,p);const L=new z(v.commands.slice(0,3));n("←",L,p);const E=new z(v.commands.slice(2,5));n("→",E,p)}{const m=f,v=f*2,L=v,E=_.M(0,o+u).L(m,o).L(L,o+u).M(m,o).L(m,h).M(0,h-u).L(m,h).L(L,h-u);n("↕",E.pathShape,v);const $=new z(E.commands.slice(0,3));n("↑",$,v);const S=new z(E.commands.slice(2,5));n("↓",S,v)}}{const Q=c.mHeight,f=0,u=Q/2,p=Q,m=o,v=h,L=(m+v)/2,E=Math.PI/16,$=_.M(u,m).Q_angles(p,L,$1+E,x1-E).Q_angles(u,v,x1+E,Q0-E).Q_angles(f,L,Q0+E,A1-E).Q_angles(u,m,A1+E,$1-E).pathShape;n("✧",$,Q)}{let Q=function(S,I){const R=S.maxY-S.minY,T=(I.bottom-I.top)/R,O=(S.maxX-S.minX)*T,Z=0,a1=O,i1=V.makeBoundedLinear(S.minX,Z,S.maxX,a1),y1=V.makeBoundedLinear(S.minY,I.top,S.maxY,I.bottom);return{x:i1,y:y1,advance:a1}},f=function(){const S={x:1/0,y:1/0},I={x:-1/0,y:-1/0};v.forEach(F=>{["x","y"].forEach(O=>{S[O]=Math.min(S[O],F[O]),I[O]=Math.max(I[O],F[O])})});const R={minX:S.x,maxX:I.x,minY:S.y,maxY:I.y},T=Q(R,{top:o,bottom:h});return v.forEach(F=>{F.x=T.x(F.x),F.y=T.y(F.y)}),T};const m=A1,v=V.initializedArray(5,S=>{const I=m+S*(2*Math.PI)*2/5;return V.polarToRectangular(1,I)}),L=f(),E=v.map((S,I,R)=>{const P=R.at(I+1-R.length);return new U(S.x,S.y,P.x,P.y)});n("☆",new z(E),L.advance);const $=v.map((S,I,R)=>{const P=R.at(I+1-R.length),T=Math.atan2(P.y-S.y,P.x-S.x),F=.175;return q.angles(S.x,S.y,T+F,P.x,P.y,T-F)});n("⭒",new z($),L.advance)}return new Map([...e.entries()].sort(([Q],[f])=>Q<f?-1:Q==f?1:0))}class x0{constructor(e,n=e/10){if(this.fontSize=e,this.strokeWidth=n,e<=0||!isFinite(e))throw new Error("wtf")}get mHeight(){return this.fontSize}get xHeight(){return this.fontSize*.5}get aWidth(){return this.fontSize*.75}get digitWidth(){return this.fontSize*.5}get defaultKerning(){return this.strokeWidth*2.5}get spaceWidth(){return this.strokeWidth+this.digitWidth/2}get top(){return this.capitalTop-this.mHeight/4}get capitalTop(){return this.baseline-this.mHeight}get capitalTopMiddle(){return(this.capitalTop+this.capitalMiddle)/2}get capitalMiddle(){return this.baseline-this.xHeight}get capitalBottomMiddle(){return(this.baseline+this.capitalMiddle)/2}get baseline(){return 0}get descender(){return this.mHeight/4}get bottom(){return this.descender+this.mHeight/4}}class Tt{constructor(e,n,s){this.delayMS=e,this.cumulative=n,this.action=s,this.request=this.request.bind(this)}#t=!1;#e=NaN;#n(){const e=isNaN(this.#e)?this.delayMS:this.delayMS-(performance.now()-this.#e);this.#t=!0,this.#e=NaN,setTimeout(()=>{isFinite(this.#e)?this.#n():(this.#t=!1,this.action())},e)}request(){this.#t?this.cumulative&&(this.#e=performance.now()):this.#n()}}const e1=j.getById("preview",HTMLCanvasElement),h1=V.assertNonNullable(e1.getContext("2d"));let f1={totalLength:0,drawTo(c,e){}};function*w0(c){for(let e=0;e<c;e++){const n=e/(c-1);h1.clearRect(0,0,h1.canvas.width,h1.canvas.height),f1.drawTo(n*f1.totalLength,h1);const s=V.makePromise();e1.toBlob(r=>{r?s.resolve(r):s.reject(new Error("failed"))}),yield s.promise}}async function zt(){document.body.insertAdjacentHTML("beforeend","<h2>Frames</h2>");for await(const c of w0(10)){const e=URL.createObjectURL(c),n=document.createElement("img");n.classList.add("show-images"),n.src=e,document.body.append(n)}}window.showImages=zt;const Pt=j.getById("ffmpeg-notes",HTMLDivElement),Ot=j.getById("ffmpeg-progress",HTMLTableCellElement),Ft=j.getById("ffmpeg-output",HTMLTableCellElement);function N1(c){Pt.append(c,document.createElement("br"))}function k0(c){Ot.textContent=c}function Nt(c){Ft.textContent=c}const Dt=async c=>{c.on("log",({message:e})=>{/^frame=/.test(e)?Nt(e):N1(e)}),c.on("progress",({progress:e})=>k0(`Compressing: ${e*100}%`));try{await c.load({coreURL:I0,wasmURL:R0}),N1("FFmpeg loaded successfully")}catch(e){throw N1("FFmpeg load failed"),console.error("FFmpeg load failed:",e),e}};async function Wt(){const c=new V0;await Dt(c);const e=V.assertNonNullable(V.parseFloatX(U1.value)),n=Math.round(e/1e3*30);for(const[h,M]of V.zip(w0(n),V.count())){const d=`frame${(M+1).toString().padStart(2,"0")}.png`;k0(`Creating ${d} of ${n}`),c.writeFile(d,new Uint8Array(await(await h).arrayBuffer()))}const s=await c.exec(["-framerate","30","-i","frame%02d.png","-c:v","prores_ks","-pix_fmt","yuva444p10le","-y","output.mov"]);if(s!==0)throw new Error(`ffmpeg exec problem: ${s}`);const r=await c.readFile("output.mov"),o=typeof r=="string"?r:V.assertClass(r.buffer,ArrayBuffer),a=new Blob([o],{type:"video/quicktime"}),i=URL.createObjectURL(a),l=document.createElement("a");l.href=i,l.download="output.mov",l.click(),URL.revokeObjectURL(i)}const D1=j.getById("createVideo",HTMLButtonElement);D1.addEventListener("click",Wt);const W1=j.getById("fontSize",HTMLInputElement),X1=j.getById("text",HTMLTextAreaElement),E0=j.getById("strokeColor",HTMLInputElement),V1=j.getById("lineWidth",HTMLInputElement),U1=j.getById("duration",HTMLInputElement),S0=j.getById("recommendedLineWidth",HTMLButtonElement),B1=j.getById("backgroundColor",HTMLInputElement);class j1{static#t=[W1,X1,E0,V1,B1];static#e=["alignment","fontFamily"];static read(){const e=new URLSearchParams(location.hash.substring(1));this.#t.forEach(n=>{const s=e.get(n.id);typeof s=="string"&&(n.value=s)}),this.#e.forEach(n=>{const s=e.get(n);if(typeof s=="string"){const r=j.selectorQueryAll(`input[type="radio"][name="${n}"][value="${s}"]`,HTMLInputElement);r.length!=1?console.warn("Expecting 1 radio button",r,n,s):r[0].checked=!0}})}static#n(){const e=new URLSearchParams;this.#t.forEach(n=>{e.append(n.id,n.value)}),this.#e.forEach(n=>{const s=j.selectorQuery(`input[type="radio"][name="${n}"]:checked`,HTMLInputElement).value;e.append(n,s)}),location.replace("#"+e.toString())}static writeSoon=new Tt(50,!0,()=>this.#n()).request;static init(){this.#t.forEach(e=>{e.addEventListener("input",this.writeSoon),j.selectorQueryAll('input[type="radio"]',HTMLInputElement).forEach(n=>n.addEventListener("input",this.writeSoon))})}}j1.init();let p1=NaN;S0.addEventListener("click",()=>{Number.isFinite(p1)&&(V1.value=p1.toString(),I1(),j1.writeSoon())});const d0=j.getById("error",HTMLDivElement),Ut=j.getById("length",HTMLSpanElement),qt=j.getById("progress",HTMLInputElement);function I1(){try{d0.style.display="none";const c=V.parseFloatX(W1.value),e=V.parseFloatX(V1.value),n=V.parseFloatX(U1.value);if([[c,W1],[e,V1],[n,U1]].forEach(([M,g])=>{g.style.backgroundColor=M===void 0?"pink":""}),c===void 0||e===void 0||n===void 0){D1.disabled=!0;return}D1.disabled=!1;const s=j.selectorQuery('input[type="radio"][name="fontFamily"]:checked',HTMLInputElement).value;let r;switch(s){case"standard":{r=Rt(new x0(c,e)),p1=c/10;break}case"Hershey Cursive":{r=S1.cursive(c),p1=r.strokeWidth;break}case"Hershey Futura L":{r=S1.futuraL(c),p1=r.strokeWidth;break}default:throw new Error("wtf")}S0.innerText=`Recommended: ${p1}px`;const o=new T0(r);o.addText(X1.value);const a=j.selectorQuery('input[type="radio"][name="alignment"]:checked',HTMLInputElement).value,i=c*25,l=o.align(i,a),h=(r.bottom-r.top)/2;e1.width=i+2*h,e1.height=(l.allRowMetrics.at(-1)?.bottom??0)+2*h,e1.style.width=`${e1.width/devicePixelRatio}px`,e1.style.height=`${e1.height/devicePixelRatio}px`,h1.strokeStyle=E0.value,h1.lineWidth=e,f1=l.drawPartial(h,h),Ut.innerText=f1.totalLength.toString(),f1.drawTo(qt.valueAsNumber*f1.totalLength,h1)}catch(c){d0.style.display="",console.error(c)}}j1.read();I1();[X1,...j.selectorQueryAll("input",HTMLInputElement)].forEach(c=>{c.addEventListener("input",I1)});window.updateSample=I1;function _0(c=B1.value,e=10){const n=`color-mix(in srgb-linear, ${c} ${100-e}%, white ${e}%)`,s=`color-mix(in srgb-linear, ${c} ${100-e}%, black ${e}%)`,r=document.createElement("canvas");r.width=2,r.height=2;const o=r.getContext("2d");o.fillStyle=n,o.fillRect(0,0,2,2),o.fillStyle=s,o.fillRect(0,1,1,1),o.fillRect(1,0,1,1);const a=r.toDataURL("image/png");e1.style.background=`url(${a}) repeat`,e1.style.backgroundSize="20px 20px",e1.style.imageRendering="pixelated"}_0();B1.addEventListener("input",()=>_0());
