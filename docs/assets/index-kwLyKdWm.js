(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))r(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&r(o)}).observe(document,{childList:!0,subtree:!0});function n(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(s){if(s.ep)return;s.ep=!0;const a=n(s);fetch(s.href,a)}})();function d0(c){return c&&c.__esModule&&Object.prototype.hasOwnProperty.call(c,"default")?c.default:c}var C1={},j1;function l0(){return j1||(j1=1,(function(c){Object.defineProperty(c,"__esModule",{value:!0}),c.countMap=c.Random=c.phi=c.radiansPerDegree=c.degreesPerRadian=c.FULL_CIRCLE=c.FIGURE_SPACE=c.NON_BREAKING_SPACE=c.MIN_DATE=c.MAX_DATE=c.csvStringToArray=void 0,c.assertClass=e,c.assertNonNullable=n,c.sleep=r,c.testXml=s,c.parseXml=a,c.followPath=o,c.getAttribute=i,c.parseFloatX=d,c.parseIntX=h,c.parseTimeT=g,c.pickAny=l,c.pick=m,c.take=k,c.filterMap=Q,c.makePromise=u,c.dateIsValid=f,c.angleBetween=p,c.positiveModulo=y,c.rotateArray=v,c.rectUnion=_,c.rectAddPoint=$,c.dateToFileName=E,c.lerp=R,c.assertFinite=I,c.shuffleArray=P,c.zip=T,c.count=F,c.initializedArray=O,c.sum=Z,c.makeLinear=o1,c.makeBoundedLinear=i1,c.polarToRectangular=y1,c.permutations=_1,c.gcd=l1,c.lcm=I1;function e(x,w,A="Assertion Failed."){const H=D=>{throw new Error(`${A}  Expected type:  ${w.name}.  Found type:  ${D}.`)};if(x===null)H("null");else if(typeof x!="object")H(typeof x);else if(!(x instanceof w))H(x.constructor.name);else return x;throw new Error("wtf")}function n(x){if(x==null)throw new Error("wtf");return x}function r(x){return new Promise(w=>{setTimeout(w,x)})}function s(x){const A=new DOMParser().parseFromString(x,"application/xml");for(const H of Array.from(A.querySelectorAll("parsererror")))if(H instanceof HTMLElement)return{error:H};return{parsed:A}}function a(x){if(x!==void 0){const{parsed:w}=s(x);return w?.documentElement}}function o(x,...w){for(const A of w){if(x===void 0)return;if(typeof A=="number")x=x.children[A];else{const H=x.getElementsByTagName(A);if(H.length!=1)return;x=H[0]}}return x}function i(x,w,...A){if(w=o(w,...A),w!==void 0&&w.hasAttribute(x))return w.getAttribute(x)??void 0}function d(x){if(x==null)return;const w=+x;if(isFinite(w))return w}function h(x){const w=d(x);if(w!==void 0)return w>Number.MAX_SAFE_INTEGER||w<Number.MIN_SAFE_INTEGER||w!=Math.floor(w)?void 0:w}function g(x){if(typeof x=="string"&&(x=h(x)),x!=null&&!(x<=0))return new Date(x*1e3)}const M=x=>{const w=/(,|\r?\n|\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^,\r\n]*))/gi,A=[[]];let H;for(;H=w.exec(x);)H[1].length&&H[1]!==","&&A.push([]),A[A.length-1].push(H[2]!==void 0?H[2].replace(/""/g,'"'):H[3]);return A};c.csvStringToArray=M;function l(x){const w=x.values().next();if(!w.done)return w.value}function m(x){if(x.length==0)throw new Error("wtf");return x[Math.random()*x.length|0]}function k(x){if(x.length<1)throw new Error("wtf");const w=Math.random()*x.length|0;return x.splice(w,1)[0]}function Q(x,w){const A=[];return x.forEach((H,D)=>{const N=w(H,D);N!==void 0&&A.push(N)}),A}function u(){let x,w;return{promise:new Promise((H,D)=>{x=H,w=D}),resolve:x,reject:w}}c.MAX_DATE=new Date(864e13),c.MIN_DATE=new Date(-864e13);function f(x){return isFinite(x.getTime())}c.NON_BREAKING_SPACE=" ",c.FIGURE_SPACE=" ",c.FULL_CIRCLE=2*Math.PI,c.degreesPerRadian=360/c.FULL_CIRCLE,c.radiansPerDegree=c.FULL_CIRCLE/360,c.phi=(1+Math.sqrt(5))/2;function p(x,w){const A=y(x,c.FULL_CIRCLE);let D=y(w,c.FULL_CIRCLE)-A;const N=c.FULL_CIRCLE/2;if(D>N?D-=c.FULL_CIRCLE:D<-N&&(D+=c.FULL_CIRCLE),Math.abs(D)>N)throw new Error("wtf");return D}function y(x,w){const A=x%w;return A<0?A+Math.abs(w):A}function v(x,w){if((w|0)!=w)throw new Error(`invalid input: ${w}`);return w=y(w,x.length),w==0?x:[...x.slice(w),...x.slice(0,w)]}class L{constructor(){throw new Error("wtf")}static sfc32(w,A,H,D){function N(){w|=0,A|=0,H|=0,D|=0;let s1=(w+A|0)+D|0;return D=D+1|0,w=A^A>>>9,A=H+(H<<3)|0,H=H<<21|H>>>11,H=H+s1|0,(s1>>>0)/4294967296}const J=N;return Object.defineProperty(J,"currentSeed",{get(){return JSON.stringify([w,A,H,D])}}),J}static#t=42;static seedIsValid(w){try{return this.create(w),!0}catch{return!1}}static create(w=this.newSeed()){console.info(w);const A=JSON.parse(w);if(!(A instanceof Array))throw new Error("invalid input");if(A.length!=4)throw new Error("invalid input");const[H,D,N,J]=A;if(!(typeof H=="number"&&typeof D=="number"&&typeof N=="number"&&typeof J=="number"))throw new Error("invalid input");return this.sfc32(H,D,N,J)}static newSeed(){const w=[];return w.push(Date.now()|0),w.push(this.#t++|0),w.push(Math.random()*2**31|0),w.push(performance.now()*1e4|0),JSON.stringify(w)}static fromString(w){try{return this.create(w)}catch{return this.create(this.anyStringToSeed(w))}}static anyStringToSeed(w){function A(N,J){return(N<<J|N>>>32-J)>>>0}const H=[2654435769,608135816,2242054355,320440878];return new TextEncoder().encode(w).forEach(N=>{H[0]^=N,H[0]=A(H[0],3),H[1]^=N,H[1]=A(H[1],5),H[2]^=N,H[2]=A(H[2],7),H[3]^=N,H[3]=A(H[3],11)}),H[0]^=A(H[1],7),H[1]^=A(H[2],11),H[2]^=A(H[3],13),H[3]^=A(H[0],17),JSON.stringify(H)}static test(){const H=[this.create()];for(;H.length<=10;){for(let N=0;N<20;N++){const J=H.map(s1=>s1());for(let s1=1;s1<J.length;s1++)if(J[s1]!==J[0]){debugger;throw new Error("wtf")}}const D=m(H).currentSeed;H.forEach(N=>{if(N.currentSeed!=D){debugger;throw new Error("wtf")}}),H.push(this.create(D))}}}c.Random=L;function _(x,w){const A=Math.min(x.x,w.x),H=Math.min(x.y,w.y),D=Math.max(x.x+x.width,w.x+w.width),N=Math.max(x.y+x.height,w.y+w.height),J=D-A,s1=N-H;return{x:A,y:H,width:J,height:s1}}function $(x,w,A){return _(x,{x:w,y:A,width:0,height:0})}function E(x){return isNaN(x.getTime())?"0000⸱00⸱00 00⦂00⦂00":`${x.getFullYear().toString().padStart(4,"0")}⸱${(x.getMonth()+1).toString().padStart(2,"0")}⸱${x.getDate().toString().padStart(2,"0")} ${x.getHours().toString().padStart(2,"0")}⦂${x.getMinutes().toString().padStart(2,"0")}⦂${x.getSeconds().toString().padStart(2,"0")}`}function R(x,w,A){return x+(w-x)*A}function I(...x){x.forEach(w=>{if(!Number.isFinite(w))throw new Error("wtf")})}function P(x){for(let w=x.length-1;w>0;w--){const A=Math.floor(Math.random()*(w+1));[x[w],x[A]]=[x[A],x[w]]}return x}function*T(...x){const w=x.map(A=>A[Symbol.iterator]());for(;;){const A=w.map(H=>H.next());if(A.some(({done:H})=>H))break;yield A.map(({value:H})=>H)}}function*F(x=0,w=1/0,A=1){for(let H=x;H<w;H+=A)yield H}function O(x,w){const A=[];for(let H=0;H<x;H++)A.push(w(H));return A}c.countMap=O;function Z(x){return x.reduce((w,A)=>w+A,0)}function o1(x,w,A,H){const D=(H-w)/(A-x);return function(N){return(N-x)*D+w}}function i1(x,w,A,H){A<x&&([x,w,A,H]=[A,H,x,w]);const D=(H-w)/(A-x);return function(N){return N<=x?w:N>=A?H:(N-x)*D+w}}function y1(x,w){return{x:Math.cos(w)*x,y:Math.sin(w)*x}}function*_1(x,w=[]){if(x.length==0)yield w;else for(let A=0;A<x.length;A++){const H=x[A],D=[...w,H],N=[...x.slice(0,A),...x.slice(A+1)];yield*_1(N,D)}}function l1(x,w){return w?l1(w,x%w):x}function I1(x,w){return x*w/l1(x,w)}})(C1)),C1}var V=l0(),Y={},Z1;function S0(){if(Z1)return Y;Z1=1,Object.defineProperty(Y,"__esModule",{value:!0}),Y.AnimationLoop=void 0,Y.getById=e,Y.selectorQueryAll=n,Y.selectorQuery=r,Y.loadDateTimeLocal=s,Y.getBlobFromCanvas=a,Y.getAudioBalanceControl=o,Y.getHashInfo=i,Y.createElementFromHTML=d,Y.download=h,Y.getDataUrl=M;const c=l0();function e(l,m){const k=document.getElementById(l);if(!k)throw new Error("Could not find element with id "+l+".  Expected type:  "+m.name);if(k instanceof m)return k;throw new Error("Element with id "+l+" has type "+k.constructor.name+".  Expected type:  "+m.name)}function n(l,m,k=1,Q=1/0,u=document){const f=[];if(u.querySelectorAll(l).forEach(p=>{f.push((0,c.assertClass)(p,m))}),f.length<k||f.length>Q)throw new Error(`Expecting "${l}" to return [${k} - ${Q}] instances of ${m.name}, found ${f.length}.`);return f}function r(l,m,k=document){return n(l,m,1,1,k)[0]}function s(l,m,k="milliseconds"){let Q;switch(k){case"minutes":{Q=m.getSeconds()*1e3+m.getMilliseconds();break}case"seconds":{Q=m.getMilliseconds();break}case"milliseconds":{Q=0;break}default:throw new Error("wtf")}l.valueAsNumber=+m-m.getTimezoneOffset()*6e4-Q}function a(l){const{reject:m,resolve:k,promise:Q}=(0,c.makePromise)();return l.toBlob(u=>{u?k(u):m(new Error("blob is null!"))}),Q}function o(l){const m=new AudioContext,k=m.createMediaElementSource(l),Q=new StereoPannerNode(m,{pan:0});return k.connect(Q).connect(m.destination),u=>{Q.pan.value=u}}function i(){const l=new Map;return/^#?(.*)$/.exec(location.hash.replace("+","%20"))[1].split("&").forEach(Q=>{const u=Q.split("=",2);if(u.length==2){const f=decodeURIComponent(u[0]),p=decodeURIComponent(u[1]);l.set(f,p)}}),l}function d(l,m){var k=document.createElement("div");return k.innerHTML=l.trim(),(0,c.assertClass)(k.firstChild,m,"createElementFromHTML:")}function h(l,m){var k=document.createElement("a");if(k.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(m)),k.setAttribute("download",l),document.createEvent){var Q=document.createEvent("MouseEvents");Q.initEvent("click",!0,!0),k.dispatchEvent(Q)}else k.click()}class g{onWake;constructor(m){this.onWake=m,this.callback=this.callback.bind(this),requestAnimationFrame(this.callback)}#t=!1;cancel(){this.#t=!0}callback(m){this.#t||(requestAnimationFrame(this.callback),this.onWake(m))}}Y.AnimationLoop=g;async function M(l){const m=document.createElement("img");m.src=l,await m.decode();const k=m.naturalHeight,Q=m.naturalWidth;if(k==0||Q==0)throw new Error("problem with image");const u=document.createElement("canvas");u.width=Q,u.height=k;const f=u.getContext("2d");if(!f)throw new Error("wtf");return f.drawImage(m,0,0,u.width,u.height),u.toDataURL()}return Y}var j=S0(),X;(function(c){c.LOAD="LOAD",c.EXEC="EXEC",c.FFPROBE="FFPROBE",c.WRITE_FILE="WRITE_FILE",c.READ_FILE="READ_FILE",c.DELETE_FILE="DELETE_FILE",c.RENAME="RENAME",c.CREATE_DIR="CREATE_DIR",c.LIST_DIR="LIST_DIR",c.DELETE_DIR="DELETE_DIR",c.ERROR="ERROR",c.DOWNLOAD="DOWNLOAD",c.PROGRESS="PROGRESS",c.LOG="LOG",c.MOUNT="MOUNT",c.UNMOUNT="UNMOUNT"})(X||(X={}));const _0=(()=>{let c=0;return()=>c++})(),b0=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),H0=new Error("called FFmpeg.terminate()");class $0{#t=null;#e={};#n={};#a=[];#r=[];loaded=!1;#o=()=>{this.#t&&(this.#t.onmessage=({data:{id:e,type:n,data:r}})=>{switch(n){case X.LOAD:this.loaded=!0,this.#e[e](r);break;case X.MOUNT:case X.UNMOUNT:case X.EXEC:case X.FFPROBE:case X.WRITE_FILE:case X.READ_FILE:case X.DELETE_FILE:case X.RENAME:case X.CREATE_DIR:case X.LIST_DIR:case X.DELETE_DIR:this.#e[e](r);break;case X.LOG:this.#a.forEach(s=>s(r));break;case X.PROGRESS:this.#r.forEach(s=>s(r));break;case X.ERROR:this.#n[e](r);break}delete this.#e[e],delete this.#n[e]})};#s=({type:e,data:n},r=[],s)=>this.#t?new Promise((a,o)=>{const i=_0();this.#t&&this.#t.postMessage({id:i,type:e,data:n},r),this.#e[i]=a,this.#n[i]=o,s?.addEventListener("abort",()=>{o(new DOMException(`Message # ${i} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(b0);on(e,n){e==="log"?this.#a.push(n):e==="progress"&&this.#r.push(n)}off(e,n){e==="log"?this.#a=this.#a.filter(r=>r!==n):e==="progress"&&(this.#r=this.#r.filter(r=>r!==n))}load=({classWorkerURL:e,...n}={},{signal:r}={})=>(this.#t||(this.#t=e?new Worker(new URL(e,import.meta.url),{type:"module"}):new Worker(new URL(""+new URL("worker-DYSz7Krg.js",import.meta.url).href,import.meta.url),{type:"module"}),this.#o()),this.#s({type:X.LOAD,data:n},void 0,r));exec=(e,n=-1,{signal:r}={})=>this.#s({type:X.EXEC,data:{args:e,timeout:n}},void 0,r);ffprobe=(e,n=-1,{signal:r}={})=>this.#s({type:X.FFPROBE,data:{args:e,timeout:n}},void 0,r);terminate=()=>{const e=Object.keys(this.#n);for(const n of e)this.#n[n](H0),delete this.#n[n],delete this.#e[n];this.#t&&(this.#t.terminate(),this.#t=null,this.loaded=!1)};writeFile=(e,n,{signal:r}={})=>{const s=[];return n instanceof Uint8Array&&s.push(n.buffer),this.#s({type:X.WRITE_FILE,data:{path:e,data:n}},s,r)};mount=(e,n,r)=>{const s=[];return this.#s({type:X.MOUNT,data:{fsType:e,options:n,mountPoint:r}},s)};unmount=e=>{const n=[];return this.#s({type:X.UNMOUNT,data:{mountPoint:e}},n)};readFile=(e,n="binary",{signal:r}={})=>this.#s({type:X.READ_FILE,data:{path:e,encoding:n}},void 0,r);deleteFile=(e,{signal:n}={})=>this.#s({type:X.DELETE_FILE,data:{path:e}},void 0,n);rename=(e,n,{signal:r}={})=>this.#s({type:X.RENAME,data:{oldPath:e,newPath:n}},void 0,r);createDir=(e,{signal:n}={})=>this.#s({type:X.CREATE_DIR,data:{path:e}},void 0,n);listDir=(e,{signal:n}={})=>this.#s({type:X.LIST_DIR,data:{path:e}},void 0,n);deleteDir=(e,{signal:n}={})=>this.#s({type:X.DELETE_DIR,data:{path:e}},void 0,n)}var Y1;(function(c){c.MEMFS="MEMFS",c.NODEFS="NODEFS",c.NODERAWFS="NODERAWFS",c.IDBFS="IDBFS",c.WORKERFS="WORKERFS",c.PROXYFS="PROXYFS"})(Y1||(Y1={}));const A0=""+new URL("ffmpeg-core-CI9Irx9p.js",import.meta.url).href,V0=""+new URL("ffmpeg-core-CgUfceKH.wasm",import.meta.url).href;class J1{top;bottom;width;letters;spaceAfter;constructor(e,n){const r=n.getWord(e);let s=0;this.letters=r.map(i=>{const d={x:s,description:i};return s+=i.advance+n.kerning,d});const a=this.letters.at(-1);this.width=a?a.x+a.description.advance:0,this.top=n.top,this.bottom=n.bottom;let o=0;[...e].forEach(i=>{i==" "&&o++}),this.spaceAfter=o*n.spaceWidth+n.kerning}}class R0{}class I0{constructor(e){this.font=e}#t=[];addWord(e,n=this.font){const r=new J1(e,n);return this.#t.push(r),r}addText(e,n=this.font){const r=[];for(const s of e.matchAll(/(\n)|([^ \n]*(( +)|$|(?=\n)))/gms)){const a=s[0];if(a[0]==`
`)for(let o=0;o<a.length;o++)this.addLineBreak();else a!=""&&this.addWord(a,n)}return r}addLineBreak(){this.#t.push(new R0)}align(e=1/0,n="left"){const r=[[]];let s=0;for(this.#t.forEach(M=>{M instanceof J1?(s>0&&s+M.width>e&&(s=0,r.push([])),s+=M.width+M.spaceAfter,r.at(-1).push(M)):(s=0,r.push([]))});r.length>0&&r.at(-1).length==0;)r.pop();let a=0;const o=new Array;r.forEach(M=>{const l=a,m=l-Math.min(...M.map(u=>u.top)),k=m+Math.max(...M.map(u=>u.bottom)),Q=V.sum(M.map(u=>u.width+u.spaceAfter))-M.at(-1).spaceAfter;o.push({top:l,baseline:m,bottom:k,minWidth:Q}),a=k});const i=new Array;e==1/0&&(e=Math.max(...o.map(({minWidth:M})=>M))),r.forEach((M,l)=>{const m=o[l],k=m.baseline;function Q(){let y=(e-m.minWidth)/2;M.forEach(v=>{i.push({x:y,baseline:k,wordInfo:v}),y+=v.width+v.spaceAfter})}function u(){let y=0;M.forEach(v=>{i.push({x:y,baseline:k,wordInfo:v}),y+=v.width+v.spaceAfter})}function f(){let y=e-m.minWidth;M.forEach(v=>{i.push({x:y,baseline:k,wordInfo:v}),y+=v.width+v.spaceAfter})}function p(){const y=(e-m.minWidth)/(M.length-1);let v=0;M.forEach(L=>{i.push({x:v,baseline:k,wordInfo:L}),v+=L.width+L.spaceAfter+y})}switch(n){case"center":{Q();break}case"left":{u();break}case"right":{f();break}case"justify":{l<r.length-1?p():u();break}default:throw new Error("wtf")}});function*d(M=0,l=0){for(const m of i)for(const k of m.wordInfo.letters){const Q=M+m.x+k.x,u=l+m.baseline;yield{x:Q,baseline:u,letter:k.description,translatedShape:k.description.shape.translate(Q,u),word:m}}}function h(M,l=0,m=0){M.lineCap="round",M.lineJoin="round";for(const k of d(l,m)){const Q=new Path2D(k.translatedShape.rawPath);M.stroke(Q)}}function g(M=0,l=0){let m=0;const k=[...d(M,l)].flatMap(({translatedShape:f})=>f.splitOnMove()).map(f=>{const p=f.getLength(),y=m+p,L={path:new Path2D(f.rawPath),start:m,length:p,end:y};return m=y,L}),Q=m;function u(f,p){p.lineCap="round",p.lineJoin="round";for(const y of k){if(f<=y.start)break;f>=y.end?p.setLineDash([]):p.setLineDash([f-y.start,Q]),p.stroke(y.path)}}return{totalLength:Q,drawTo:u}}return{width:e,words:i,allRowMetrics:o,getAllLetters:d,drawAll:h,drawPartial:g}}}function n1(c,e,n){return new DOMPoint(c,e).matrixTransform(n)}function G1(c,e,n,r=.5,s=.5){const a=c.width/c.height,o=e.width/e.height;let i,d;switch(n){case"meet":case"srcRect fits completely into destRect":{a>o?(i=e.width/c.width,d=i):(d=e.height/c.height,i=d);break}case"slice":case"srcRect completely covers destRect":{a>o?(d=e.height/c.height,i=d):(i=e.width/c.width,d=i);break}default:throw new Error("wtf")}const h=-c.x*i+r*(e.width-c.width*i)+e.x,g=-c.y*d+s*(e.height-c.height*d)+e.y;return new DOMMatrix().translate(h,g).scale(i,d)}function C0(){{const c={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:244,width:325},n=G1(c,e,"meet");[{x:c.x,y:c.y},{x:c.x+c.width,y:c.y},{x:c.x+c.width,y:c.y+c.height},{x:c.x,y:c.y+c.height}].forEach(({x:s,y:a})=>{const o=n1(s,a,n);if(o.x<e.x||o.x>e.x+e.width||o.y<e.y||o.y>e.y+e.height)throw new Error(`Test 1 failed: Point (${o.x}, ${o.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}{const c={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:325,width:244},n=G1(c,e,"meet");[{x:c.x,y:c.y},{x:c.x+c.width,y:c.y},{x:c.x+c.width,y:c.y+c.height},{x:c.x,y:c.y+c.height}].forEach(({x:s,y:a})=>{const o=n1(s,a,n);if(o.x<e.x||o.x>e.x+e.width||o.y<e.y||o.y>e.y+e.height)throw new Error(`Test 2 failed: Point (${o.x}, ${o.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}}C0();var T1,K1;function T0(){if(K1)return T1;K1=1,T1=n;var c={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},e=/([astvzqmhlc])([^astvzqmhlc]*)/ig;function n(a){var o=[];return a.replace(e,function(i,d,h){var g=d.toLowerCase();for(h=s(h),g=="m"&&h.length>2&&(o.push([d].concat(h.splice(0,2))),g="l",d=d=="m"?"l":"L");;){if(h.length==c[g])return h.unshift(d),o.push(h);if(h.length<c[g])throw new Error("malformed path data");o.push([d].concat(h.splice(0,c[g])))}}),o}var r=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;function s(a){var o=a.match(r);return o?o.map(Number):[]}return T1}var z0=T0();const P0=d0(z0);var z1,t0;function O0(){if(t0)return z1;t0=1,z1=c;function c(e){var n=0,r=0,s=0,a=0;return e.map(function(o){o=o.slice();var i=o[0],d=i.toUpperCase();if(i!=d)switch(o[0]=d,i){case"a":o[6]+=s,o[7]+=a;break;case"v":o[1]+=a;break;case"h":o[1]+=s;break;default:for(var h=1;h<o.length;)o[h++]+=s,o[h++]+=a}switch(d){case"Z":s=n,a=r;break;case"H":s=o[1];break;case"V":a=o[1];break;case"M":s=n=o[1],a=r=o[2];break;default:s=o[o.length-2],a=o[o.length-1]}return o})}return z1}var F0=O0();const N0=d0(F0);var D0=(function(){function c(e,n){var r=[],s=!0,a=!1,o=void 0;try{for(var i=e[Symbol.iterator](),d;!(s=(d=i.next()).done)&&(r.push(d.value),!(n&&r.length===n));s=!0);}catch(h){a=!0,o=h}finally{try{!s&&i.return&&i.return()}finally{if(a)throw o}}return r}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return c(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}})(),w1=Math.PI*2,P1=function(e,n,r,s,a,o,i){var d=e.x,h=e.y;d*=n,h*=r;var g=s*d-a*h,M=a*d+s*h;return{x:g+o,y:M+i}},W0=function(e,n){var r=n===1.5707963267948966?.551915024494:n===-1.5707963267948966?-.551915024494:1.3333333333333333*Math.tan(n/4),s=Math.cos(e),a=Math.sin(e),o=Math.cos(e+n),i=Math.sin(e+n);return[{x:s-a*r,y:a+s*r},{x:o+i*r,y:i-o*r},{x:o,y:i}]},e0=function(e,n,r,s){var a=e*s-n*r<0?-1:1,o=e*r+n*s;return o>1&&(o=1),o<-1&&(o=-1),a*Math.acos(o)},U0=function(e,n,r,s,a,o,i,d,h,g,M,l){var m=Math.pow(a,2),k=Math.pow(o,2),Q=Math.pow(M,2),u=Math.pow(l,2),f=m*k-m*u-k*Q;f<0&&(f=0),f/=m*u+k*Q,f=Math.sqrt(f)*(i===d?-1:1);var p=f*a/o*l,y=f*-o/a*M,v=g*p-h*y+(e+r)/2,L=h*p+g*y+(n+s)/2,_=(M-p)/a,$=(l-y)/o,E=(-M-p)/a,R=(-l-y)/o,I=e0(1,0,_,$),P=e0(_,$,E,R);return d===0&&P>0&&(P-=w1),d===1&&P<0&&(P+=w1),[v,L,I,P]},q0=function(e){var n=e.px,r=e.py,s=e.cx,a=e.cy,o=e.rx,i=e.ry,d=e.xAxisRotation,h=d===void 0?0:d,g=e.largeArcFlag,M=g===void 0?0:g,l=e.sweepFlag,m=l===void 0?0:l,k=[];if(o===0||i===0)return[];var Q=Math.sin(h*w1/360),u=Math.cos(h*w1/360),f=u*(n-s)/2+Q*(r-a)/2,p=-Q*(n-s)/2+u*(r-a)/2;if(f===0&&p===0)return[];o=Math.abs(o),i=Math.abs(i);var y=Math.pow(f,2)/Math.pow(o,2)+Math.pow(p,2)/Math.pow(i,2);y>1&&(o*=Math.sqrt(y),i*=Math.sqrt(y));var v=U0(n,r,s,a,o,i,M,m,Q,u,f,p),L=D0(v,4),_=L[0],$=L[1],E=L[2],R=L[3],I=Math.abs(R)/(w1/4);Math.abs(1-I)<1e-7&&(I=1);var P=Math.max(Math.ceil(I),1);R/=P;for(var T=0;T<P;T++)k.push(W0(E,R)),E+=R;return k.map(function(F){var O=P1(F[0],o,i,u,Q,_,$),Z=O.x,o1=O.y,i1=P1(F[1],o,i,u,Q,_,$),y1=i1.x,_1=i1.y,l1=P1(F[2],o,i,u,Q,_,$),I1=l1.x,x=l1.y;return{x1:Z,y1:o1,x2:y1,y2:_1,x:I1,y:x}})};function X0(c){for(var e,n=[],r=0,s=0,a=0,o=0,i=null,d=null,h=0,g=0,M=0,l=c.length;M<l;M++){var m=c[M],k=m[0];switch(k){case"M":a=m[1],o=m[2];break;case"A":var Q=q0({px:h,py:g,cx:m[6],cy:m[7],rx:m[1],ry:m[2],xAxisRotation:m[3],largeArcFlag:m[4],sweepFlag:m[5]});if(!Q.length)continue;for(var u=0,f;u<Q.length;u++)f=Q[u],m=["C",f.x1,f.y1,f.x2,f.y2,f.x,f.y],u<Q.length-1&&n.push(m);break;case"S":var p=h,y=g;(e=="C"||e=="S")&&(p+=p-r,y+=y-s),m=["C",p,y,m[1],m[2],m[3],m[4]];break;case"T":e=="Q"||e=="T"?(i=h*2-i,d=g*2-d):(i=h,d=g),m=n0(h,g,i,d,m[1],m[2]);break;case"Q":i=m[1],d=m[2],m=n0(h,g,m[1],m[2],m[3],m[4]);break;case"L":m=b1(h,g,m[1],m[2]);break;case"H":m=b1(h,g,m[1],g);break;case"V":m=b1(h,g,h,m[1]);break;case"Z":m=b1(h,g,a,o);break}e=k,h=m[m.length-2],g=m[m.length-1],m.length>4?(r=m[m.length-4],s=m[m.length-3]):(r=h,s=g),n.push(m)}return n}function b1(c,e,n,r){return["C",c,e,n,r,n,r]}function n0(c,e,n,r,s,a){return["C",c/3+2/3*n,e/3+2/3*r,s/3+2/3*n,a/3+2/3*r,s,a]}const{abs:m1,cos:a1,sin:u1,acos:B0,atan2:M1,sqrt:c1,pow:K}=Math;function g1(c){return c<0?-K(-c,1/3):K(c,1/3)}const u0=Math.PI,H1=2*u0,Q1=u0/2,j0=1e-6,O1=Number.MAX_SAFE_INTEGER||9007199254740991,F1=Number.MIN_SAFE_INTEGER||-9007199254740991,Z0={x:0,y:0,z:0},b={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(c,e){const n=e(c);let r=n.x*n.x+n.y*n.y;return typeof n.z<"u"&&(r+=n.z*n.z),c1(r)},compute:function(c,e,n){if(c===0)return e[0].t=0,e[0];const r=e.length-1;if(c===1)return e[r].t=1,e[r];const s=1-c;let a=e;if(r===0)return e[0].t=c,e[0];if(r===1){const i={x:s*a[0].x+c*a[1].x,y:s*a[0].y+c*a[1].y,t:c};return n&&(i.z=s*a[0].z+c*a[1].z),i}if(r<4){let i=s*s,d=c*c,h,g,M,l=0;r===2?(a=[a[0],a[1],a[2],Z0],h=i,g=s*c*2,M=d):r===3&&(h=i*s,g=i*c*3,M=s*d*3,l=c*d);const m={x:h*a[0].x+g*a[1].x+M*a[2].x+l*a[3].x,y:h*a[0].y+g*a[1].y+M*a[2].y+l*a[3].y,t:c};return n&&(m.z=h*a[0].z+g*a[1].z+M*a[2].z+l*a[3].z),m}const o=JSON.parse(JSON.stringify(e));for(;o.length>1;){for(let i=0;i<o.length-1;i++)o[i]={x:o[i].x+(o[i+1].x-o[i].x)*c,y:o[i].y+(o[i+1].y-o[i].y)*c},typeof o[i].z<"u"&&(o[i].z=o[i].z+(o[i+1].z-o[i].z)*c);o.splice(o.length-1,1)}return o[0].t=c,o[0]},computeWithRatios:function(c,e,n,r){const s=1-c,a=n,o=e;let i=a[0],d=a[1],h=a[2],g=a[3],M;if(i*=s,d*=c,o.length===2)return M=i+d,{x:(i*o[0].x+d*o[1].x)/M,y:(i*o[0].y+d*o[1].y)/M,z:r?(i*o[0].z+d*o[1].z)/M:!1,t:c};if(i*=s,d*=2*s,h*=c*c,o.length===3)return M=i+d+h,{x:(i*o[0].x+d*o[1].x+h*o[2].x)/M,y:(i*o[0].y+d*o[1].y+h*o[2].y)/M,z:r?(i*o[0].z+d*o[1].z+h*o[2].z)/M:!1,t:c};if(i*=s,d*=1.5*s,h*=3*s,g*=c*c*c,o.length===4)return M=i+d+h+g,{x:(i*o[0].x+d*o[1].x+h*o[2].x+g*o[3].x)/M,y:(i*o[0].y+d*o[1].y+h*o[2].y+g*o[3].y)/M,z:r?(i*o[0].z+d*o[1].z+h*o[2].z+g*o[3].z)/M:!1,t:c}},derive:function(c,e){const n=[];for(let r=c,s=r.length,a=s-1;s>1;s--,a--){const o=[];for(let i=0,d;i<a;i++)d={x:a*(r[i+1].x-r[i].x),y:a*(r[i+1].y-r[i].y)},e&&(d.z=a*(r[i+1].z-r[i].z)),o.push(d);n.push(o),r=o}return n},between:function(c,e,n){return e<=c&&c<=n||b.approximately(c,e)||b.approximately(c,n)},approximately:function(c,e,n){return m1(c-e)<=(n||j0)},length:function(c){const n=b.Tvalues.length;let r=0;for(let s=0,a;s<n;s++)a=.5*b.Tvalues[s]+.5,r+=b.Cvalues[s]*b.arcfn(a,c);return .5*r},map:function(c,e,n,r,s){const a=n-e,o=s-r,i=c-e,d=i/a;return r+o*d},lerp:function(c,e,n){const r={x:e.x+c*(n.x-e.x),y:e.y+c*(n.y-e.y)};return e.z!==void 0&&n.z!==void 0&&(r.z=e.z+c*(n.z-e.z)),r},pointToString:function(c){let e=c.x+"/"+c.y;return typeof c.z<"u"&&(e+="/"+c.z),e},pointsToString:function(c){return"["+c.map(b.pointToString).join(", ")+"]"},copy:function(c){return JSON.parse(JSON.stringify(c))},angle:function(c,e,n){const r=e.x-c.x,s=e.y-c.y,a=n.x-c.x,o=n.y-c.y,i=r*o-s*a,d=r*a+s*o;return M1(i,d)},round:function(c,e){const n=""+c,r=n.indexOf(".");return parseFloat(n.substring(0,r+1+e))},dist:function(c,e){const n=c.x-e.x,r=c.y-e.y;return c1(n*n+r*r)},closest:function(c,e){let n=K(2,63),r,s;return c.forEach(function(a,o){s=b.dist(e,a),s<n&&(n=s,r=o)}),{mdist:n,mpos:r}},abcratio:function(c,e){if(e!==2&&e!==3)return!1;if(typeof c>"u")c=.5;else if(c===0||c===1)return c;const n=K(c,e)+K(1-c,e),r=n-1;return m1(r/n)},projectionratio:function(c,e){if(e!==2&&e!==3)return!1;if(typeof c>"u")c=.5;else if(c===0||c===1)return c;const n=K(1-c,e),r=K(c,e)+n;return n/r},lli8:function(c,e,n,r,s,a,o,i){const d=(c*r-e*n)*(s-o)-(c-n)*(s*i-a*o),h=(c*r-e*n)*(a-i)-(e-r)*(s*i-a*o),g=(c-n)*(a-i)-(e-r)*(s-o);return g==0?!1:{x:d/g,y:h/g}},lli4:function(c,e,n,r){const s=c.x,a=c.y,o=e.x,i=e.y,d=n.x,h=n.y,g=r.x,M=r.y;return b.lli8(s,a,o,i,d,h,g,M)},lli:function(c,e){return b.lli4(c,c.c,e,e.c)},makeline:function(c,e){return new B(c.x,c.y,(c.x+e.x)/2,(c.y+e.y)/2,e.x,e.y)},findbbox:function(c){let e=O1,n=O1,r=F1,s=F1;return c.forEach(function(a){const o=a.bbox();e>o.x.min&&(e=o.x.min),n>o.y.min&&(n=o.y.min),r<o.x.max&&(r=o.x.max),s<o.y.max&&(s=o.y.max)}),{x:{min:e,mid:(e+r)/2,max:r,size:r-e},y:{min:n,mid:(n+s)/2,max:s,size:s-n}}},shapeintersections:function(c,e,n,r,s){if(!b.bboxoverlap(e,r))return[];const a=[],o=[c.startcap,c.forward,c.back,c.endcap],i=[n.startcap,n.forward,n.back,n.endcap];return o.forEach(function(d){d.virtual||i.forEach(function(h){if(h.virtual)return;const g=d.intersects(h,s);g.length>0&&(g.c1=d,g.c2=h,g.s1=c,g.s2=n,a.push(g))})}),a},makeshape:function(c,e,n){const r=e.points.length,s=c.points.length,a=b.makeline(e.points[r-1],c.points[0]),o=b.makeline(c.points[s-1],e.points[0]),i={startcap:a,forward:c,back:e,endcap:o,bbox:b.findbbox([a,c,e,o])};return i.intersections=function(d){return b.shapeintersections(i,i.bbox,d,d.bbox,n)},i},getminmax:function(c,e,n){if(!n)return{min:0,max:0};let r=O1,s=F1,a,o;n.indexOf(0)===-1&&(n=[0].concat(n)),n.indexOf(1)===-1&&n.push(1);for(let i=0,d=n.length;i<d;i++)a=n[i],o=c.get(a),o[e]<r&&(r=o[e]),o[e]>s&&(s=o[e]);return{min:r,mid:(r+s)/2,max:s,size:s-r}},align:function(c,e){const n=e.p1.x,r=e.p1.y,s=-M1(e.p2.y-r,e.p2.x-n),a=function(o){return{x:(o.x-n)*a1(s)-(o.y-r)*u1(s),y:(o.x-n)*u1(s)+(o.y-r)*a1(s)}};return c.map(a)},roots:function(c,e){e=e||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=c.length-1,r=b.align(c,e),s=function($){return 0<=$&&$<=1};if(n===2){const $=r[0].y,E=r[1].y,R=r[2].y,I=$-2*E+R;if(I!==0){const P=-c1(E*E-$*R),T=-$+E,F=-(P+T)/I,O=-(-P+T)/I;return[F,O].filter(s)}else if(E!==R&&I===0)return[(2*E-R)/(2*E-2*R)].filter(s);return[]}const a=r[0].y,o=r[1].y,i=r[2].y,d=r[3].y;let h=-a+3*o-3*i+d,g=3*a-6*o+3*i,M=-3*a+3*o,l=a;if(b.approximately(h,0)){if(b.approximately(g,0))return b.approximately(M,0)?[]:[-l/M].filter(s);const $=c1(M*M-4*g*l),E=2*g;return[($-M)/E,(-M-$)/E].filter(s)}g/=h,M/=h,l/=h;const m=(3*M-g*g)/3,k=m/3,Q=(2*g*g*g-9*g*M+27*l)/27,u=Q/2,f=u*u+k*k*k;let p,y,v,L,_;if(f<0){const $=-m/3,E=$*$*$,R=c1(E),I=-Q/(2*R),P=I<-1?-1:I>1?1:I,T=B0(P),F=g1(R),O=2*F;return v=O*a1(T/3)-g/3,L=O*a1((T+H1)/3)-g/3,_=O*a1((T+2*H1)/3)-g/3,[v,L,_].filter(s)}else{if(f===0)return p=u<0?g1(-u):-g1(u),v=2*p-g/3,L=-p-g/3,[v,L].filter(s);{const $=c1(f);return p=g1(-u+$),y=g1(u+$),[p-y-g/3].filter(s)}}},droots:function(c){if(c.length===3){const e=c[0],n=c[1],r=c[2],s=e-2*n+r;if(s!==0){const a=-c1(n*n-e*r),o=-e+n,i=-(a+o)/s,d=-(-a+o)/s;return[i,d]}else if(n!==r&&s===0)return[(2*n-r)/(2*(n-r))];return[]}if(c.length===2){const e=c[0],n=c[1];return e!==n?[e/(e-n)]:[]}return[]},curvature:function(c,e,n,r,s){let a,o,i,d,h=0,g=0;const M=b.compute(c,e),l=b.compute(c,n),m=M.x*M.x+M.y*M.y;if(r?(a=c1(K(M.y*l.z-l.y*M.z,2)+K(M.z*l.x-l.z*M.x,2)+K(M.x*l.y-l.x*M.y,2)),o=K(m+M.z*M.z,3/2)):(a=M.x*l.y-M.y*l.x,o=K(m,3/2)),a===0||o===0)return{k:0,r:0};if(h=a/o,g=o/a,!s){const k=b.curvature(c-.001,e,n,r,!0).k,Q=b.curvature(c+.001,e,n,r,!0).k;d=(Q-h+(h-k))/2,i=(m1(Q-h)+m1(h-k))/2}return{k:h,r:g,dk:d,adk:i}},inflections:function(c){if(c.length<4)return[];const e=b.align(c,{p1:c[0],p2:c.slice(-1)[0]}),n=e[2].x*e[1].y,r=e[3].x*e[1].y,s=e[1].x*e[2].y,a=e[3].x*e[2].y,o=18*(-3*n+2*r+3*s-a),i=18*(3*n-r-3*s),d=18*(s-n);if(b.approximately(o,0)){if(!b.approximately(i,0)){let l=-d/i;if(0<=l&&l<=1)return[l]}return[]}const h=2*o;if(b.approximately(h,0))return[];const g=i*i-4*o*d;if(g<0)return[];const M=Math.sqrt(g);return[(M-i)/h,-(i+M)/h].filter(function(l){return 0<=l&&l<=1})},bboxoverlap:function(c,e){const n=["x","y"],r=n.length;for(let s=0,a,o,i,d;s<r;s++)if(a=n[s],o=c[a].mid,i=e[a].mid,d=(c[a].size+e[a].size)/2,m1(o-i)>=d)return!1;return!0},expandbox:function(c,e){e.x.min<c.x.min&&(c.x.min=e.x.min),e.y.min<c.y.min&&(c.y.min=e.y.min),e.z&&e.z.min<c.z.min&&(c.z.min=e.z.min),e.x.max>c.x.max&&(c.x.max=e.x.max),e.y.max>c.y.max&&(c.y.max=e.y.max),e.z&&e.z.max>c.z.max&&(c.z.max=e.z.max),c.x.mid=(c.x.min+c.x.max)/2,c.y.mid=(c.y.min+c.y.max)/2,c.z&&(c.z.mid=(c.z.min+c.z.max)/2),c.x.size=c.x.max-c.x.min,c.y.size=c.y.max-c.y.min,c.z&&(c.z.size=c.z.max-c.z.min)},pairiteration:function(c,e,n){const r=c.bbox(),s=e.bbox(),a=1e5,o=n||.5;if(r.x.size+r.y.size<o&&s.x.size+s.y.size<o)return[(a*(c._t1+c._t2)/2|0)/a+"/"+(a*(e._t1+e._t2)/2|0)/a];let i=c.split(.5),d=e.split(.5),h=[{left:i.left,right:d.left},{left:i.left,right:d.right},{left:i.right,right:d.right},{left:i.right,right:d.left}];h=h.filter(function(M){return b.bboxoverlap(M.left.bbox(),M.right.bbox())});let g=[];return h.length===0||(h.forEach(function(M){g=g.concat(b.pairiteration(M.left,M.right,o))}),g=g.filter(function(M,l){return g.indexOf(M)===l})),g},getccenter:function(c,e,n){const r=e.x-c.x,s=e.y-c.y,a=n.x-e.x,o=n.y-e.y,i=r*a1(Q1)-s*u1(Q1),d=r*u1(Q1)+s*a1(Q1),h=a*a1(Q1)-o*u1(Q1),g=a*u1(Q1)+o*a1(Q1),M=(c.x+e.x)/2,l=(c.y+e.y)/2,m=(e.x+n.x)/2,k=(e.y+n.y)/2,Q=M+i,u=l+d,f=m+h,p=k+g,y=b.lli8(M,l,Q,u,m,k,f,p),v=b.dist(y,c);let L=M1(c.y-y.y,c.x-y.x),_=M1(e.y-y.y,e.x-y.x),$=M1(n.y-y.y,n.x-y.x),E;return L<$?((L>_||_>$)&&(L+=H1),L>$&&(E=$,$=L,L=E)):$<_&&_<L?(E=$,$=L,L=E):$+=H1,y.s=L,y.e=$,y.r=v,y},numberSort:function(c,e){return c-e}};class k1{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map(function(e){return b.pointsToString(e.points)}).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map(function(e){return e.length()}).reduce(function(e,n){return e+n})}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var n=e[0].bbox(),r=1;r<e.length;r++)b.expandbox(n,e[r].bbox());return n}offset(e){const n=[];return this.curves.forEach(function(r){n.push(...r.offset(e))}),new k1(n)}}const{abs:L1,min:s0,max:r0,cos:Y0,sin:J0,acos:G0,sqrt:v1}=Math,K0=Math.PI;class B{constructor(e){let n=e&&e.forEach?e:Array.from(arguments).slice(),r=!1;if(typeof n[0]=="object"){r=n.length;const m=[];n.forEach(function(k){["x","y","z"].forEach(function(Q){typeof k[Q]<"u"&&m.push(k[Q])})}),n=m}let s=!1;const a=n.length;if(r){if(r>4){if(arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");s=!0}}else if(a!==6&&a!==8&&a!==9&&a!==12&&arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const o=this._3d=!s&&(a===9||a===12)||e&&e[0]&&typeof e[0].z<"u",i=this.points=[];for(let m=0,k=o?3:2;m<a;m+=k){var d={x:n[m],y:n[m+1]};o&&(d.z=n[m+2]),i.push(d)}const h=this.order=i.length-1,g=this.dims=["x","y"];o&&g.push("z"),this.dimlen=g.length;const M=b.align(i,{p1:i[0],p2:i[h]}),l=b.dist(i[0],i[h]);this._linear=M.reduce((m,k)=>m+L1(k.y),0)<l/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,n,r,s){if(typeof s>"u"&&(s=.5),s===0)return new B(n,n,r);if(s===1)return new B(e,n,n);const a=B.getABC(2,e,n,r,s);return new B(e,a.A,r)}static cubicFromPoints(e,n,r,s,a){typeof s>"u"&&(s=.5);const o=B.getABC(3,e,n,r,s);typeof a>"u"&&(a=b.dist(n,o.C));const i=a*(1-s)/s,d=b.dist(e,r),h=(r.x-e.x)/d,g=(r.y-e.y)/d,M=a*h,l=a*g,m=i*h,k=i*g,Q={x:n.x-M,y:n.y-l},u={x:n.x+m,y:n.y+k},f=o.A,p={x:f.x+(Q.x-f.x)/(1-s),y:f.y+(Q.y-f.y)/(1-s)},y={x:f.x+(u.x-f.x)/s,y:f.y+(u.y-f.y)/s},v={x:e.x+(p.x-e.x)/s,y:e.y+(p.y-e.y)/s},L={x:r.x+(y.x-r.x)/(1-s),y:r.y+(y.y-r.y)/(1-s)};return new B(e,v,L,r)}static getUtils(){return b}getUtils(){return B.getUtils()}static get PolyBezier(){return k1}valueOf(){return this.toString()}toString(){return b.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,n=e[0].x,r=e[0].y,s=["M",n,r,this.order===2?"Q":"C"];for(let a=1,o=e.length;a<o;a++)s.push(e[a].x),s.push(e[a].y);return s.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map(function(e,n){return""+n+e.x+e.y+(e.z?e.z:0)}).join("")}update(){this._lut=[],this.dpoints=b.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,n=b.angle(e[0],e[this.order],e[1]);this.clockwise=n>0}length(){return b.length(this.derivative.bind(this))}static getABC(e=2,n,r,s,a=.5){const o=b.projectionratio(a,e),i=1-o,d={x:o*n.x+i*s.x,y:o*n.y+i*s.y},h=b.abcratio(a,e);return{A:{x:r.x+(r.x-d.x)/h,y:r.y+(r.y-d.y)/h},B:r,C:d,S:n,E:s}}getABC(e,n){n=n||this.get(e);let r=this.points[0],s=this.points[this.order];return B.getABC(this.order,r,n,s,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e+1)return this._lut;this._lut=[],e++,this._lut=[];for(let n=0,r,s;n<e;n++)s=n/(e-1),r=this.compute(s),r.t=s,this._lut.push(r);return this._lut}on(e,n){n=n||5;const r=this.getLUT(),s=[];for(let a=0,o,i=0;a<r.length;a++)o=r[a],b.dist(o,e)<n&&(s.push(o),i+=a/r.length);return s.length?t/=s.length:!1}project(e){const n=this.getLUT(),r=n.length-1,s=b.closest(n,e),a=s.mpos,o=(a-1)/r,i=(a+1)/r,d=.1/r;let h=s.mdist,g=o,M=g,l;h+=1;for(let m;g<i+d;g+=d)l=this.compute(g),m=b.dist(e,l),m<h&&(h=m,M=g);return M=M<0?0:M>1?1:M,l=this.compute(M),l.t=M,l.d=h,l}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?b.computeWithRatios(e,this.points,this.ratios,this._3d):b.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,n=[e[0]],r=e.length;for(let s=1,a,o;s<r;s++)a=e[s],o=e[s-1],n[s]={x:(r-s)/r*a.x+s/r*o.x,y:(r-s)/r*a.y+s/r*o.y};return n[r]=e[r-1],new B(n)}derivative(e){return b.compute(e,this.dpoints[0],this._3d)}dderivative(e){return b.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new B(b.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return b.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return b.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const n=this.derivative(e),r=v1(n.x*n.x+n.y*n.y);return{t:e,x:-n.y/r,y:n.x/r}}__normal3(e){const n=this.derivative(e),r=this.derivative(e+.01),s=v1(n.x*n.x+n.y*n.y+n.z*n.z),a=v1(r.x*r.x+r.y*r.y+r.z*r.z);n.x/=s,n.y/=s,n.z/=s,r.x/=a,r.y/=a,r.z/=a;const o={x:r.y*n.z-r.z*n.y,y:r.z*n.x-r.x*n.z,z:r.x*n.y-r.y*n.x},i=v1(o.x*o.x+o.y*o.y+o.z*o.z);o.x/=i,o.y/=i,o.z/=i;const d=[o.x*o.x,o.x*o.y-o.z,o.x*o.z+o.y,o.x*o.y+o.z,o.y*o.y,o.y*o.z-o.x,o.x*o.z-o.y,o.y*o.z+o.x,o.z*o.z];return{t:e,x:d[0]*n.x+d[1]*n.y+d[2]*n.z,y:d[3]*n.x+d[4]*n.y+d[5]*n.z,z:d[6]*n.x+d[7]*n.y+d[8]*n.z}}hull(e){let n=this.points,r=[],s=[],a=0;for(s[a++]=n[0],s[a++]=n[1],s[a++]=n[2],this.order===3&&(s[a++]=n[3]);n.length>1;){r=[];for(let o=0,i,d=n.length-1;o<d;o++)i=b.lerp(e,n[o],n[o+1]),s[a++]=i,r.push(i);n=r}return s}split(e,n){if(e===0&&n)return this.split(n).left;if(n===1)return this.split(e).right;const r=this.hull(e),s={left:this.order===2?new B([r[0],r[3],r[5]]):new B([r[0],r[4],r[7],r[9]]),right:this.order===2?new B([r[5],r[4],r[2]]):new B([r[9],r[8],r[6],r[3]]),span:r};return s.left._t1=b.map(0,0,1,this._t1,this._t2),s.left._t2=b.map(e,0,1,this._t1,this._t2),s.right._t1=b.map(e,0,1,this._t1,this._t2),s.right._t2=b.map(1,0,1,this._t1,this._t2),n?(n=b.map(n,e,1,0,1),s.right.split(n).left):s}extrema(){const e={};let n=[];return this.dims.forEach((function(r){let s=function(o){return o[r]},a=this.dpoints[0].map(s);e[r]=b.droots(a),this.order===3&&(a=this.dpoints[1].map(s),e[r]=e[r].concat(b.droots(a))),e[r]=e[r].filter(function(o){return o>=0&&o<=1}),n=n.concat(e[r].sort(b.numberSort))}).bind(this)),e.values=n.sort(b.numberSort).filter(function(r,s){return n.indexOf(r)===s}),e}bbox(){const e=this.extrema(),n={};return this.dims.forEach((function(r){n[r]=b.getminmax(this,r,e[r])}).bind(this)),n}overlaps(e){const n=this.bbox(),r=e.bbox();return b.bboxoverlap(n,r)}offset(e,n){if(typeof n<"u"){const r=this.get(e),s=this.normal(e),a={c:r,n:s,x:r.x+s.x*n,y:r.y+s.y*n};return this._3d&&(a.z=r.z+s.z*n),a}if(this._linear){const r=this.normal(0),s=this.points.map(function(a){const o={x:a.x+e*r.x,y:a.y+e*r.y};return a.z&&r.z&&(o.z=a.z+e*r.z),o});return[new B(s)]}return this.reduce().map(function(r){return r._linear?r.offset(e)[0]:r.scale(e)})}simple(){if(this.order===3){const s=b.angle(this.points[0],this.points[3],this.points[1]),a=b.angle(this.points[0],this.points[3],this.points[2]);if(s>0&&a<0||s<0&&a>0)return!1}const e=this.normal(0),n=this.normal(1);let r=e.x*n.x+e.y*n.y;return this._3d&&(r+=e.z*n.z),L1(G0(r))<K0/3}reduce(){let e,n=0,r=0,s=.01,a,o=[],i=[],d=this.extrema().values;for(d.indexOf(0)===-1&&(d=[0].concat(d)),d.indexOf(1)===-1&&d.push(1),n=d[0],e=1;e<d.length;e++)r=d[e],a=this.split(n,r),a._t1=n,a._t2=r,o.push(a),n=r;return o.forEach(function(h){for(n=0,r=0;r<=1;)for(r=n+s;r<=1+s;r+=s)if(a=h.split(n,r),!a.simple()){if(r-=s,L1(n-r)<s)return[];a=h.split(n,r),a._t1=b.map(n,0,1,h._t1,h._t2),a._t2=b.map(r,0,1,h._t1,h._t2),i.push(a),n=r;break}n<1&&(a=h.split(n,1),a._t1=b.map(n,0,1,h._t1,h._t2),a._t2=h._t2,i.push(a))}),i}translate(e,n,r){r=typeof r=="number"?r:n;const s=this.order;let a=this.points.map((o,i)=>(1-i/s)*n+i/s*r);return new B(this.points.map((o,i)=>({x:o.x+e.x*a[i],y:o.y+e.y*a[i]})))}scale(e){const n=this.order;let r=!1;if(typeof e=="function"&&(r=e),r&&n===2)return this.raise().scale(r);const s=this.clockwise,a=this.points;if(this._linear)return this.translate(this.normal(0),r?r(0):e,r?r(1):e);const o=r?r(0):e,i=r?r(1):e,d=[this.offset(0,10),this.offset(1,10)],h=[],g=b.lli4(d[0],d[0].c,d[1],d[1].c);if(!g)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach(function(M){const l=h[M*n]=b.copy(a[M*n]);l.x+=(M?i:o)*d[M].n.x,l.y+=(M?i:o)*d[M].n.y}),r?([0,1].forEach(function(M){if(!(n===2&&M)){var l=a[M+1],m={x:l.x-g.x,y:l.y-g.y},k=r?r((M+1)/n):e;r&&!s&&(k=-k);var Q=v1(m.x*m.x+m.y*m.y);m.x/=Q,m.y/=Q,h[M+1]={x:l.x+k*m.x,y:l.y+k*m.y}}}),new B(h)):([0,1].forEach(M=>{if(n===2&&M)return;const l=h[M*n],m=this.derivative(M),k={x:l.x+m.x,y:l.y+m.y};h[M+1]=b.lli4(l,k,g,a[M+1])}),new B(h))}outline(e,n,r,s){if(n=n===void 0?e:n,this._linear){const L=this.normal(0),_=this.points[0],$=this.points[this.points.length-1];let E,R,I;r===void 0&&(r=e,s=n),E={x:_.x+L.x*e,y:_.y+L.y*e},I={x:$.x+L.x*r,y:$.y+L.y*r},R={x:(E.x+I.x)/2,y:(E.y+I.y)/2};const P=[E,R,I];E={x:_.x-L.x*n,y:_.y-L.y*n},I={x:$.x-L.x*s,y:$.y-L.y*s},R={x:(E.x+I.x)/2,y:(E.y+I.y)/2};const T=[I,R,E],F=b.makeline(T[2],P[0]),O=b.makeline(P[2],T[0]),Z=[F,new B(P),O,new B(T)];return new k1(Z)}const a=this.reduce(),o=a.length,i=[];let d=[],h,g=0,M=this.length();const l=typeof r<"u"&&typeof s<"u";function m(L,_,$,E,R){return function(I){const P=E/$,T=(E+R)/$,F=_-L;return b.map(I,0,1,L+P*F,L+T*F)}}a.forEach(function(L){const _=L.length();l?(i.push(L.scale(m(e,r,M,g,_))),d.push(L.scale(m(-n,-s,M,g,_)))):(i.push(L.scale(e)),d.push(L.scale(-n))),g+=_}),d=d.map(function(L){return h=L.points,h[3]?L.points=[h[3],h[2],h[1],h[0]]:L.points=[h[2],h[1],h[0]],L}).reverse();const k=i[0].points[0],Q=i[o-1].points[i[o-1].points.length-1],u=d[o-1].points[d[o-1].points.length-1],f=d[0].points[0],p=b.makeline(u,k),y=b.makeline(Q,f),v=[p].concat(i).concat([y]).concat(d);return new k1(v)}outlineshapes(e,n,r){n=n||e;const s=this.outline(e,n).curves,a=[];for(let o=1,i=s.length;o<i/2;o++){const d=b.makeshape(s[o],s[i-o],r);d.startcap.virtual=o>1,d.endcap.virtual=o<i/2-1,a.push(d)}return a}intersects(e,n){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof B&&(e=e.reduce()),this.curveintersects(this.reduce(),e,n)):this.selfintersects(n)}lineIntersects(e){const n=s0(e.p1.x,e.p2.x),r=s0(e.p1.y,e.p2.y),s=r0(e.p1.x,e.p2.x),a=r0(e.p1.y,e.p2.y);return b.roots(this.points,e).filter(o=>{var i=this.get(o);return b.between(i.x,n,s)&&b.between(i.y,r,a)})}selfintersects(e){const n=this.reduce(),r=n.length-2,s=[];for(let a=0,o,i,d;a<r;a++)i=n.slice(a,a+1),d=n.slice(a+2),o=this.curveintersects(i,d,e),s.push(...o);return s}curveintersects(e,n,r){const s=[];e.forEach(function(o){n.forEach(function(i){o.overlaps(i)&&s.push({left:o,right:i})})});let a=[];return s.forEach(function(o){const i=b.pairiteration(o.left,o.right,r);i.length>0&&(a=a.concat(i))}),a}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,n,r,s){const a=(s-r)/4,o=this.get(r+a),i=this.get(s-a),d=b.dist(e,n),h=b.dist(e,o),g=b.dist(e,i);return L1(h-d)+L1(g-d)}_iterate(e,n){let r=0,s=1,a;do{a=0,s=1;let o=this.get(r),i,d,h,g,M=!1,l=!1,m,k=s,Q=1;do if(l=M,g=h,k=(r+s)/2,i=this.get(k),d=this.get(s),h=b.getccenter(o,i,d),h.interval={start:r,end:s},M=this._error(h,o,r,s)<=e,m=l&&!M,m||(Q=s),M){if(s>=1){if(h.interval.end=Q=1,g=h,s>1){let f={x:h.x+h.r*Y0(h.e),y:h.y+h.r*J0(h.e)};h.e+=b.angle({x:h.x,y:h.y},f,this.get(1))}break}s=s+(s-r)/2}else s=k;while(!m&&a++<100);if(a>=100)break;g=g||h,n.push(g),r=Q}while(s<1);return n}}class f0{#t=document.createElementNS("http://www.w3.org/2000/svg","svg");#e=document.createElementNS("http://www.w3.org/2000/svg","path");constructor(){this.#t.style.width="0",this.#t.style.height="0",this.#t.style.position="absolute",this.#t.appendChild(this.#e),document.body.appendChild(this.#t)}getBBox(){return this.#e.getBBox()}get d(){return this.#e.getAttribute("d")??""}set d(e){this.#e.style.d="",this.#e.style.d=z.cssifyPath(e);const n=this.#e.style.d!="";if(this.#e.style.d="",n)this.#e.setAttribute("d",e);else throw new Error("Invalid path")}get empty(){return this.d==""}clear(){this.d=""}get length(){return this.#e.getTotalLength()}getPoint(e){return this.#e.getPointAtLength(e)}load(e){typeof e!="string"&&(e instanceof z||(e=new z([e])),e=e.rawPath),this.d=e}measure(e){return this.load(e),this.length}}const G=new Intl.NumberFormat("en-US",{maximumSignificantDigits:8,useGrouping:!1}).format;class U{constructor(e,n,r,s){this.x0=e,this.y0=n,this.x=r,this.y=s,V.assertFinite(e,n,r,s),this.asString=`L ${G(r)},${G(s)}`,this.outgoingAngle=this.incomingAngle=Math.atan2(s-n,r-e)}reverse(){return new U(this.x,this.y,this.x0,this.y0)}toJSON(){return{command:"L",x0:this.x0,y0:this.y0,x:this.x,y:this.y}}static relative(e,n,r,s){return new this(e,n,r+e,s+n)}incomingAngle;outgoingAngle;command="L";asString;get length(){return Math.hypot(this.x0-this.x,this.y0-this.y)}translate(e,n){return new U(this.x0+e,this.y0+n,this.x+e,this.y+n)}toCubic(){return new r1(this.x0,this.y0,V.lerp(this.x0,this.x,1/3),V.lerp(this.y0,this.y,1/3),V.lerp(this.x0,this.x,2/3),V.lerp(this.y0,this.y,2/3),this.x,this.y)}transform(e){const n=n1(this.x,this.y,e),r=n1(this.x0,this.y0,e);return new U(r.x,r.y,n.x,n.y)}}class q{constructor(e,n,r,s,a,o,i){this.x0=e,this.y0=n,this.x1=r,this.y1=s,this.x=a,this.y=o,this.creationInfo=i,V.assertFinite(e,n,r,s,a,o),this.asString=`Q ${G(r)},${G(s)} ${G(a)},${G(o)}`}reverse(){return q.controlPoints(this.x,this.y,this.x1,this.y1,this.x0,this.y0)}static line(e,n,r,s,a){return new this(e,n,(e+r)/2,(n+s)/2,r,s,a)}static line4(e,n,r,s){return this.line(e,n,r,s,{source:"line"})}static line2(e,n){return this.line4(e.x,e.y,n.x,n.y)}static angles(e,n,r,s,a,o){V.assertFinite(e,n,r,s,a,o);const i=lt({x0:e,y0:n,angle:r},{x0:s,y0:a,angle:o+Math.PI});return i?new this(e,n,i.x,i.y,s,a,{source:"angles",success:!0,angle:o,angle0:r}):this.line(e,n,s,a,{source:"angles",success:!1,angle:o,angle0:r})}newAngles(e,n){return e??=this.requestedIncomingAngle,n??=this.requestedOutgoingAngle,q.angles(this.x0,this.y0,e,this.x,this.y,n)}toJSON(){return{command:"Q",x0:this.x0,y0:this.y0,x1:this.x1,y1:this.y1,x:this.x,y:this.y,creationInfo:this.creationInfo}}static controlPoints(e,n,r,s,a,o){return new this(e,n,r,s,a,o,{source:"controlPoints"})}static relative(e,n,r,s,a,o){return this.controlPoints(e,n,r+e,s+n,a+e,o+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y1,this.x-this.x1)}get requestedIncomingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle0:this.incomingAngle}get requestedOutgoingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle:this.outgoingAngle}command="Q";asString;translate(e,n){return q.controlPoints(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x+e,this.y+n)}transform(e){const n=n1(this.x0,this.y0,e),r=n1(this.x1,this.y1,e),s=n1(this.x,this.y,e);return q.controlPoints(n.x,n.y,r.x,r.y,s.x,s.y)}toCubic(){return new r1(this.x0,this.y0,V.lerp(this.x0,this.x1,2/3),V.lerp(this.y0,this.y1,2/3),V.lerp(this.x,this.x1,2/3),V.lerp(this.y,this.y1,2/3),this.x,this.y)}split(e){const{x:n,x0:r,x1:s,y:a,y0:o,y1:i}=this,d=r,h=o,g=(1-e)*r+e*s,M=(1-e)*o+e*i,l=(1-e)**2*r+2*(1-e)*e*s+e**2*n,m=(1-e)**2*o+2*(1-e)*e*i+e**2*a,k=q.controlPoints(d,h,g,M,l,m),Q=l,u=m,f=(1-e)*s+e*n,p=(1-e)*i+e*a,y=n,v=a,L=q.controlPoints(Q,u,f,p,y,v);return[k,L]}multiSplit(e){if(V.assertFinite(e),e<1||(e|0)!=e)throw new Error("wtf");const n=[];let r=this;for(;e>1;){const s=1/e;let a;[a,r]=r.split(s),n.push(a),e--}return n.push(r),n}}class r1{constructor(e,n,r,s,a,o,i,d){this.x0=e,this.y0=n,this.x1=r,this.y1=s,this.x2=a,this.y2=o,this.x=i,this.y=d,V.assertFinite(e,n,r,s,a,o,i,d),this.asString=`C ${G(r)},${G(s)} ${G(a)},${G(o)} ${G(i)},${G(d)}`}reverse(){return new r1(this.x,this.y,this.x2,this.y2,this.x1,this.y1,this.x0,this.y0)}static relative(e,n,r,s,a,o,i,d){return new this(e,n,r+e,s+n,a+e,o+n,i+e,d+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y2,this.x-this.x2)}command="C";asString;translate(e,n){return new r1(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x2+e,this.y2+n,this.x+e,this.y+n)}transform(e){const n=n1(this.x0,this.y0,e),r=n1(this.x1,this.y1,e),s=n1(this.x2,this.y2,e),a=n1(this.x,this.y,e);return new r1(n.x,n.y,r.x,r.y,s.x,s.y,a.x,a.y)}toCubic(){return this}}class S{get commands(){return this.#t}addCommand(e){this.#t.push(e),this.#e=void 0}addCommands(e){return e.forEach(n=>this.addCommand(n)),this}static fromStrings(e){let n=e.join(" ");const r=[];let s;for(;n=n.replace(/^ */,""),n!="";){let a=y0.exec(n);if(a){const o=V.parseFloatX(a[1]),i=V.parseFloatX(a[2]);if(o===void 0||i===void 0)throw console.error(a,o,i,this),new Error("wtf");s&&r.push(s),s=this.M(o,i),n=a[3];continue}if(s){if(a=m0.exec(n),a){const o=V.parseFloatX(a[1]),i=V.parseFloatX(a[2]);if(o===void 0||i===void 0)throw console.error(a,o,i,this),new Error("wtf");s=s.L(o,i),n=a[3];continue}if(a=g0.exec(n),a){const o=V.parseFloatX(a[1]),i=V.parseFloatX(a[2]),d=V.parseFloatX(a[3]),h=V.parseFloatX(a[4]);if(o===void 0||i===void 0||d===void 0||h===void 0)throw console.error(a,o,i,d,h,this),new Error("wtf");s=s.Q(o,i,d,h),n=a[5];continue}if(a=L0.exec(n),a){const o=V.parseFloatX(a[1]),i=V.parseFloatX(a[2]),d=V.parseFloatX(a[3]),h=V.parseFloatX(a[4]),g=V.parseFloatX(a[5]),M=V.parseFloatX(a[6]);if(o===void 0||i===void 0||d===void 0||h===void 0||g===void 0||M===void 0)throw console.error(a,o,i,d,h,g,M,this),new Error("wtf");s=s.C(o,i,d,h,g,M),n=a[7];continue}}throw console.error(n),new Error("wtf")}return s&&r.push(s),r}static M(e,n){const r=new S;return r.M(e,n),r}#t=[];get pathShape(){return new z(this.#t)}#e;M(e,n,r=NaN){return V.assertFinite(e,n),this.#e={x:e,y:n,outgoingAngle:r},this}previous(){return this.#e??this.#t.at(-1)}H(e){const n=this.previous();return this.addCommand(new U(n.x,n.y,e,n.y)),this}V(e){const n=this.previous();return this.addCommand(new U(n.x,n.y,n.x,e)),this}L(e,n){const r=this.previous();return this.addCommand(new U(r.x,r.y,e,n)),this}Q(e,n,r,s){const a=this.previous();return this.addCommand(q.controlPoints(a.x,a.y,e,n,r,s)),this}Q_HV(e,n){const r=this.previous();return this.Q(e,r.y,e,n)}Q_VH(e,n){const r=this.previous();return this.Q(r.x,n,e,n)}Q_angles(e,n,r,s){const a=this.previous();if(s??=a.outgoingAngle,s===void 0)throw new Error("wtf");return this.addCommand(q.angles(a.x,a.y,s,e,n,r)),this}C(e,n,r,s,a,o){const i=this.previous();return this.addCommand(new r1(i.x,i.y,e,n,r,s,a,o)),this}circle(e,n,r="cw"){const s=this.previous(),a=s.x,o=s.y,i=Math.atan2(o-n,a-e),d=Math.hypot(o-n,a-e),h=r=="cw"?1:-1,g=i+Math.PI*2*h,M=V.makeLinear(0,i,1,g);function l(Q){switch(Q){case 0:case 1:return s;default:{const u=M(Q),f=V.polarToRectangular(d,u);return{x:e+f.x,y:n+f.y}}}}function m(Q){return l(Q)}return this.addParametricPath(m,8),this}arc(e,n,r,s,a){const o=this.previous(),i=o.x,d=o.y;let h=V.positiveModulo(Math.atan2(d-n,i-e),Math.PI*2);const g=Math.hypot(d-n,i-e);let M=V.positiveModulo(Math.atan2(s-n,r-e),Math.PI*2);const l=Math.hypot(s-n,r-e);a=="cw"?h>M&&(M+=Math.PI*2):h<M&&(h+=Math.PI*2);const m=Math.abs(h-M),k=Math.ceil(m*1.17+1e-4),Q=V.makeLinear(0,g,1,l),u=V.makeLinear(0,h,1,M);function f(p){switch(p){case 0:return o;case 1:return{x:r,y:s};default:{const y=V.polarToRectangular(Q(p),u(p));return{x:e+y.x,y:n+y.y}}}}return this.addParametricPath(f,k)}addParametricPath(e,n){if(n<=0)throw new Error("wtf");const r=1e-4/n,s=V.initializedArray(n+1,a=>{const o=a/n,i=e(o),d=p0(e,o,r);return{t:o,point:i,direction:d}});if(s.some(a=>!isFinite(a.direction))){const{x:a,y:o}=s[0].point;if(V.assertFinite(a,o),s.some(i=>i.point.x!=a||i.point.y!=o))throw new Error("Unable to create a path from this function.  Unable to compute the derivative.");for(let i=0;i<n;i++)this.Q(a,o,a,o)}else V.initializedArray(n,o=>({from:s[o],to:s[o+1]})).forEach(o=>{this.Q_angles(o.to.point.x,o.to.point.y,o.to.direction,o.from.direction)});return this}}function a0(c,e,n){if(!(e>=0&&e<=1))throw new Error("Expected 0 ≤ t ≤ 1");const r=Math.max(0,e-n),s=c(r),a=Math.min(1,e+n),o=c(a),i=o.x-s.x,d=o.y-s.y;return i==0&&d==0?NaN:Math.atan2(d,i)}function p0(c,e,n){const r=a0(c,e,n*2),s=a0(c,e,n*1),a=r-s;return s-a}const t1=" *",C="(-?[0-9]+\\.?[0-9]*(?:[eE][-+]?[0-9]+)?)",W="(?: *[, ] *|(?=-))",y0=new RegExp(`^M${t1}${C}${W}${C}(.*)$`),tt=new RegExp(`^m${t1}${C}${W}${C}(.*)$`),m0=new RegExp(`^L${t1}${C}${W}${C}(.*)$`),o0=new RegExp(`^${W}${C}${W}${C}(.*)$`),et=new RegExp(`^l${t1}${C}${W}${C}(.*)$`),nt=new RegExp(`^H${t1}${C}(.*)$`),st=new RegExp(`^h${t1}${C}(.*)$`),rt=new RegExp(`^V${t1}${C}(.*)$`),at=new RegExp(`^v${t1}${C}(.*)$`),M0=new RegExp(`^${W}${C}(.*)$`),ot=M0,g0=new RegExp(`^Q${t1}${C}${W}${C}${W}${C}${W}${C}(.*)$`),it=new RegExp(`^${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),ct=new RegExp(`^q${t1}${C}${W}${C}${W}${C}${W}${C}(.*)$`),L0=new RegExp(`^C${t1}${C}${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),i0=new RegExp(`^${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),Qt=new RegExp(`^c${t1}${C}${W}${C}${W}${C}${W}${C}${W}${C}${W}${C}(.*)$`),ht=new RegExp("^[zZ](.*)$");class dt extends Error{constructor(e,n){super(e),this.where=n}}class z{getLength(){const e=X0(N0(P0(this.rawPath)));let n=0;return e.forEach((r,s)=>{if(s>0){const a=e[s-1];if(r[0]!="C")throw new Error("wtf");const i=a.at(-2),d=a.at(-1);if(typeof i!="number"||typeof d!="number")throw new Error("wtf");const h=[i,d,...r.slice(1)],g=new B(h);n+=g.length()}}),n}reverse(){return new z(this.commands.toReversed().map(e=>e.reverse()))}static fromString(e){const n=this.fromJson(e);if(n)return n;let r=e,s=null;const a=l=>new dt(l,r),o=l=>{const m=V.parseFloatX(l);if(m===void 0)throw a(`Invalid number: "${l}"`);return m};let i=0,d=0;const h=[],g=l=>{h.push(l),i=l.x,d=l.y};let M;for(;r=r.replace(/^ */,""),r!="";){if(s=y0.exec(r)){i=o(s[1]),d=o(s[2]),M={x0:i,y0:d},r=s[3];continue}if(s=tt.exec(r)){for(i+=o(s[1]),d+=o(s[2]),M={x0:i,y0:d},r=s[3];s=o0.exec(r);){const l=U.relative(i,d,o(s[1]),o(s[2]));g(l),r=s[3]}continue}if(!M)throw a("Must start with an M command.");if(s=ht.exec(r)){if(i!=M.x0||d!=M.y0){const l=new U(i,d,M.x0,M.y0);g(l)}r=s[1];continue}if(s=m0.exec(r)){const l=o(s[1]),m=o(s[2]),k=new U(i,d,l,m);g(k),r=s[3];continue}if(s=et.exec(r)){for(;s;){const l=o(s[1]),m=o(s[2]),k=U.relative(i,d,l,m);g(k),r=s[3],s=o0.exec(r)}continue}if(s=nt.exec(r)){const l=o(s[1]),m=new U(i,d,l,d);g(m),r=s[2];continue}if(s=st.exec(r)){for(;s;){const l=o(s[1]),m=new U(i,d,i+l,d);g(m),r=s[2],s=ot.exec(r)}continue}if(s=rt.exec(r)){const l=o(s[1]),m=new U(i,d,i,l);g(m),r=s[2];continue}if(s=at.exec(r)){for(;s;){const l=o(s[1]),m=new U(i,d,i,d+l);g(m),r=s[2],s=M0.exec(r)}continue}if(s=g0.exec(r)){const l=o(s[1]),m=o(s[2]),k=o(s[3]),Q=o(s[4]),u=q.controlPoints(i,d,l,m,k,Q);g(u),r=s[5];continue}if(s=ct.exec(r)){for(;s;){const l=o(s[1]),m=o(s[2]),k=o(s[3]),Q=o(s[4]),u=q.relative(i,d,l,m,k,Q);g(u),r=s[5],s=it.exec(r)}continue}if(s=L0.exec(r)){for(;s;){const l=o(s[1]),m=o(s[2]),k=o(s[3]),Q=o(s[4]),u=o(s[5]),f=o(s[6]),p=new r1(i,d,l,m,k,Q,u,f);g(p),r=s[7],s=i0.exec(r)}continue}if(s=Qt.exec(r)){for(;s;){const l=o(s[1]),m=o(s[2]),k=o(s[3]),Q=o(s[4]),u=o(s[5]),f=o(s[6]),p=r1.relative(i,d,l,m,k,Q,u,f);g(p),r=s[7],s=i0.exec(r)}continue}throw a("Confused.")}return new this(h)}static fromJson(e){try{const r=JSON.parse(e).commands.map(s=>{switch(s.command){case"C":{const{x0:a,y0:o,x1:i,y1:d,x2:h,y2:g,x:M,y:l}=s;return new r1(a,o,i,d,h,g,M,l)}case"L":{const{x0:a,y0:o,x:i,y:d}=s;return new U(a,o,i,d)}case"Q":{const{x0:a,y0:o,x:i,y:d,creationInfo:h}=s;switch(h.source){case"angles":{const{angle0:g,angle:M}=h,l=q.angles(a,o,g,i,d,M);return(l.creationInfo.source!="angles"||l.creationInfo.success!=h.success)&&console.warn("different",s,l),l}case"controlPoints":{const{x1:g,y1:M}=s;return q.controlPoints(a,o,g,M,i,d)}case"line":return q.line4(a,o,i,d);default:throw new Error(`Unknown source: "${h.source}"`)}}default:throw new Error(`Unknown command: "${s.command}"`)}});return new z(r)}catch{return}}matchForMorph(e){const n=this.commands.map(i=>i.toCubic()),r=e.commands.map(i=>i.toCubic());if(n.length!=r.length){const{shorter:i,longer:d}=n.length<r.length?{shorter:n,longer:r}:{shorter:r,longer:n};if(i.length==0)throw new Error("can't morph something into nothing");const h=d.length/i.length,g=[];i.forEach((M,l)=>{const m=Math.round((l+1)*h);for(;g.length<m;)g.push(M)}),i.length=0,i.push(...g)}if(n.length!=r.length)throw new Error("wtf");function s(i){return z.cssifyPath(i.map(d=>new z([d]).rawPath).join())}const a=s(n),o=s(r);return[a,o]}commands;get endX(){return this.commands.at(-1)?.x}get endY(){return this.commands.at(-1)?.y}get startX(){return this.commands.at(0)?.x0}get startY(){return this.commands.at(0)?.y0}constructor(e){this.commands=[...e]}static cssifyPath(e){return`path('${e}')`}get cssPath(){return z.cssifyPath(this.rawPath)}makeElement(){const e=document.createElementNS("http://www.w3.org/2000/svg","path"),n=this.cssPath;if(e.style.d=n,e.style.d=="")throw console.error(n,e),new Error("wtf");return e}static needAnM(e,n){return n?!e||e.x!=n.x0||e.y!=n.y0:!1}get rawPath(){return this.splitOnMove().flatMap(e=>{const n=[`M ${G(e.startX)},${G(e.startY)}`];return e.commands.forEach(r=>n.push(r.asString)),e.startX==e.endX&&e.startY==e.endY&&n.push("Z"),n}).join(" ")}splitOnMove(){const e=[];let n=[];return this.commands.forEach(r=>{z.needAnM(n.at(-1),r)&&(n=[],e.push(n)),n.push(r)}),e.map(r=>new z(r))}static join(e){return new z(e.flatMap(({Δx:n,Δy:r,shape:s})=>s.translate(n,r).commands))}convertToCubics(){return new z(this.commands.map(e=>e.toCubic()))}translate(e,n){return new z(this.commands.map(r=>r.translate(e,n)))}transform(e){return new z(this.commands.map(n=>n.transform(e)))}static parametric(e,n){const r=e(0);return S.M(r.x,r.y).addParametricPath(e,n).pathShape}static glitchFreeParametric(e,n){const r=this.#e(e,n,0);return V.assertNonNullable(r)}static#t=new f0;static#e(e,n,r){if(r>0&&console.log(r),r>=4){console.log("⚝");return}const a=this.parametric(e,n).commands.map((d,h,g)=>{const M=h/g.length,l=(h+1)/g.length;return{command:d,initialT:M,finalT:l}});let o=0;const i=d=>{const h=new this([d]);this.#t.d=h.rawPath;const g=this.#t.length,M=Math.hypot(d.x0-d.x,d.y0-d.y),l=g/M;return l<2||!isFinite(l)};for(;o<a.length;){const d=a[o].command;if(i(d))o++;else{const h=Math.max(0,o-1);let g=o+1;for(;g<a.length;){const p=a[g].command;if(g++,i(p))break}const M=a[h].initialT,l=a[g-1].finalT,m=V.makeLinear(0,M,1,l),k=p=>e(m(p)),Q=g-h,u=Q+1,f=this.#e(k,u,r+1);if(f===void 0){if(r>0)return;const p=a[o],{x0:y,y0:v,x:L,y:_}=p.command;p.command=q.line4(y,v,L,_),o++}else a.splice(h,Q,...f.commands.map((p,y,v)=>{const L=m(y/v.length),_=m((y+1)/v.length);return{command:p,initialT:L,finalT:_}})),o+=u}}return new z(a.map(d=>d.command))}static fixAngleRounding(e){return e+400-400}static toDegrees(e){return Math.round(e*V.degreesPerRadian*100)/100}dump(){const e=this.commands.map((n,r)=>{const{x0:s,y0:a,x:o,y:i,incomingAngle:d,outgoingAngle:h,command:g}=n,M=document.createElementNS("http://www.w3.org/2000/svg","path");M.setAttribute("d",new z([n]).rawPath);const l=M.getTotalLength(),m=this.commands[r-1],Q=z.needAnM(m,n)?{}:{difference:z.toDegrees(V.angleBetween(m.outgoingAngle,d))};return{x0:s,y0:a,x:o,y:i,incomingAngle:z.toDegrees(d),outgoingAngle:z.toDegrees(h),length:l,c:g,...Q}});console.table(e),console.log(this.rawPath),console.log(JSON.stringify(this))}}function lt(c,e){if(V.assertFinite(c.x0,c.y0,c.angle,e.x0,e.y0,e.angle),isNaN(c.angle)||isNaN(e.angle)||c.angle==e.angle)return;const n=Math.tan(c.angle),r=Math.tan(e.angle),s=Math.abs(n)*100>Number.MAX_SAFE_INTEGER,a=Math.abs(r)*100>Number.MAX_SAFE_INTEGER;if(s&&a)return;const o=Math.atan2(e.y0-c.y0,e.x0-c.x0),i=V.angleBetween(c.angle,o),d=V.angleBetween(e.angle,o);if(i==0||Math.abs(d)==Math.PI){if(Math.abs(i)==Math.PI||d==0)return;const M=(c.x0+e.x0)/2,l=(c.y0+e.y0)/2;return{x:M,y:l}}const h=Math.sign(i),g=Math.sign(d);if(!(h!=g||h==0)&&!(Math.abs(d)<=Math.abs(i)+V.radiansPerDegree))if(s||a){const M=s?c.x0:e.x0,l=s?{...e,slope:r}:{...c,slope:n},m=l.slope*(M-l.x0)+l.y0;return{x:M,y:m}}else{const M=(e.y0-r*e.x0-c.y0+n*c.x0)/(n-r),l=n*(M-c.x0)+c.y0;return{x:M,y:l}}}function ut(c){if(!(c instanceof q))throw new Error("wtf");if(c.creationInfo.source!="angles")throw new Error("wtf");return c}class E1{constructor(e,n=16,r){this.f=e;const s=z.parametric(e,n);this.#e=s.commands.map((a,o,i)=>{const d=o/i.length,h=(o+1)/i.length;return this.#r(d,h,ut(a))}).sort((a,o)=>a.metric-o.metric),r===void 0&&(E1.#t.load(s),r=E1.#t.getBBox()),typeof r!="number"&&(r=Math.hypot(r.height,r.width)),this.#n=.001*r}static#t=new f0;#e;#n;get commands(){return this.#e}#a(e){this.#e.splice(this.#e.findLastIndex(n=>n.metric<=e.metric)+1,0,e)}#r(e,n,r){let a=0;{const d=[{x:r.x0,y:r.y0}];for(let h=1;h<4;h++){const g=h/4,M=V.lerp(e,n,g);d.push(this.f(M))}d.push({x:r.x,y:r.y}),d.forEach((h,g)=>{const M=d[g+1];M&&(a+=Math.hypot(h.x-M.x,h.y-M.y))})}const o=E1.#t.measure(r),i=Math.abs(a-o);return r.creationInfo.success,{startT:e,endT:n,command:r,polyLineLength:a,curveLength:o,metric:i}}add(e){for(let n=0;n<e;n++)this.addOne()}addOne(){const e=this.#e.pop(),{startT:n,endT:r}=e,s=(n+r)/2,a=this.f(s),o=1e-4*(s-n),i=p0(this.f,s,o),d=q.angles(e.command.x0,e.command.y0,e.command.requestedIncomingAngle,a.x,a.y,i),h=this.#r(n,s,d);this.#a(h);const g=q.angles(a.x,a.y,i,e.command.x,e.command.y,e.command.requestedOutgoingAngle),M=this.#r(s,r,g);return this.#a(M),{toSplit:e,firstCommandInfo:h,secondCommandInfo:M}}done(){return this.commands.at(-1).metric<this.#n}go(e=50){for(let n=0;n<e&&!this.done();n++)this.addOne()}get pathShape(){return new z(this.#e.toSorted((e,n)=>e.startT-n.startT).map(({command:e})=>e))}summarize(){function e(n){n.sort((g,M)=>g-M);const r=n.length;function s(g){const l=(n.length-1)*g;if(Number.isInteger(l))return n[l];{const m=Math.floor(l),k=m+1,Q=l-m;return V.lerp(n[m],n[k],Q)}}if(n.length<2)throw new Error("wtf");const a=V.initializedArray(5,g=>s(g/4));let o=0,i=0;n.forEach(g=>{o+=g,i+=g*g});const d=o/r,h=Math.sqrt((i-r*d*d)/(r-1));return{quartiles:a,mean:d,standardDeviation:h}}return{polyLineLength:e(this.#e.map(({polyLineLength:n})=>n)),curveLength:e(this.#e.map(({curveLength:n})=>n)),metric:e(this.#e.map(({metric:n})=>n)),tCoverage:e(this.#e.map(({startT:n,endT:r})=>r-n)),generation:e(this.#e.map(({startT:n,endT:r})=>-Math.log2(r-n))),count:this.#e.length}}dump(){console.table(this.commands.map(({startT:e,endT:n,metric:r,curveLength:s})=>({startT:e,tCoverage:n-e,generation:-Math.log2(n-e),metric:r,curveLength:s})))}static chordRatio(e){const n=V.FULL_CIRCLE/e,r=2*Math.sin(n/2);return n/r}}window.ParametricToPath=E1;const ft=-26,pt=8,yt=16,mt=1,Mt=0,gt=21,Lt=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 5,-19 Q 4,-19 4,-20 Q 4,-21 5,-21 Q 5.5857864,-21 6,-20 Q 6.3007391,-19.273951 6,-18 Q 5.7849593,-17.089073 5,-16 Q 4.5811388,-15.418861 4,-15","advance":10},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 9,-21 L 1,0 M 9,-21 L 17,0 M 4,-7 L 14,-7","advance":18},{"key":"B","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.618034,-11.145898 13,-11 M 4,-11 L 13,-11 Q 14.381966,-11 16,-10 Q 16.503548,-9.6887901 17,-9 Q 17.784959,-7.9109272 18,-7 Q 18.354102,-5.5 18,-4 Q 17.784959,-3.0890728 17,-2 Q 16.503548,-1.3112099 16,-1 Q 14.381966,0.0000000000000002220446 13,0 L 4,0","advance":21},{"key":"C","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.662278,-3.9188612 18,-5","advance":21},{"key":"D","d":"M 4,-21 L 4,0 M 4,-21 L 11,-21 Q 12.381966,-21 14,-20 Q 15.007096,-19.37758 16,-18 Q 16.403407,-17.440302 17,-16 Q 17.84371,-13.963105 18,-13 Q 18.405694,-10.5 18,-8 Q 17.84371,-7.0368952 17,-5 Q 16.403407,-3.5596976 16,-3 Q 15.007096,-1.6224198 14,-1 Q 12.381966,0.0000000000000002220446 11,0 L 4,0","advance":21},{"key":"E","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11 M 4,0 L 17,0","advance":19},{"key":"F","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11","advance":18},{"key":"G","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.784959,-4.0890728 18,-5 Q 18.354102,-6.5 18,-8 M 13,-8 L 18,-8","advance":21},{"key":"H","d":"M 4,-21 L 4,0 M 18,-21 L 18,0 M 4,-11 L 18,-11","advance":22},{"key":"I","d":"M 4,-21 L 4,0","advance":8},{"key":"J","d":"M 12,-21 L 12,-5 Q 12,-3.618034 11,-2 Q 10.68879,-1.4964518 10,-1 Q 8.9109272,-0.21504074 8,0 Q 7,0.23606798 6,0 Q 5.0890728,-0.21504074 4,-1 Q 3.3112099,-1.4964518 3,-2 Q 2.3041135,-3.125968 2,-5 Q 1.8377223,-6 2,-7","advance":16},{"key":"K","d":"M 4,-21 L 4,0 M 18,-21 L 4,-7 M 9,-12 L 18,0","advance":21},{"key":"L","d":"M 4,-21 L 4,0 L 16,0","advance":17},{"key":"M","d":"M 4,-21 L 4,0 M 4,-21 L 12,0 M 20,-21 L 12,0 M 20,-21 L 20,0","advance":24},{"key":"N","d":"M 4,-21 L 4,0 M 4,-21 L 18,0 M 18,-21 L 18,0","advance":22},{"key":"O","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z","advance":22},{"key":"P","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.354102,-15.5 18,-14 Q 17.784959,-13.089073 17,-12 Q 16.503548,-11.31121 16,-11 Q 14.381966,-10 13,-10 L 4,-10","advance":21},{"key":"Q","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z M 12,-4 L 18,2","advance":22},{"key":"R","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.381966,-11 13,-11 L 4,-11 M 11,-11 L 18,0","advance":21},{"key":"S","d":"M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"T","d":"M 8,-21 L 8,0 M 1,-21 L 15,-21","advance":16},{"key":"U","d":"M 4,-21 L 4,-6 Q 4,-4.618034 5,-3 Q 5.763932,-1.763932 7,-1 Q 8.125968,-0.30411354 10,0 Q 11,0.16227766 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.236068,-1.763932 17,-3 Q 18,-4.618034 18,-6 L 18,-21","advance":22},{"key":"V","d":"M 1,-21 L 9,0 M 17,-21 L 9,0","advance":18},{"key":"W","d":"M 2,-21 L 7,0 M 12,-21 L 7,0 M 12,-21 L 17,0 M 22,-21 L 17,0","advance":24},{"key":"X","d":"M 3,-21 L 17,0 M 17,-21 L 3,0","advance":20},{"key":"Y","d":"M 1,-21 L 9,-11 L 9,0 M 17,-21 L 9,-11","advance":18},{"key":"Z","d":"M 17,-21 L 3,0 M 3,-21 L 17,-21 M 3,0 L 17,0","advance":20},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 18,7","advance":18},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 15,-14 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"b","d":"M 4,-21 L 4,0 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"c","d":"M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"d","d":"M 15,-21 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"e","d":"M 3,-8 L 15,-8 Q 15.472136,-8 15,-10 Q 14.784959,-10.910927 14,-12 Q 13.581139,-12.581139 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"f","d":"M 10,-21 Q 9,-21.236068 8,-21 Q 6.575679,-20.663763 6,-20 Q 5,-18.84699 5,-17 L 5,0 M 2,-14 L 9,-14","advance":12},{"key":"g","d":"M 15,-14 L 15,2 Q 15,3.381966 14,5 Q 13.68879,5.5035482 13,6 Q 11.910927,6.7849593 11,7 Q 9.5,7.354102 8,7 Q 6.881966,6.736068 6,6 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"h","d":"M 4,-21 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"i","d":"M 3,-21 Q 3,-20 4,-20 Q 5,-20 5,-21 Q 5,-22 4,-22 Q 3,-22 3,-21 Z M 4,-14 L 4,0","advance":8},{"key":"j","d":"M 5,-21 Q 5,-20 6,-20 Q 7,-20 7,-21 Q 7,-22 6,-22 Q 5,-22 5,-21 Z M 6,-14 L 6,3 Q 6,4.8469903 5,6 Q 4.424321,6.6637634 3,7 Q 2,7.236068 1,7","advance":10},{"key":"k","d":"M 4,-21 L 4,0 M 14,-14 L 4,-4 M 8,-8 L 15,0","advance":17},{"key":"l","d":"M 4,-21 L 4,0","advance":8},{"key":"m","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0 M 15,-10 Q 16.256584,-11.743416 18,-13 Q 19.089073,-13.784959 20,-14 Q 21.5,-14.354102 23,-14 Q 24.424321,-13.663763 25,-13 Q 26,-11.84699 26,-10 L 26,0","advance":30},{"key":"n","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"o","d":"M 8,-14 Q 6.9188612,-13.662278 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.37758,-1.9929036 15,-3 Q 15.695886,-4.125968 16,-6 Q 16.162278,-7 16,-8 Q 15.695886,-9.874032 15,-11 Q 14.37758,-12.007096 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Z","advance":19},{"key":"p","d":"M 4,-14 L 4,7 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"q","d":"M 15,-14 L 15,7 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"r","d":"M 4,-14 L 4,0 M 4,-8 Q 4.145898,-9.618034 5,-11 Q 5.6224198,-12.007096 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14","advance":13},{"key":"s","d":"M 14,-11 Q 13.914214,-12.207107 13,-13 Q 12.272122,-13.631285 10,-14 Q 8.5,-14.243416 7,-14 Q 4.7278782,-13.631285 4,-13 Q 3,-12.132705 3,-11 Q 3,-10 4,-9 Q 4.75,-8.25 6,-8 L 11,-7 Q 12.25,-6.75 13,-6 Q 13.690983,-5.309017 14,-4 Q 14.118034,-3.5 14,-3 Q 13.663763,-1.575679 13,-1 Q 12.272122,-0.36871462 10,0 Q 8.5,0.24341649 7,0 Q 4.7278782,-0.36871462 4,-1 Q 3.0857864,-1.7928932 3,-3","advance":17},{"key":"t","d":"M 5,-21 L 5,-4 Q 5,-2.1530097 6,-1 Q 6.575679,-0.33623659 8,0 Q 9,0.23606798 10,0 M 2,-14 L 9,-14","advance":12},{"key":"u","d":"M 4,-14 L 4,-4 Q 4,-2.1530097 5,-1 Q 5.575679,-0.33623659 7,0 Q 8.5,0.35410197 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.743416,-2.2565835 15,-4 M 15,-14 L 15,0","advance":19},{"key":"v","d":"M 2,-14 L 8,0 M 14,-14 L 8,0","advance":16},{"key":"w","d":"M 3,-14 L 7,0 M 11,-14 L 7,0 M 11,-14 L 15,0 M 19,-14 L 15,0","advance":22},{"key":"x","d":"M 3,-14 L 14,0 M 14,-14 L 3,0","advance":17},{"key":"y","d":"M 2,-14 L 8,0 M 14,-14 L 8,0 Q 6.7047906,3.0221553 6,4 Q 5.1622777,5.1622777 4,6 Q 2.9109272,6.7849593 2,7 Q 1.5,7.118034 1,7","advance":16},{"key":"z","d":"M 14,-14 L 3,0 M 3,-14 L 14,-14 M 3,0 L 14,0","advance":17},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),vt={top:ft,bottom:pt,spaceWidth:yt,strokeWidth:mt,kerning:Mt,mHeight:gt,letters:Lt},xt=-25,wt=12,kt=16,Et=1,St=0,_t=21,bt=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 2,-14 L 2,-10","advance":4},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 3.0619516,-1.7654114 5,-4 Q 6.5336244,-5.7682838 8,-8 Q 10.09173,-11.183459 12,-15 L 15,-21 L 15,0 Q 14.700877,-1.566959 14,-3 Q 13.320601,-4.3891255 12,-6 Q 11.09902,-7.0990195 10,-8 Q 7.8885621,-9.7309651 7,-10 Q 5.8445752,-10.349834 5,-10 Q 4.2928932,-9.7071068 4,-9 Q 3.6992609,-8.2739515 4,-7 Q 4.2150407,-6.0890728 5,-5 Q 5.6349159,-4.1191013 7,-3 Q 8.6108745,-1.6793988 10,-1 Q 12.044639,0.0000000000000002220446 13,0 L 18,0","advance":20},{"key":"B","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 16.777863,-21.288507 18,-21 Q 19.309017,-20.690983 20,-20 Q 20.690983,-19.309017 21,-18 Q 21.236068,-17 21,-16 Q 20.784959,-15.089073 20,-14 Q 19.581139,-13.418861 19,-13 Q 18.440302,-12.596593 17,-12 Q 15.535534,-11.393398 14,-11 M 13,-11 Q 13.5,-11.081139 14,-11 Q 15.874032,-10.695886 17,-10 Q 17.503548,-9.6887901 18,-9 Q 18.784959,-7.9109272 19,-7 Q 19.354102,-5.5 19,-4 Q 18.784959,-3.0890728 18,-2 Q 17.581139,-1.4188612 17,-1 Q 15.910927,-0.21504074 15,0 Q 13.5,0.35410197 12,0 Q 10.690983,-0.30901699 10,-1 Q 9.1666667,-1.8333333 9,-3","advance":23},{"key":"C","d":"M 12,-15 Q 11.792893,-14.5 12,-14 Q 12.292893,-13.292893 13,-13 Q 13.726049,-12.699261 15,-13 Q 16.309017,-13.309017 17,-14 Q 17.690983,-14.690983 18,-16 Q 18.236068,-17 18,-18 Q 17.690983,-19.309017 17,-20 Q 16.309017,-20.690983 15,-21 Q 13.777863,-21.288507 12,-21 Q 10.125968,-20.695886 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 13.007096,-1.6224198 14,-3 Q 14.662278,-3.9188612 15,-5","advance":20},{"key":"D","d":"M 13,-21 Q 11.833333,-20.833333 11,-20 Q 10.58711,-19.58711 10,-18 Q 9.3933406,-16.360043 9,-14 L 8,-8 Q 7.8366366,-7.0198193 7,-5 Q 6.4034072,-3.5596976 6,-3 Q 5.1622777,-1.8377223 4,-1 Q 2.9109272,-0.21504074 2,0 Q 0.72604853,0.30073915 0,0 Q -0.70710678,-0.29289322 -1,-1 Q -1.4142136,-2 -1,-3 Q -0.70710678,-3.7071068 0,-4 Q 0.72604853,-4.3007391 2,-4 Q 3.309017,-3.690983 4,-3 L 6,-1 Q 6.6125741,-0.38742589 9,0 Q 10.5,0.24341649 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.007096,-1.6224198 17,-3 Q 18.197734,-4.6617677 19,-7 Q 19.709727,-9.0685242 20,-12 Q 20.245983,-14.484185 20,-16 Q 19.695886,-17.874032 19,-19 Q 18.68879,-19.503548 18,-20 Q 16.910927,-20.784959 16,-21 Q 14.089073,-21.451109 13,-21 Q 11.585786,-20.414214 11,-19 Q 10.766804,-18.437016 11,-17 Q 11.232017,-15.570249 12,-14 Q 12.679399,-12.610875 14,-11 Q 14.90098,-9.9009805 16,-9 Q 17.081639,-8.1132681 19,-7 Q 19.968871,-6.4377423 21,-6","advance":23},{"key":"E","d":"M 14,-17 Q 13.792893,-16.5 14,-16 Q 14.292893,-15.292893 15,-15 Q 16,-14.585786 17,-15 Q 17.707107,-15.292893 18,-16 Q 18.300739,-16.726049 18,-18 Q 17.663763,-19.424321 17,-20 Q 16.272122,-20.631285 14,-21 Q 12,-21.324555 10,-21 Q 7.7278782,-20.631285 7,-20 Q 6.3362366,-19.424321 6,-18 Q 5.645898,-16.5 6,-15 Q 6.2150407,-14.089073 7,-13 Q 7.4964518,-12.31121 8,-12 Q 9.381966,-11.145898 11,-11 Q 9.5,-11.243416 8,-11 Q 6.125968,-10.695886 5,-10 Q 4.4964518,-9.6887901 4,-9 Q 3.2150407,-7.9109272 3,-7 Q 2.645898,-5.5 3,-4 Q 3.2150407,-3.0890728 4,-2 Q 4.4964518,-1.3112099 5,-1 Q 6.125968,-0.30411354 8,0 Q 9.5,0.24341649 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.007096,-1.6224198 16,-3 Q 16.662278,-3.9188612 17,-5","advance":20},{"key":"F","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5 M 9,-11 L 18,-11","advance":20},{"key":"G","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 4.0054842,-2.4454712 6,-5 Q 7.7042607,-7.1827769 9,-10 Q 9.3445349,-10.749095 10,-13 Q 10.879306,-16.019586 11,-17 Q 11.284702,-19.312668 11,-20 Q 10.707107,-20.707107 10,-21 Q 9.5,-21.207107 9,-21 Q 8.6019102,-20.835106 8,-20 Q 7.2150407,-18.910927 7,-18 Q 6.645898,-16.5 7,-15 Q 7.309017,-13.690983 8,-13 Q 8.690983,-12.309017 10,-12 Q 11.629516,-11.615323 14,-12 Q 15.874032,-12.304114 17,-13 Q 17.503548,-13.31121 18,-14 Q 18.662278,-14.918861 19,-16 L 19,-10 Q 19,-7.9145363 18,-5 Q 17.598867,-3.8308838 17,-3 Q 16.007096,-1.6224198 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":23},{"key":"H","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 7,-9 L 16,-12 Q 16.650413,-12.216804 18,-13 Q 19.918361,-14.113268 21,-15 Q 22.365084,-16.119101 23,-17 Q 23.784959,-18.089073 24,-19 Q 24.15037,-19.636976 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.5,-21.207107 22,-21 Q 21.20382,-20.670212 20,-19 Q 19.193186,-17.880605 18,-15 Q 16.866964,-12.26461 16,-9 Q 15.194907,-5.9683709 15,-4 Q 14.760254,-1.5787985 15,-1 Q 15.292893,-0.29289322 16,0 Q 16.363024,0.15036957 17,0 Q 17.910927,-0.21504074 19,-1 Q 19.440449,-1.3174579 20,-2 Q 21.148529,-3.4009805 22,-5","advance":24},{"key":"I","d":"M 14,-5 Q 12.90098,-5.9009805 12,-7 Q 11.113268,-8.081639 10,-10 Q 9.4005886,-11.032893 9,-12 Q 8.1562904,-14.036895 8,-15 Q 7.7114926,-16.777863 8,-18 Q 8.2150407,-18.910927 9,-20 Q 9.6019102,-20.835106 10,-21 Q 11,-21.414214 12,-21 Q 12.39809,-20.835106 13,-20 Q 13.784959,-18.910927 14,-18 Q 14.209277,-17.11349 14,-15 Q 13.757083,-12.546781 13,-10 Q 12.519554,-8.3838089 11,-5 Q 10.270239,-3.3749372 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":17},{"key":"J","d":"M 10,3 Q 8.8438171,1.604122 8,0 Q 6.7160888,-2.4407544 6,-5 Q 5.2851244,-7.5549099 5,-11 Q 4.6711435,-14.973495 5,-17 Q 5.3687146,-19.272122 6,-20 Q 6.575679,-20.663763 8,-21 Q 9.2739515,-21.300739 10,-21 Q 10.513394,-20.787345 11,-20 Q 11.695886,-18.874032 12,-17 Q 12.184487,-15.863139 12,-14 Q 11.805093,-12.031629 11,-9 Q 9.5,-4.5 8,0 Q 7,3 6,6 Q 5.5,7.5 5,9 Q 4.2928932,10.707107 4,11 Q 2.8603796,12.13962 2,12 Q 1.372001,11.89809 1,11 Q 0.7668044,10.437016 1,9 Q 1.2320166,7.570249 2,6 Q 2.6793988,4.6108745 4,3 Q 4.9009805,1.9009805 6,1 Q 7.081639,0.1132681 9,-1 Q 10.937742,-2.1245155 13,-3","advance":15},{"key":"K","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 24,-18 Q 24.414214,-19 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.636976,-21.15037 22,-21 Q 21.089073,-20.784959 20,-20 Q 18.7167,-19.075049 18,-18 L 16,-15 Q 15.2833,-13.924951 14,-13 Q 12.910927,-12.215041 12,-12 Q 11,-11.763932 10,-12 M 12,-12 Q 13,-10.801787 13,-10 L 13,-3 Q 13,-2.3874259 14,-1 Q 14.60191,-0.16489419 15,0 Q 15.363024,0.15036957 16,0 Q 16.910927,-0.21504074 18,-1 Q 18.440449,-1.3174579 19,-2 Q 20.148529,-3.4009805 21,-5","advance":24},{"key":"L","d":"M 4,-9 Q 5,-8.8768944 6,-9 Q 8.410165,-9.2967049 10,-10 Q 11.217197,-10.538451 13,-12 Q 14.365084,-13.119101 15,-14 Q 15.784959,-15.089073 16,-16 Q 16.354102,-17.5 16,-19 Q 15.618034,-20.618034 15,-21 Q 14.197453,-21.496001 13,-21 Q 12.60191,-20.835106 12,-20 Q 11.401133,-19.169116 11,-18 Q 11,-18 10,-13 Q 9.5,-10.5 9,-8 Q 8.5665179,-6.3676952 8,-5 Q 7.4034072,-3.5596976 7,-3 Q 6.1622777,-1.8377223 5,-1 Q 3.9109272,-0.21504074 3,0 Q 1.7260485,0.30073915 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12,0.16227766 13,0 Q 14.874032,-0.30411354 16,-1 Q 17.236068,-1.763932 18,-3","advance":19},{"key":"M","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 15.5,-21.118034 16,-21 Q 17.309017,-20.690983 18,-20 Q 18.690983,-19.309017 19,-18 Q 19.139518,-17.408993 19,-16 Q 18.902173,-15.012043 18,-11 Q 17.472066,-8.6522317 17,-7 L 15,0 M 17,-7 L 20,-15 Q 20.957715,-17.553907 22,-19 Q 22.418861,-19.581139 23,-20 Q 24.089073,-20.784959 25,-21 Q 25.5,-21.118034 26,-21 Q 27.309017,-20.690983 28,-20 Q 28.690983,-19.309017 29,-18 Q 29.139518,-17.408993 29,-16 Q 28.772694,-13.704427 28,-11 L 26,-4 Q 25.492747,-2.224616 26,-1 Q 26.292893,-0.29289322 27,0 Q 27.363024,0.15036957 28,0 Q 28.910927,-0.21504074 30,-1 Q 30.440449,-1.3174579 31,-2 Q 32.148529,-3.4009805 33,-5","advance":33},{"key":"N","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 16,-21.236068 17,-21 Q 18.309017,-20.690983 19,-20 Q 19.690983,-19.309017 20,-18 Q 20.139518,-17.408993 20,-16 Q 19.772694,-13.704427 19,-11 L 17,-4 Q 16.492747,-2.224616 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"O","d":"M 12,-21 Q 10.381966,-20.854102 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 12.730525,-1.4514891 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.717553,-7.2364722 17,-8 Q 17.760742,-10.056481 18,-12 Q 18.280006,-14.274522 18,-16 Q 17.695886,-17.874032 17,-19 Q 16.68879,-19.503548 16,-20 Q 14.910927,-20.784959 14,-21 Q 12.726049,-21.300739 12,-21 Q 10.585786,-20.414214 10,-19 Q 9.6502066,-18.155524 10,-16 Q 10.232017,-14.570249 11,-13 Q 11.679399,-11.610875 13,-10 Q 13.90098,-8.9009805 15,-8 Q 16.081639,-7.1132681 18,-6 Q 18.968871,-5.4377423 20,-5","advance":21},{"key":"P","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.963105,-21.480846 20,-21 Q 20.910927,-20.784959 22,-20 Q 22.581139,-19.581139 23,-19 Q 23.784959,-17.910927 24,-17 Q 24.354102,-15.5 24,-14 Q 23.784959,-13.089073 23,-12 Q 22.581139,-11.418861 22,-11 Q 20.910927,-10.215041 20,-10 Q 18.5,-9.645898 17,-10 Q 16.089073,-10.215041 15,-11 Q 14.418861,-11.418861 14,-12","advance":25},{"key":"Q","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.767983,-12.570249 17,-11 Q 16.320601,-9.6108745 15,-8 Q 13.198039,-5.801961 11,-4 Q 9.918361,-3.1132681 8,-2 Q 6.9671065,-1.4005886 6,-1 Q 3.9631048,-0.1562904 3,0 Q 1.562984,0.2331956 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12.5,0.24341649 14,0 Q 15.874032,-0.30411354 17,-1 Q 18.236068,-1.763932 19,-3","advance":22},{"key":"R","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.370484,-21.384677 19,-21 Q 19.910927,-20.784959 21,-20 Q 21.581139,-19.581139 22,-19 Q 22.784959,-17.910927 23,-17 Q 23.354102,-15.5 23,-14 Q 22.784959,-13.089073 22,-12 Q 21.581139,-11.418861 21,-11 Q 19.910927,-10.215041 19,-10 Q 17.777863,-9.7114926 16,-10 Q 14.418861,-10.256584 13,-11 Q 13.581139,-10.581139 14,-10 Q 15,-8.6125741 15,-8 L 15,-3 Q 15,-2 16,-1 Q 17,-0.0000000000000001110223 18,0 Q 18.612574,0.000000000000000034004694 20,-1 Q 20.440449,-1.3174579 21,-2 Q 22.148529,-3.4009805 23,-5","advance":25},{"key":"S","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 2.7079677,-1.5102743 4,-3 Q 4.9224409,-4.0635833 7,-7 Q 8.440881,-9.0365375 9,-10 Q 10.198823,-12.065787 11,-14 Q 11.84371,-16.036895 12,-17 Q 12.349793,-19.155524 12,-20 Q 11.707107,-20.707107 11,-21 Q 10.5,-21.207107 10,-21 Q 9.6019102,-20.835106 9,-20 Q 8.2150407,-18.910927 8,-18 Q 7.763932,-17 8,-16 Q 8.2150407,-15.089073 9,-14 Q 9.9249506,-12.7167 11,-12 L 14,-10 Q 15.075049,-9.2833004 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.236068,-5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":20},{"key":"T","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":19},{"key":"U","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.309017,-1.690983 7,-1 Q 7.690983,-0.30901699 9,0 Q 10,0.23606798 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.581139,-1.4188612 14,-2 Q 14.647421,-2.898248 16,-6 Q 18.071616,-10.750654 19,-14 L 21,-21 M 19,-14 Q 18.420128,-12.019968 18,-10 Q 17.163856,-5.9798285 17,-4 Q 16.79306,-1.4995966 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"V","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.7572653,-3.0282406 6,-2 Q 6.381966,-0.38196601 7,0 Q 7.5527864,0.34164079 9,0 Q 9.9109272,-0.21504074 11,-1 Q 12.321348,-1.9523738 14,-4 Q 14.886732,-5.081639 16,-7 Q 17.198823,-9.065787 18,-11 Q 18.425612,-12.027518 19,-14 Q 19.879306,-17.019586 20,-18 Q 20.189802,-19.541778 20,-20 Q 19.707107,-20.707107 19,-21 Q 18.5,-21.207107 18,-21 Q 17.60191,-20.835106 17,-20 Q 16.215041,-18.910927 16,-18 Q 15.807662,-17.185242 16,-16 Q 16.304114,-14.125968 17,-13 Q 17.62242,-11.992904 19,-11 Q 19.918861,-10.337722 21,-10","advance":23},{"key":"W","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.155957,-17.339355 9,-15 L 8,0 M 18,-21 L 8,0 M 18,-21 L 16,0 M 30,-21 Q 28.918861,-20.662278 28,-20 Q 26.938048,-19.234589 25,-17 Q 23.163318,-14.882287 22,-13 Q 20.601984,-10.737962 19,-7 L 16,0","advance":28},{"key":"X","d":"M 8,-15 Q 7,-14.585786 6,-15 Q 5.2928932,-15.292893 5,-16 Q 4.6992609,-16.726049 5,-18 Q 5.309017,-19.309017 6,-20 Q 6.690983,-20.690983 8,-21 Q 9,-21.236068 10,-21 Q 11.309017,-20.690983 12,-20 Q 12.690983,-19.309017 13,-18 Q 13.343404,-16.545318 13,-15 L 11,-6 Q 10.656596,-4.4546824 11,-3 Q 11.309017,-1.690983 12,-1 Q 12.690983,-0.30901699 14,0 Q 15,0.23606798 16,0 Q 17.309017,-0.30901699 18,-1 Q 18.690983,-1.690983 19,-3 Q 19.300739,-4.2739515 19,-5 Q 18.707107,-5.7071068 18,-6 Q 17,-6.4142136 16,-6 M 23,-18 Q 23.414214,-19 23,-20 Q 22.707107,-20.707107 22,-21 Q 21.273951,-21.300739 20,-21 Q 19.089073,-20.784959 18,-20 Q 17.119101,-19.365084 16,-18 Q 14.543967,-16.223925 14,-15 L 10,-6 Q 9.4560335,-4.7760753 8,-3 Q 6.8808987,-1.6349159 6,-1 Q 4.9109272,-0.21504074 4,0 Q 2.7260485,0.30073915 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3","advance":24},{"key":"Y","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.2150407,-2.0890728 7,-1 Q 7.6019102,-0.16489419 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.880899,-1.6349159 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.783196,-7.3495867 17,-8 L 19,-14 M 21,-21 L 19,-14 Q 17.464952,-8.6273337 16,-4 Q 14.740258,-0.020863203 14,2 Q 12.914109,4.9644227 12,7 Q 10.369801,10.630199 10,11 Q 8.8603796,12.13962 8,12 Q 7.372001,11.89809 7,11 Q 6.7668044,10.437016 7,9 Q 7.2320166,7.570249 8,6 Q 8.6793988,4.6108745 10,3 Q 11.351471,1.3514707 13,0 Q 13.909902,-0.74594117 16,-2 L 21,-5","advance":23},{"key":"Z","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.84371,-13.036895 17,-11 Q 15.806814,-8.1193952 15,-7 Q 14.234589,-5.9380484 12,-4 Q 9.8822874,-2.1633176 8,-1 Q 6.618034,-0.14589803 6,0 Q 4.0890728,0.45110872 3,0 Q 2.2928932,-0.29289322 2,-1 Q 1.5857864,-2 2,-3 Q 2.2928932,-3.7071068 3,-4 Q 4.0890728,-4.4511087 6,-4 Q 6.9109272,-3.7849593 8,-3 Q 8.5811388,-2.5811388 9,-2 Q 9.7849593,-0.91092721 10,0 Q 10.288507,1.2221371 10,3 Q 9.8437096,3.9631048 9,6 Q 8.5994114,6.9671065 8,8 Q 6.5311289,10.531129 6,11 Q 4.7325556,12.118877 4,12 Q 3.372001,11.89809 3,11 Q 2.7668044,10.437016 3,9 Q 3.2320166,7.570249 4,6 Q 4.6793988,4.6108745 6,3 Q 7.3514707,1.3514707 9,0 Q 10.563458,-1.281729 12,-2 L 18,-5","advance":21},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 20,7","advance":20},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"b","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.3775802,-1.9929036 7,-3 Q 7.6958865,-4.125968 8,-6 Q 8.2434165,-7.5 8,-9 Q 7.9460321,-6.861508 9,-5 Q 9.4332814,-4.2347425 10,-4 Q 10.726049,-3.6992609 12,-4 Q 13.118034,-4.263932 14,-5","advance":14},{"key":"c","d":"M 7,-7 Q 7.2071068,-7.5 7,-8 Q 6.7071068,-8.7071068 6,-9 Q 5.2739515,-9.3007391 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4.6856967,0.39793901 6,0 Q 7.4342585,-0.43425855 9,-2 Q 10.3,-3.3 11,-5","advance":11},{"key":"d","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 14,-21 M 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"e","d":"M 1,-2 Q 2.0811388,-2.3377223 3,-3 Q 3.5811388,-3.4188612 4,-4 Q 4.7849593,-5.0890728 5,-6 Q 5.3007391,-7.2739515 5,-8 Q 4.7071068,-8.7071068 4,-9 Q 3.6369757,-9.1503696 3,-9 Q 1.690983,-8.690983 1,-8 Q 0.30901699,-7.309017 0,-6 Q -0.35410197,-4.5 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.4404493,-1.3174579 8,-2 Q 9.1485293,-3.4009805 10,-5","advance":10},{"key":"f","d":"M 0,-5 L 4,-10 Q 4.9433189,-11.179149 6,-13 Q 6.5994114,-14.032893 7,-15 Q 7.8437096,-17.036895 8,-18 Q 8.2331956,-19.437016 8,-20 Q 7.627999,-20.89809 7,-21 Q 6.1396204,-21.13962 5,-20 Q 4.3333333,-19.333333 4,-18 L 2,-10 Q 0.8,-5.2 -1,-1 L -4,6 Q -4.8258876,7.9270711 -5,9 Q -5.2331956,10.437016 -5,11 Q -4.627999,11.89809 -4,12 Q -3.0070463,12.161134 -2,11 Q -1.2353756,10.118381 -1,8 L 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"g","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 M 10,-9 L 8,-2 Q 6.5529061,3.0648285 4,9 Q 3.2452082,10.754792 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"h","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.3693981,-7.1081942 9,-6 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"i","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.3630243,0.15036957 2,0 Q 2.9109272,-0.21504074 4,-1 Q 4.4404493,-1.3174579 5,-2 Q 6.1485293,-3.4009805 7,-5","advance":7},{"key":"j","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L -4,9 Q -4.5,10.5 -5,11 Q -6.1396204,12.13962 -7,12 Q -7.627999,11.89809 -8,11 Q -8.2331956,10.437016 -8,9 Q -7.6958865,7.125968 -7,6 Q -6.3227663,4.9042129 -4,3 Q -2.4365419,1.718271 -1,1 L 1,0 Q 2.4365419,-0.71827095 4,-2 Q 5.6485293,-3.3514707 7,-5","advance":7},{"key":"k","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.4960013,-6.802547 9,-6 Q 8.618034,-5.381966 7,-5 Q 5.5,-4.645898 4,-5 Q 5.7071068,-4.8786797 6,-4 L 7,-1 Q 7.2265409,-0.32037724 8,0 Q 8.3630243,0.15036957 9,0 Q 9.9109272,-0.21504074 11,-1 Q 11.440449,-1.3174579 12,-2 Q 13.148529,-3.4009805 14,-5","advance":14},{"key":"l","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"m","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.094901,-7.7708892 12,-7 Q 11.879306,-6.019586 11,-3 Q 10.557607,-1.4807976 10,0 M 11,-3 Q 11.437742,-4.0311289 12,-5 Q 13.468871,-7.5311289 14,-8 Q 14.816225,-8.7205485 16,-9 Q 17.273951,-9.3007391 18,-9 Q 18.707107,-8.7071068 19,-8 Q 19.369398,-7.1081942 19,-6 L 18,-3 Q 17.630602,-1.8918058 18,-1 Q 18.292893,-0.29289322 19,0 Q 19.363024,0.15036957 20,0 Q 20.910927,-0.21504074 22,-1 Q 22.440449,-1.3174579 23,-2 Q 24.148529,-3.4009805 25,-5","advance":25},{"key":"n","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.369398,-7.1081942 12,-6 L 11,-3 Q 10.630602,-1.8918058 11,-1 Q 11.292893,-0.29289322 12,0 Q 12.363024,0.15036957 13,0 Q 13.910927,-0.21504074 15,-1 Q 15.440449,-1.3174579 16,-2 Q 17.148529,-3.4009805 18,-5","advance":18},{"key":"o","d":"M 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 Q 8.7849593,-3.0890728 9,-4 Q 9.236068,-5 9,-6 Q 8.690983,-7.309017 8,-8 Q 6.8603796,-9.1396204 6,-9 Q 5.372001,-8.8980898 5,-8 Q 4.6992609,-7.2739515 5,-6 Q 5.309017,-4.690983 6,-4 Q 6.690983,-3.309017 8,-3 Q 9.5,-2.645898 11,-3 Q 11.910927,-3.2150407 13,-4 Q 13.581139,-4.4188612 14,-5","advance":14},{"key":"p","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.4354686,-7.3064058 2,-6 L -4,12 M 2,-6 Q 2.1666667,-7.1666667 3,-8 Q 3.690983,-8.690983 5,-9 Q 6,-9.236068 7,-9 Q 8.309017,-8.690983 9,-8 Q 9.690983,-7.309017 10,-6 Q 10.236068,-5 10,-4 Q 9.7849593,-3.0890728 9,-2 Q 8.5811388,-1.4188612 8,-1 Q 7.0811388,-0.33772234 6,0 M 2,-1 Q 2.881966,-0.26393202 4,0 Q 5.2221371,0.28850743 7,0 Q 7.9631048,-0.1562904 10,-1 Q 11.440302,-1.5965928 12,-2 Q 13.743416,-3.2565835 15,-5","advance":15},{"key":"q","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.118034,-0.26393202 7,-1 M 10,-9 Q 9.5440795,-7.4853068 9,-6 Q 8.1595457,-3.7056066 7,-1 L 4,6 Q 3.1741124,7.9270711 3,9 Q 2.7668044,10.437016 3,11 Q 3.372001,11.89809 4,12 Q 4.9929537,12.161134 6,11 Q 7,9.8469903 7,8 L 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"r","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 1,-8 3,-8 L 6,-8 Q 6.5857864,-8 7,-7 Q 7.3693981,-6.1081942 7,-5 L 6,-2 Q 5.815301,-1.4459029 6,-1 Q 6.2928932,-0.29289322 7,0 Q 7.3630243,0.15036957 8,0 Q 8.9109272,-0.21504074 10,-1 Q 10.440449,-1.3174579 11,-2 Q 12.148529,-3.4009805 13,-5","advance":13},{"key":"s","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.5835741,-8.6246388 3,-8 L 5,-5 Q 5.817256,-3.774116 6,-3 Q 6.3416408,-1.5527864 6,-1 Q 5.309017,0.11803399 4,0 M 0,-1 Q 0.88196601,-0.26393202 2,0 Q 4,0.47213595 6,0 Q 6.9109272,-0.21504074 8,-1 Q 8.4404493,-1.3174579 9,-2 Q 10.148529,-3.4009805 11,-5","advance":11},{"key":"t","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 3.1245155,-9.9377423 4,-12 M 7,-21 L 1,-3 Q 0.63060194,-1.8918058 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.7260485,0.30073915 4,0 Q 4.9109272,-0.21504074 6,-1 Q 6.4404493,-1.3174579 7,-2 Q 8.1485293,-3.4009805 9,-5 M 1,-13 L 8,-13","advance":9},{"key":"u","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"v","d":"M 0,-5 L 2,-9 L 1,-4 Q 0.59537178,-1.9768589 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.281492,0.1165978 3,0 Q 4.874032,-0.30411354 6,-1 Q 7.236068,-1.763932 8,-3 Q 8.6958865,-4.125968 9,-6 Q 9.2434165,-7.5 9,-9 Q 8.9460321,-6.861508 10,-5 Q 10.433281,-4.2347425 11,-4 Q 11.726049,-3.6992609 13,-4 Q 14.118034,-4.263932 15,-5","advance":15},{"key":"w","d":"M 3,-9 Q 1.763932,-8.236068 1,-7 Q 0.30411354,-5.874032 0,-4 Q -0.19233829,-2.8147581 0,-2 Q 0.38196601,-0.38196601 1,0 Q 1.5527864,0.34164079 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.1622777,-1.8377223 7,-3 M 9,-9 L 7,-3 Q 6.6306019,-1.8918058 7,-1 Q 7.2928932,-0.29289322 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.37758,-1.9929036 14,-3 Q 14.695886,-4.125968 15,-6 Q 15.243416,-7.5 15,-9 Q 14.946032,-6.861508 16,-5 Q 16.433281,-4.2347425 17,-4 Q 17.726049,-3.6992609 19,-4 Q 20.118034,-4.263932 21,-5","advance":21},{"key":"x","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7,-8.5857864 7,-8 L 7,-1 Q 7,-0.41421356 8,0 Q 9.2668628,0.52475173 11,0 Q 12.434259,-0.43425855 14,-2 Q 15.3,-3.3 16,-5 M 13,-8 Q 12.707107,-8.7071068 12,-9 Q 11,-9.4142136 10,-9 Q 9.438533,-8.7674328 9,-8 L 5,-1 Q 4.561467,-0.23256725 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1","advance":16},{"key":"y","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 4,9 Q 3.5,10.5 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"z","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7.4142136,-8.4142136 8,-7 Q 8.3007391,-6.2739515 8,-5 Q 7.7849593,-4.0890728 7,-3 Q 6.0070964,-1.6224198 5,-1 Q 3.618034,-0.14589803 2,0 Q 3.1666667,0.16666667 4,1 Q 4.690983,1.690983 5,3 Q 5.2885074,4.2221371 5,6 Q 4.8437096,6.9631048 4,9 Q 3.2928932,10.707107 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 2.0511187,4.2992542 4,3 L 7,1 Q 9.3385564,-0.55903758 11,-2 Q 12.606602,-3.3933983 14,-5","advance":14},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),Ht={top:xt,bottom:wt,spaceWidth:kt,strokeWidth:Et,kerning:St,mHeight:_t,letters:bt};class S1{constructor(e,n,r,s,a,o,i){this.top=e,this.bottom=n,this.spaceWidth=r,this.strokeWidth=s,this.kerning=a,this.mHeight=o,this.#t=new Map(i)}getWord(e){const n=[];for(const r of e){const s=this.getChar(r);s&&n.push(s)}return n}#t;getChar(e){return this.#t.get(e)}static fromJSON(e){typeof e=="string"&&(e=JSON.parse(e));const n=e.top,r=e.bottom,s=e.spaceWidth,a=e.strokeWidth,o=e.kerning,i=e.mHeight;V.assertFinite(n,r,s,a,o,i);const d=new this(n,r,s,a,o,i,[]);return V.assertClass(e.letters,Array).forEach(g=>{const M=g.key,l=g.advance,m=g.d;if(V.assertFinite(l),typeof M!="string"||typeof m!="string")throw console.error("Expecting {key,advance,d}, found",g),new Error("wtf");const k={shape:z.fromString(m),advance:l};d.#t.set(M,k)}),d}resize(e){const n=e/this.mHeight;if(n==1)return this;const r=new S1(n*this.top,n*this.bottom,n*this.spaceWidth,n*this.strokeWidth,n*this.kerning,e,[]),s=new DOMMatrix;return s.scaleSelf(n),this.#t.forEach((a,o)=>{const i={advance:n*a.advance,shape:a.shape.transform(s)};r.#t.set(o,i)}),r}static cursive(e){return this.fromJSON(Ht).resize(e)}static futuraL(e){return this.fromJSON(vt).resize(e)}}const $1=0,d1=Math.PI/4,x1=2*d1,$t=3*d1,c0=4*d1,At=5*d1,A1=6*d1,Q0=7*d1;class U1{constructor(e,n,r){this.advance=n,this.fontMetrics=r,e instanceof z?this.#t=()=>e:this.#t=e}reshape(e){return new U1(e,this.advance,this.fontMetrics)}#t;get shape(){return this.#t()}get cssPath(){return this.shape.cssPath}get d(){return this.shape.rawPath}makeElement(){return this.shape.makeElement()}makeElements(){return this.shape.splitOnMove().map(e=>({innerShape:e,element:e.makeElement()}))}}function Vt(c){const e=Rt(c),{top:n,bottom:r,spaceWidth:s,strokeWidth:a,defaultKerning:o,mHeight:i}=(e.get("0")??V.pickAny(e)).fontMetrics;return new S1(n,r,s,a,o,i,e)}function Rt(c){const e=new Map;typeof c=="number"&&(c=new v0(c));const n=(Q,u,f)=>{const p=new U1(u,f,c);if(e.has(Q))throw new Error(`duplicate letter: "${Q}", previous letter: "${[...e].at(-1)[0]}"`);e.set(Q,p)},{aWidth:r,digitWidth:s,capitalTop:a,capitalTopMiddle:o,capitalMiddle:i,capitalBottomMiddle:d,baseline:h,descender:g,strokeWidth:M}=c,l=0,m=M/3;{const Q=c.mHeight,u=.5803571598560251*Q,f=[];f.push(q.controlPoints(.5803571598560251*Q,-.011904772996231272*Q,.1993461912459357*Q,-.4845653833822309*Q,.15178572549774305*Q,-.5833333559985097*Q)),f.push(q.controlPoints(.15178572549774305*Q,-.5833333559985097*Q,.07142858010885174*Q,-.7502096094253163*Q,.07142858010885174*Q,-.8809523915616125*Q)),f.push(q.controlPoints(.07142858010885174*Q,-.8809523915616125*Q,.07142858010885174*Q,-1*Q,.18154763484090689*Q,-1*Q)),f.push(q.controlPoints(.18154763484090689*Q,-1*Q,.3125000278492327*Q,-1*Q,.3125000278492327*Q,-.8809523857747589*Q)),f.push(q.controlPoints(.3125000278492327*Q,-.8809523857747589*Q,.3125000278492327*Q,-.795672021064033*Q,.14880952935525849*Q,-.5863095347804337*Q)),f.push(q.controlPoints(.14880952935525849*Q,-.5863095347804337*Q,0*Q,-.39598002063544424*Q,0*Q,-.23511904966855834*Q)),f.push(q.controlPoints(0*Q,-.23511904966855834*Q,0*Q,0*Q,.16369048113341364*Q,0*Q)),f.push(q.controlPoints(.16369048113341364*Q,0*Q,.31699631330709954*Q,0*Q,.45535713019840074*Q,-.4583333263408854*Q)),n("&",new z(f),u)}{const Q=s,u=Q/2*Math.sqrt(3),f=(h+a)/2,p=f-Q/2,y=p+Q,v=0,L=u;n("<",new z([q.line4(L,p,v,f),q.line4(v,f,L,y)]),u),n(">",new z([q.line4(v,p,L,f),q.line4(L,f,v,y)]),u)}{const Q=s*.9,u=Q/2,f=Q/2,p=f*Math.SQRT1_2,y=S.M(l,a+f);y.arc(u,a+f,u+p,a+f+p,"cw"),y.Q_angles(u,d,x1),y.M(u,h-m),y.L(u,h),n("?",y.pathShape,Q)}{const Q=s*7/8,u=Q/2,f=Q,p=Q/2,y=c.mHeight/8,v=a-y,L=h+y;if(L-v<p*4)throw new Error("wtf");const _=(v+L)/2,$=S.M(f,v).arc(f,v+p,u,v+p,"ccw").L(u,_-p).arc(l,_-p,l,_,"cw").arc(l,_+p,u,_+p,"cw").L(u,L-p).arc(f,L-p,f,L,"ccw").pathShape;n("{",$,Q);const E=S.M(l,v).arc(l,v+p,u,v+p,"cw").L(u,_-p).arc(f,_-p,f,_,"ccw").arc(f,_+p,u,_+p,"ccw").L(u,L-p).arc(l,L-p,l,L,"cw").pathShape;n("}",E,Q)}{const Q=s,f=Q/2,p=Q;{const y=(g-h)*2,v=g,L=v-y,_=a-y/4,$=_+y;if(y<=0||v<=L||L<=$||$<=_)throw new Error("wtf");const E=s*.5;{const R=S.M(E,_).Q_HV(0,$).V(L).Q_VH(E,v).pathShape;n("(",R,E)}{const R=s*.5,I=S.M(0,_).Q_HV(R,$).V(L).Q_VH(0,v).pathShape;n(")",I,R)}{const R=S.M(E,_).H(0).V(v).H(E).pathShape;n("[",R,E)}{const R=S.M(0,_).H(E).V(v).H(0).pathShape;n("]",R,E)}}{const y=s*.4,v=s*.3,L=l,_=L+y,$=_+v,E=$+v,R=E+y,I=R,P=s*.25,T=i,F=T-P,O=T+P,Z=S.M(L,T).Q_angles(_,F,$1,Q0).Q_angles($,T,(x1+d1)/2).Q_angles(E,O,$1).Q_angles(R,T,Q0).pathShape;n("~",Z,I)}{const y=s*.75,v=y/2,L=S.M(v,i-v).V(i+v).M(l,i).H(y).pathShape;n("+",L,y)}{const y=s*.75,v=S.M(l,i).H(y).pathShape;n("-",v,y)}{const y=s*.75,v=2*M,L=y+v,_=i-L/2,$=_+L,E=_,R=_+y,I=(E+R)/2,P=0,T=y,F=y/2,O=new z([new U(P,I,T,I),new U(F,E,F,R),new U(P,$,T,$)]);n("±",O,y)}{const y=s*.75,v=0,L=y/2,_=y,$=2*M,E=i,R=new z([new U(v,E,_,E),new U(L,E-$-m,L,E-$),new U(L,E+$,L,E+$+m)]);S.M(v,i).H(y).pathShape,n("÷",R,y)}{const y=s*.75*Math.SQRT1_2,v=i-y/2,L=i+y/2,_=0,$=y,E=new z([new U(_,v,$,L),new U($,v,_,L)]);n("×",E,y)}{const y=s/2*.9,v=5,L=-Math.PI/2,_=(a+h)/2,$=0,E=V.initializedArray(v,O=>{const Z=O*(Math.PI*2)/v+L,o1=V.polarToRectangular($,Z),i1=V.polarToRectangular(y,Z);return[o1,i1]}),R=E.flat(),I=Math.min(...R.map(({x:O})=>O));R.forEach(O=>{O.x-=I,O.y+=_});const P=E.map(([O,Z])=>new U(O.x,O.y,Z.x,Z.y)),T=new z(P),F=Math.max(...R.map(({x:O})=>O));n("*",T,F)}{const y=s*.75,v=S.M(l,i-M*1.25).H(y).M(l,i+M*1.25).H(y).pathShape;n("=",v,y)}{const y=s*1.25,v=h+M,L=S.M(0,v).H(y).pathShape;n("_",L,y)}{const y=s/2,v=3*y,L=y/3,_=a,$=_+y,E=$+y,R=E+y,I=S.M(y+L,_).L(y-L,R).M(2*y+L,_).L(2*y-L,R).M(0,$).H(v).M(0,E).H(v).pathShape;n("#",I,v)}{const y=s/2,v=3*y,L=0,_=y,$=v/2,E=2*y,R=v,I=a+(c.mHeight-v)/2,P=I+_,T=I+$,F=I+E,O=I+R,Z=S.M(E,T).Q_VH($,P).Q_HV(_,T).Q_VH($,F).Q_HV(E,T).Q_VH((E+R)/2,F).Q_HV(R,T).V((P+T)/2).Q_VH($,I).Q_HV(L,T).Q_VH($,O).H((E+R)/2).pathShape;n("@",Z,v)}{const y=S.M(f,a).Q(p,a,p,o).L(p,d).Q(p,h,f,h).Q(l,h,l,d).L(l,o).Q(l,a,f,a).M(p,o).L(l,d).pathShape;n("0",y,Q)}{const y=S.M(l,o).Q(f,o,f,a).L(f,h).M(l,h).L(p,h).pathShape;n("1",y,Q)}{const y=S.M(l,o).Q_VH(f,a).Q_HV(p,o).Q_VH(f,i).Q_HV(l,h).L(p,h).pathShape;n("2",y,Q)}{const y=S.M(l,o).Q_VH(f,a).Q_HV(p,o).Q_VH(f,i).Q_HV(p,d).Q_VH(f,h).Q_HV(l,d).pathShape;n("3",y,Q)}{const y=(f+p)/2,v=(f+l)/2,L=S.M(p,i).L(l,i).L(v,a).M(y,a).L(y,h).pathShape;n("4",L,Q)}{const y=l+s/5,v=p-s/5,L=(i+d)/2,_=S.M(v,a).L(y,a).L(l,i).Q_VH(f,o).Q_HV(p,L).Q_VH(f,h).Q_HV(l,d).pathShape;n("5",_,Q)}{const y=S.M(p,a).Q_HV(l,d).Q_VH(f,h).Q_HV(p,d).Q_VH(f,i).Q_HV(l,d).pathShape;n("6",y,Q)}{const y=S.M(l,a).L(p,a).L(l,h).pathShape;n("7",y,Q)}{const y=S.M(f,a).Q(p,a,p,o).Q(p,i,f,i).Q(l,i,l,d).Q(l,h,f,h).Q(p,h,p,d).Q(p,i,f,i).Q(l,i,l,o).Q(l,a,f,a).pathShape;n("8",y,Q)}{const y=S.M(p,o).Q(p,a,f,a).Q(l,a,l,o).Q(l,i,f,i).Q(p,i,p,o).Q(p,h,l,h).pathShape;n("9",y,Q)}}{const Q=S.M(l,h).L(r/2,a).L(c.aWidth,h).M(c.aWidth/4,i).L(c.aWidth*.75,i).pathShape;n("A",Q,r)}{const Q=s,u=o-a;if(u<=0)throw new Error("wtf");const f=(Q-u)*(2/3),p=h-d;if(p<=0)throw new Error("wtf");const y=Q-p,v=S.M(l,h).L(l,a).L(f,a).Q_HV(f+u,a+u).Q(f+u,i,f,i).L(l,i).M(Math.max(y,f),i).Q_HV(y+p,h-p).Q_VH(y,h).L(l,h).pathShape;n("B",v,Q)}{const Q=s,f=Q/2,p=Q,y=S.M(p,o).Q(p,a,f,a).Q(l,a,l,o).L(l,d).Q(l,h,f,h).Q(p,h,p,d).pathShape;n("C",y,Q)}{const Q=s,f=Q/2,p=Q,y=S.M(l,a).L(l,h).L(f,h).Q(p,h,p,d).L(p,o).Q(p,a,f,a).L(l,a).pathShape;n("D",y,Q)}{const Q=s,u=Q*(2/3),f=Q,p=S.M(f,a).L(l,a).L(l,h).L(f,h).M(u,i).L(l,i).pathShape;n("E",p,Q)}{const Q=s,u=Q*(2/3),f=Q,p=S.M(f,a).L(l,a).L(l,h).M(u,i).L(l,i).pathShape;n("F",p,Q)}{const Q=s,f=Q/2,p=Q,y=S.M(p,o).Q(p,a,f,a).Q(l,a,l,o).L(l,d).Q(l,h,f,h).Q(p,h,p,d).L(p,i).L(f,i).pathShape;n("G",y,Q)}{const Q=s,u=Q,f=S.M(l,a).L(l,h).M(u,a).L(u,h).M(l,i).L(u,i).pathShape;n("H",f,Q)}{const Q=c.mHeight/3,u=Q/2,f=Q,p=S.M(l,a).L(f,a).M(l,h).L(f,h).M(u,a).L(u,h).pathShape;n("I",p,Q)}{const Q=s*.85,f=Q/2,p=Q,y=S.M(p,a).L(p,d).Q(p,h,f,h).Q(l,h,l,d).pathShape;n("J",y,Q)}{const Q=s+M,u=(a+h)/2,f=S.M(l,a).L(l,h).M(Q,a).L(l+M,u).L(Q,h).pathShape;n("K",f,Q)}{const Q=s,u=S.M(l,a).L(l,h).L(Q,h).pathShape;n("L",u,Q)}{const Q=s*1.5,u=Q/2,f=S.M(l,h).L(l,a).L(u,i).L(Q,a).L(Q,h).pathShape;n("M",f,Q)}{const Q=s*1.2,u=S.M(l,h).L(l,a).L(Q,h).L(Q,a).pathShape;n("N",u,Q)}{const Q=s*1.5,u=Q/2,f=(a+h)/2,p=S.M(u,a).Q_HV(Q,f).Q_VH(u,h).Q_HV(l,f).Q_VH(u,a).pathShape;n("O",p,Q)}{const Q=s,u=i-o;if(u<=0)throw new Error("wtf");const f=Q-u,p=S.M(l,a).L(l,h).M(l,a).L(f,a).Q_HV(Q,o).Q_VH(f,i).L(l,i).pathShape;n("P",p,Q)}{const Q=s*1.5,u=Q/2,f=(a+h)/2,p=S.M(u,a).Q_HV(Q,f).Q_VH(u,h).Q_HV(l,f).Q_VH(u,a).M(Q-u*.75,h-u*.75).L(Q+u/6,h+u/6).pathShape;n("Q",p,Q)}{const Q=s,u=i-o;if(u<=0)throw new Error("wtf");const f=Q-u,p=S.M(l,a).L(l,h).M(l,a).L(f,a).Q_HV(Q,o).Q_VH(f,i).L(l,i).M(f,i).L(Q,h).pathShape;n("R",p,Q)}{const Q=s,u=s/2,f=s,p=S.M(f,o).Q_VH(u,a).Q_HV(l,o).Q_VH(u,i).Q_HV(f,d).Q_VH(u,h).Q_HV(l,d).pathShape;n("S",p,Q)}{const u=s+M,f=u/2,p=u,y=c.mHeight/8,v=S.M(p,o).Q_VH(f,a).Q_HV(l,o).Q_VH(f,i).Q_HV(p,d).Q_VH(f,h).Q_HV(l,d).M(f,a-y).V(h+y).pathShape;n("$",v,u)}{const Q=s,u=Q/2,f=S.M(u,a).L(u,h).M(Q,a).L(l,a).pathShape;n("T",f,Q)}{const Q=(d+i)/2,u=Math.abs(Q-h)*.85,f=u*2,p=S.M(l,a).V(Q).Q_VH(u,h).Q_HV(f,Q).V(a).pathShape;n("U",p,f)}{const Q=r,u=Q/2,f=S.M(l,a).L(u,h).L(Q,a).pathShape;n("V",f,Q)}{const Q=r*1.5,u=Q/3,f=Q/2,p=u*2,y=S.M(l,a).L(u,h).L(f,i).L(p,h).L(Q,a).pathShape;n("W",y,Q)}{const Q=s,u=S.M(Q,a).L(l,h).M(l,a).L(Q,h).pathShape;n("X",u,Q)}{const Q=M,u=s+Q,f=S.M(u,a).L(Q,h).M(l,a).L(u/2,i).pathShape;n("Y",f,u)}{const Q=s,u=S.M(l,a).H(Q).L(l,h).H(Q).pathShape;n("Z",u,Q)}{const Q=s/4,u=s*1.2,f=S.M(Q*2,a+Q).Q_VH(Q,a).Q_HV(0,a+Q).Q_VH(Q,a+Q*2).Q_HV(Q*2,a+Q),y=f.pathShape.translate(u-Q*2,c.mHeight-Q*2);f.addCommands(y.commands),f.M(u,a).L(l,h);const v=f.pathShape;n("%",v,u)}{const Q=s,u=S.M(Q,a).L(l,h).pathShape;n("/",u,Q)}{const Q=s,u=S.M(l,a).L(Q,h).pathShape;n("\\",u,Q)}{const Q=s,u=Q*.05,f=Q+u,p=Q/2,y=S.M(Q,d).Q_VH(p,i).Q_HV(l,d).Q_VH(p,h).Q_HV(f,i).V(h).pathShape;n("a",y,f)}{const Q=s,u=Q*.05,f=Q+u,p=u,y=u+Q/2,v=f,L=S.M(p,d).Q_VH(y,h).Q_HV(v,d).Q_VH(y,i).Q_HV(l,h).V(a).pathShape;n("b",L,f)}{const Q=s*.875,u=0,f=s/2,p=Q,y=(i+d)/2,v=(d+h)/2,L=S.M(p,y).Q_VH(f,i).Q_HV(u,d).Q_VH(f,h).Q_HV(p,v).pathShape;n("c",L,Q)}{const Q=s,u=Q*.05,f=Q+u,p=Q/2,y=S.M(f,a).L(f,h).Q_VH(p,i).Q_HV(l,d).Q_VH(p,h).Q_HV(Q,d).pathShape;n("d",y,f)}const k=s/8;{const Q=s,u=s/2,f=Q,p=f-k,y=S.M(l,d).H(f).Q_VH(u,i).Q_HV(l,d).Q_VH(u,h).H(p).pathShape;n("e",y,Q)}{const Q=s*.75,u=Q/2,f=Q,p=S.M(f,a).Q_HV(u,o).V(h).M(f,i).H(l).pathShape;n("f",p,Q)}{const Q=s,u=Q*.05,f=Q+u,p=Q/2,y=S.M(Q,d).Q_VH(p,i).Q_HV(l,d).Q_VH(p,h).Q_HV(f,i).V(h).Q_VH(p,g).H(l+k).pathShape;n("g",y,f)}{const Q=s*.85,u=Q/2,f=S.M(l,a).V(h).Q_VH(u,i).Q_HV(Q,d).V(h).pathShape;n("h",f,Q)}{const u=S.M(l,i).V(h).M(l,o).V(o-m).pathShape;n("i",u,0)}{const Q=Math.abs(h-g),u=Q/2,f=S.M(Q,i).V(h).Q_VH(u,g).Q_HV(l,h).M(Q,o).V(o-m).pathShape;n("j",f,Q)}{const u=S.M(l,h).V(h-m).pathShape;n(".",u,0)}{const u=S.M(l,a).V(d).M(l,h).V(h-m).pathShape;n("!",u,0)}{const u=(g-h)/2,f=u/2,p=S.M(l,h-m).V(h).Q_VH(-f,h+u).pathShape;n(",",p,0)}{const f=(g-h)/2+m,p=new z([new U(l,a,l,a+f)]);n("'",p,0)}{const u=(g-h)/2+m,f=u,p=u,y=new z([new U(l,a,p,a+u)]);n("`",y,f)}{const u=(g-h)/2+m,f=u,p=u*2,y=p,v=a,L=a+u,_=S.M(l,L).L(f,v).L(y,L).pathShape;n("^",_,p)}{const Q=M*2,f=(g-h)/2+m,p=new z([new U(l,a,l,a+f),new U(Q,a,Q,a+f)]);n('"',p,Q)}{const u=i,f=S.M(l,h).V(h-m).M(l,u-m).V(u).pathShape;n(":",f,0)}{const u=new z([new U(l,a,l,h)]);n("|",u,0)}{const u=i,f=(g-h)/2,p=f/2,y=S.M(l,h-m).V(h).Q_VH(-p,h+f).M(l,u-m).V(u).pathShape;n(";",y,0)}{const Q=c.xHeight*2/3,u=s/10,f=Q+u,p=S.M(l,a).V(h).M(Q,i).L(l,i+Q).M(Q/2,h-Q).L(f,h).pathShape;n("k",p,f)}{const u=S.M(l,a).V(h).pathShape;n("l",u,0)}{const Q=s*1.5,u=Q/4,f=Q/2,p=Q*3/4,y=Q,v=S.M(l,i).V(h).Q_VH(u,i).Q_HV(f,d).V(h).M(f,d).Q_VH(p,i).Q_HV(y,d).V(h).pathShape;n("m",v,Q)}{const Q=s*.85,u=Q/2,f=S.M(l,i).V(h).Q_VH(u,i).Q_HV(Q,d).V(h).pathShape;n("n",f,Q)}{const Q=s,u=0,f=Q/2,p=Q,y=S.M(f,i).Q_HV(p,d).Q_VH(f,h).Q_HV(u,d).Q_VH(f,i).pathShape;n("o",y,Q)}{const Q=s,u=s*.05,f=Q+u,p=u,y=u+Q/2,v=f,L=S.M(p,d).Q_VH(y,i).Q_HV(v,d).Q_VH(y,h).Q_HV(l,i).V(g).pathShape;n("p",L,f)}{const Q=s,u=Q/2,f=s*.05,p=Q+f,y=Math.abs(h-g),v=p+y/2,L=p+y,_=S.M(Q,d).Q_VH(u,i).Q_HV(l,d).Q_VH(u,h).Q_HV(p,i).V(h).Q_VH(v,g).Q_HV(L,(h+g*2)/3).pathShape;n("q",_,L*.667)}{const Q=s,u=Q/2,f=S.M(l,i).V(h).Q_VH(u,i).Q_HV(Q,d).pathShape;n("r",f,Q)}{const Q=c.xHeight*2/3,u=Q/2,f=h,p=d,y=i,v=(f+p)/2,L=(p+y)/2,_=(L+y)/2,$=(f+v)/2,E=S.M(Q,_).Q_VH(u,y).Q_HV(l,L).Q_VH(u,p).Q_HV(Q,v).Q_VH(u,f).Q_HV(l,$).pathShape;n("s",E,Q)}{const Q=s*.75,u=Q/2,f=Q,p=S.M(u,o).V(d).Q_VH(f,h).M(f,i).H(l).pathShape;n("t",p,Q)}{const Q=s*.85,u=Q/2,f=S.M(l,i).V(d).Q_VH(u,h).Q_HV(Q,i).L(Q,h).pathShape;n("u",f,Q)}{const Q=s,u=Q/2,f=S.M(l,i).L(u,h).L(Q,i).pathShape;n("v",f,Q)}{const Q=c.xHeight*1.5,u=Q/3,f=Q/2,p=u*2,y=S.M(l,i).L(u,h).L(f,d).L(p,h).L(Q,i).pathShape;n("w",y,Q)}{const Q=s,u=S.M(Q,i).L(l,h).M(l,i).L(Q,h).pathShape;n("x",u,Q)}{const Q=s,u=Q/2,f=(i+g)/2,p=S.M(Q,i).L(l,g).M(l,i).L(u,f).pathShape;n("y",p,Q)}{const Q=s,u=S.M(l,i).H(Q).L(l,h).H(Q).pathShape;n("z",u,Q)}{const Q=s/2,u=Q/2,f=S.M(u,a).circle(u,a+u,"cw").pathShape;n("°",f,Q)}{const Q=-a,u=Q/2,f=S.M(u,a).circle(u,a+u,"cw").pathShape;n("◯",f,Q)}{const Q=-a,u=Q/2,f=a/2,p=S.M(0,f).arc(u,f,Q,f,"cw").pathShape;n("◠",p,Q)}{const Q=-a,u=Q/2,f=a/2,p=S.M(0,f).arc(u,f,Q,f,"ccw").pathShape;n("◡",p,Q)}{const Q=-a,u=Q/4,f=a+u,p=S.M(u*2,f).arc(u*3,f,Q,f,"cw").Q_angles(u*2,h,$t,x1).Q_angles(0,f,A1,At).arc(u,f,u*2,f,"cw").pathShape;n("♡",p,Q)}{const Q=c.mHeight,u=Q/4,f=u;{const p=Q,y=(a+h)/2,v=S.M(f,y-u).L(0,y).L(f,y+u).M(0,y).L(p,y).M(p-f,y-u).L(p,y).L(p-f,y+u);n("↔",v.pathShape,p);const L=new z(v.commands.slice(0,3));n("←",L,p);const _=new z(v.commands.slice(2,5));n("→",_,p)}{const y=u,v=u*2,L=v,_=S.M(0,a+f).L(y,a).L(L,a+f).M(y,a).L(y,h).M(0,h-f).L(y,h).L(L,h-f);n("↕",_.pathShape,v);const $=new z(_.commands.slice(0,3));n("↑",$,v);const E=new z(_.commands.slice(2,5));n("↓",E,v)}}{const Q=c.mHeight,u=0,f=Q/2,p=Q,y=a,v=h,L=(y+v)/2,_=Math.PI/16,$=S.M(f,y).Q_angles(p,L,$1+_,x1-_).Q_angles(f,v,x1+_,c0-_).Q_angles(u,L,c0+_,A1-_).Q_angles(f,y,A1+_,$1-_).pathShape;n("✧",$,Q)}{let Q=function(E,R){const I=E.maxY-E.minY,T=(R.bottom-R.top)/I,O=(E.maxX-E.minX)*T,Z=0,o1=O,i1=V.makeBoundedLinear(E.minX,Z,E.maxX,o1),y1=V.makeBoundedLinear(E.minY,R.top,E.maxY,R.bottom);return{x:i1,y:y1,advance:o1}},u=function(){const E={x:1/0,y:1/0},R={x:-1/0,y:-1/0};v.forEach(F=>{["x","y"].forEach(O=>{E[O]=Math.min(E[O],F[O]),R[O]=Math.max(R[O],F[O])})});const I={minX:E.x,maxX:R.x,minY:E.y,maxY:R.y},T=Q(I,{top:a,bottom:h});return v.forEach(F=>{F.x=T.x(F.x),F.y=T.y(F.y)}),T};const y=A1,v=V.initializedArray(5,E=>{const R=y+E*(2*Math.PI)*2/5;return V.polarToRectangular(1,R)}),L=u(),_=v.map((E,R,I)=>{const P=I.at(R+1-I.length);return new U(E.x,E.y,P.x,P.y)});n("☆",new z(_),L.advance);const $=v.map((E,R,I)=>{const P=I.at(R+1-I.length),T=Math.atan2(P.y-E.y,P.x-E.x),F=.175;return q.angles(E.x,E.y,T+F,P.x,P.y,T-F)});n("⭒",new z($),L.advance)}return new Map([...e.entries()].sort(([Q],[u])=>Q<u?-1:Q==u?1:0))}class v0{constructor(e,n=e/10){if(this.fontSize=e,this.strokeWidth=n,e<=0||!isFinite(e))throw new Error("wtf")}get mHeight(){return this.fontSize}get xHeight(){return this.fontSize*.5}get aWidth(){return this.fontSize*.75}get digitWidth(){return this.fontSize*.5}get defaultKerning(){return this.strokeWidth*2.5}get spaceWidth(){return this.strokeWidth+this.digitWidth/2}get top(){return this.capitalTop-this.mHeight/4}get capitalTop(){return this.baseline-this.mHeight}get capitalTopMiddle(){return(this.capitalTop+this.capitalMiddle)/2}get capitalMiddle(){return this.baseline-this.xHeight}get capitalBottomMiddle(){return(this.baseline+this.capitalMiddle)/2}get baseline(){return 0}get descender(){return this.mHeight/4}get bottom(){return this.descender+this.mHeight/4}}class It{constructor(e,n,r){this.delayMS=e,this.cumulative=n,this.action=r,this.request=this.request.bind(this)}#t=!1;#e=NaN;#n(){const e=isNaN(this.#e)?this.delayMS:this.delayMS-(performance.now()-this.#e);this.#t=!0,this.#e=NaN,setTimeout(()=>{isFinite(this.#e)?this.#n():(this.#t=!1,this.action())},e)}request(){this.#t?this.cumulative&&(this.#e=performance.now()):this.#n()}}const e1=j.getById("preview",HTMLCanvasElement),h1=V.assertNonNullable(e1.getContext("2d"));let f1={totalLength:0,drawTo(c,e){}};function*x0(c){for(let e=0;e<c;e++){const n=e/(c-1);h1.clearRect(0,0,h1.canvas.width,h1.canvas.height),f1.drawTo(n*f1.totalLength,h1);const r=V.makePromise();e1.toBlob(s=>{s?r.resolve(s):r.reject(new Error("failed"))}),yield r.promise}}async function Ct(){document.body.insertAdjacentHTML("beforeend","<h2>Frames</h2>");for await(const c of x0(10)){const e=URL.createObjectURL(c),n=document.createElement("img");n.classList.add("show-images"),n.src=e,document.body.append(n)}}window.showImages=Ct;const Tt=async c=>{c.on("log",({message:e})=>console.log("FFmpeg log:",e)),c.on("progress",({progress:e})=>console.log("Load progress:",e));try{await c.load({coreURL:A0,wasmURL:V0}),console.log("FFmpeg loaded successfully")}catch(e){throw console.error("FFmpeg load failed:",e),e}};async function zt(){const c=new $0;await Tt(c);const e=V.assertNonNullable(V.parseFloatX(W1.value)),n=Math.round(e/1e3*30);for(const[h,g]of V.zip(x0(n),V.count())){const l=`frame${(g+1).toString().padStart(2,"0")}.png`;c.writeFile(l,new Uint8Array(await(await h).arrayBuffer()))}const r=await c.exec(["-framerate","30","-i","frame%02d.png","-c:v","prores_ks","-pix_fmt","yuva444p10le","-y","output.mov"]);if(r!==0)throw new Error(`ffmpeg exec problem: ${r}`);const s=await c.readFile("output.mov"),a=typeof s=="string"?s:V.assertClass(s.buffer,ArrayBuffer),o=new Blob([a],{type:"video/quicktime"}),i=URL.createObjectURL(o),d=document.createElement("a");d.href=i,d.download="output.mov",d.click(),URL.revokeObjectURL(i)}const N1=j.getById("createVideo",HTMLButtonElement);N1.addEventListener("click",zt);const D1=j.getById("fontSize",HTMLInputElement),q1=j.getById("text",HTMLTextAreaElement),w0=j.getById("strokeColor",HTMLInputElement),V1=j.getById("lineWidth",HTMLInputElement),W1=j.getById("duration",HTMLInputElement),k0=j.getById("recommendedLineWidth",HTMLButtonElement),X1=j.getById("backgroundColor",HTMLInputElement);class B1{static#t=[D1,q1,w0,V1,X1];static#e=["alignment","fontFamily"];static read(){const e=new URLSearchParams(location.hash.substring(1));this.#t.forEach(n=>{const r=e.get(n.id);typeof r=="string"&&(n.value=r)}),this.#e.forEach(n=>{const r=e.get(n);if(typeof r=="string"){const s=j.selectorQueryAll(`input[type="radio"][name="${n}"][value="${r}"]`,HTMLInputElement);s.length!=1?console.warn("Expecting 1 radio button",s,n,r):s[0].checked=!0}})}static#n(){const e=new URLSearchParams;this.#t.forEach(n=>{e.append(n.id,n.value)}),this.#e.forEach(n=>{const r=j.selectorQuery(`input[type="radio"][name="${n}"]:checked`,HTMLInputElement).value;e.append(n,r)}),location.replace("#"+e.toString())}static writeSoon=new It(50,!0,()=>this.#n()).request;static init(){this.#t.forEach(e=>{e.addEventListener("input",this.writeSoon),j.selectorQueryAll('input[type="radio"]',HTMLInputElement).forEach(n=>n.addEventListener("input",this.writeSoon))})}}B1.init();let p1=NaN;k0.addEventListener("click",()=>{Number.isFinite(p1)&&(V1.value=p1.toString(),R1(),B1.writeSoon())});const h0=j.getById("error",HTMLDivElement),Pt=j.getById("length",HTMLSpanElement),Ot=j.getById("progress",HTMLInputElement);function R1(){try{h0.style.display="none";const c=V.parseFloatX(D1.value),e=V.parseFloatX(V1.value),n=V.parseFloatX(W1.value);if([[c,D1],[e,V1],[n,W1]].forEach(([g,M])=>{M.style.backgroundColor=g===void 0?"pink":""}),c===void 0||e===void 0||n===void 0){N1.disabled=!0;return}N1.disabled=!1;const r=j.selectorQuery('input[type="radio"][name="fontFamily"]:checked',HTMLInputElement).value;let s;switch(r){case"standard":{s=Vt(new v0(c,e)),p1=c/10;break}case"Hershey Cursive":{s=S1.cursive(c),p1=s.strokeWidth;break}case"Hershey Futura L":{s=S1.futuraL(c),p1=s.strokeWidth;break}default:throw new Error("wtf")}k0.innerText=`Recommended: ${p1}px`;const a=new I0(s);a.addText(q1.value);const o=j.selectorQuery('input[type="radio"][name="alignment"]:checked',HTMLInputElement).value,i=c*25,d=a.align(i,o),h=(s.bottom-s.top)/2;e1.width=i+2*h,e1.height=(d.allRowMetrics.at(-1)?.bottom??0)+2*h,e1.style.width=`${e1.width/devicePixelRatio}px`,e1.style.height=`${e1.height/devicePixelRatio}px`,h1.strokeStyle=w0.value,h1.lineWidth=e,f1=d.drawPartial(h,h),Pt.innerText=f1.totalLength.toString(),f1.drawTo(Ot.valueAsNumber*f1.totalLength,h1)}catch(c){h0.style.display="",console.error(c)}}B1.read();R1();[q1,...j.selectorQueryAll("input",HTMLInputElement)].forEach(c=>{c.addEventListener("input",R1)});window.updateSample=R1;function E0(c=X1.value,e=10){const n=`color-mix(in srgb-linear, ${c} ${100-e}%, white ${e}%)`,r=`color-mix(in srgb-linear, ${c} ${100-e}%, black ${e}%)`,s=document.createElement("canvas");s.width=2,s.height=2;const a=s.getContext("2d");a.fillStyle=n,a.fillRect(0,0,2,2),a.fillStyle=r,a.fillRect(0,1,1,1),a.fillRect(1,0,1,1);const o=s.toDataURL("image/png");e1.style.background=`url(${o}) repeat`,e1.style.backgroundSize="20px 20px",e1.style.imageRendering="pixelated"}E0();X1.addEventListener("input",()=>E0());
