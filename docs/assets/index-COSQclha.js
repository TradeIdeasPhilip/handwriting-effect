(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))s(o);new MutationObserver(o=>{for(const a of o)if(a.type==="childList")for(const r of a.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&s(r)}).observe(document,{childList:!0,subtree:!0});function n(o){const a={};return o.integrity&&(a.integrity=o.integrity),o.referrerPolicy&&(a.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?a.credentials="include":o.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function s(o){if(o.ep)return;o.ep=!0;const a=n(o);fetch(o.href,a)}})();function w0(c){return c&&c.__esModule&&Object.prototype.hasOwnProperty.call(c,"default")?c.default:c}var F1={},a0;function E0(){return a0||(a0=1,(function(c){Object.defineProperty(c,"__esModule",{value:!0}),c.countMap=c.Random=c.phi=c.radiansPerDegree=c.degreesPerRadian=c.FULL_CIRCLE=c.FIGURE_SPACE=c.NON_BREAKING_SPACE=c.MIN_DATE=c.MAX_DATE=c.csvStringToArray=void 0,c.assertClass=e,c.assertNonNullable=n,c.sleep=s,c.testXml=o,c.parseXml=a,c.followPath=r,c.getAttribute=Q,c.parseFloatX=d,c.parseIntX=h,c.parseTimeT=g,c.pickAny=l,c.pick=m,c.take=w,c.filterMap=i,c.makePromise=f,c.dateIsValid=u,c.angleBetween=p,c.positiveModulo=y,c.rotateArray=L,c.rectUnion=k,c.rectAddPoint=I,c.dateToFileName=S,c.lerp=V,c.assertFinite=C,c.shuffleArray=P,c.zip=T,c.count=F,c.initializedArray=O,c.sum=Z,c.makeLinear=r1,c.makeBoundedLinear=i1,c.polarToRectangular=y1,c.permutations=V1,c.gcd=u1,c.lcm=O1;function e(x,E,A="Assertion Failed."){const H=D=>{throw new Error(`${A}  Expected type:  ${E.name}.  Found type:  ${D}.`)};if(x===null)H("null");else if(typeof x!="object")H(typeof x);else if(!(x instanceof E))H(x.constructor.name);else return x;throw new Error("wtf")}function n(x){if(x==null)throw new Error("wtf");return x}function s(x){return new Promise(E=>{setTimeout(E,x)})}function o(x){const A=new DOMParser().parseFromString(x,"application/xml");for(const H of Array.from(A.querySelectorAll("parsererror")))if(H instanceof HTMLElement)return{error:H};return{parsed:A}}function a(x){if(x!==void 0){const{parsed:E}=o(x);return E?.documentElement}}function r(x,...E){for(const A of E){if(x===void 0)return;if(typeof A=="number")x=x.children[A];else{const H=x.getElementsByTagName(A);if(H.length!=1)return;x=H[0]}}return x}function Q(x,E,...A){if(E=r(E,...A),E!==void 0&&E.hasAttribute(x))return E.getAttribute(x)??void 0}function d(x){if(x==null)return;const E=+x;if(isFinite(E))return E}function h(x){const E=d(x);if(E!==void 0)return E>Number.MAX_SAFE_INTEGER||E<Number.MIN_SAFE_INTEGER||E!=Math.floor(E)?void 0:E}function g(x){if(typeof x=="string"&&(x=h(x)),x!=null&&!(x<=0))return new Date(x*1e3)}const M=x=>{const E=/(,|\r?\n|\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^,\r\n]*))/gi,A=[[]];let H;for(;H=E.exec(x);)H[1].length&&H[1]!==","&&A.push([]),A[A.length-1].push(H[2]!==void 0?H[2].replace(/""/g,'"'):H[3]);return A};c.csvStringToArray=M;function l(x){const E=x.values().next();if(!E.done)return E.value}function m(x){if(x.length==0)throw new Error("wtf");return x[Math.random()*x.length|0]}function w(x){if(x.length<1)throw new Error("wtf");const E=Math.random()*x.length|0;return x.splice(E,1)[0]}function i(x,E){const A=[];return x.forEach((H,D)=>{const N=E(H,D);N!==void 0&&A.push(N)}),A}function f(){let x,E;return{promise:new Promise((H,D)=>{x=H,E=D}),resolve:x,reject:E}}c.MAX_DATE=new Date(864e13),c.MIN_DATE=new Date(-864e13);function u(x){return isFinite(x.getTime())}c.NON_BREAKING_SPACE=" ",c.FIGURE_SPACE=" ",c.FULL_CIRCLE=2*Math.PI,c.degreesPerRadian=360/c.FULL_CIRCLE,c.radiansPerDegree=c.FULL_CIRCLE/360,c.phi=(1+Math.sqrt(5))/2;function p(x,E){const A=y(x,c.FULL_CIRCLE);let D=y(E,c.FULL_CIRCLE)-A;const N=c.FULL_CIRCLE/2;if(D>N?D-=c.FULL_CIRCLE:D<-N&&(D+=c.FULL_CIRCLE),Math.abs(D)>N)throw new Error("wtf");return D}function y(x,E){const A=x%E;return A<0?A+Math.abs(E):A}function L(x,E){if((E|0)!=E)throw new Error(`invalid input: ${E}`);return E=y(E,x.length),E==0?x:[...x.slice(E),...x.slice(0,E)]}class v{constructor(){throw new Error("wtf")}static sfc32(E,A,H,D){function N(){E|=0,A|=0,H|=0,D|=0;let s1=(E+A|0)+D|0;return D=D+1|0,E=A^A>>>9,A=H+(H<<3)|0,H=H<<21|H>>>11,H=H+s1|0,(s1>>>0)/4294967296}const J=N;return Object.defineProperty(J,"currentSeed",{get(){return JSON.stringify([E,A,H,D])}}),J}static#t=42;static seedIsValid(E){try{return this.create(E),!0}catch{return!1}}static create(E=this.newSeed()){console.info(E);const A=JSON.parse(E);if(!(A instanceof Array))throw new Error("invalid input");if(A.length!=4)throw new Error("invalid input");const[H,D,N,J]=A;if(!(typeof H=="number"&&typeof D=="number"&&typeof N=="number"&&typeof J=="number"))throw new Error("invalid input");return this.sfc32(H,D,N,J)}static newSeed(){const E=[];return E.push(Date.now()|0),E.push(this.#t++|0),E.push(Math.random()*2**31|0),E.push(performance.now()*1e4|0),JSON.stringify(E)}static fromString(E){try{return this.create(E)}catch{return this.create(this.anyStringToSeed(E))}}static anyStringToSeed(E){function A(N,J){return(N<<J|N>>>32-J)>>>0}const H=[2654435769,608135816,2242054355,320440878];return new TextEncoder().encode(E).forEach(N=>{H[0]^=N,H[0]=A(H[0],3),H[1]^=N,H[1]=A(H[1],5),H[2]^=N,H[2]=A(H[2],7),H[3]^=N,H[3]=A(H[3],11)}),H[0]^=A(H[1],7),H[1]^=A(H[2],11),H[2]^=A(H[3],13),H[3]^=A(H[0],17),JSON.stringify(H)}static test(){const H=[this.create()];for(;H.length<=10;){for(let N=0;N<20;N++){const J=H.map(s1=>s1());for(let s1=1;s1<J.length;s1++)if(J[s1]!==J[0]){debugger;throw new Error("wtf")}}const D=m(H).currentSeed;H.forEach(N=>{if(N.currentSeed!=D){debugger;throw new Error("wtf")}}),H.push(this.create(D))}}}c.Random=v;function k(x,E){const A=Math.min(x.x,E.x),H=Math.min(x.y,E.y),D=Math.max(x.x+x.width,E.x+E.width),N=Math.max(x.y+x.height,E.y+E.height),J=D-A,s1=N-H;return{x:A,y:H,width:J,height:s1}}function I(x,E,A){return k(x,{x:E,y:A,width:0,height:0})}function S(x){return isNaN(x.getTime())?"0000⸱00⸱00 00⦂00⦂00":`${x.getFullYear().toString().padStart(4,"0")}⸱${(x.getMonth()+1).toString().padStart(2,"0")}⸱${x.getDate().toString().padStart(2,"0")} ${x.getHours().toString().padStart(2,"0")}⦂${x.getMinutes().toString().padStart(2,"0")}⦂${x.getSeconds().toString().padStart(2,"0")}`}function V(x,E,A){return x+(E-x)*A}function C(...x){x.forEach(E=>{if(!Number.isFinite(E))throw new Error("wtf")})}function P(x){for(let E=x.length-1;E>0;E--){const A=Math.floor(Math.random()*(E+1));[x[E],x[A]]=[x[A],x[E]]}return x}function*T(...x){const E=x.map(A=>A[Symbol.iterator]());for(;;){const A=E.map(H=>H.next());if(A.some(({done:H})=>H))break;yield A.map(({value:H})=>H)}}function*F(x=0,E=1/0,A=1){for(let H=x;H<E;H+=A)yield H}function O(x,E){const A=[];for(let H=0;H<x;H++)A.push(E(H));return A}c.countMap=O;function Z(x){return x.reduce((E,A)=>E+A,0)}function r1(x,E,A,H){const D=(H-E)/(A-x);return function(N){return(N-x)*D+E}}function i1(x,E,A,H){A<x&&([x,E,A,H]=[A,H,x,E]);const D=(H-E)/(A-x);return function(N){return N<=x?E:N>=A?H:(N-x)*D+E}}function y1(x,E){return{x:Math.cos(E)*x,y:Math.sin(E)*x}}function*V1(x,E=[]){if(x.length==0)yield E;else for(let A=0;A<x.length;A++){const H=x[A],D=[...E,H],N=[...x.slice(0,A),...x.slice(A+1)];yield*V1(N,D)}}function u1(x,E){return E?u1(E,x%E):x}function O1(x,E){return x*E/u1(x,E)}})(F1)),F1}var $=E0(),Y={},r0;function W0(){if(r0)return Y;r0=1,Object.defineProperty(Y,"__esModule",{value:!0}),Y.AnimationLoop=void 0,Y.getById=e,Y.selectorQueryAll=n,Y.selectorQuery=s,Y.loadDateTimeLocal=o,Y.getBlobFromCanvas=a,Y.getAudioBalanceControl=r,Y.getHashInfo=Q,Y.createElementFromHTML=d,Y.download=h,Y.getDataUrl=M;const c=E0();function e(l,m){const w=document.getElementById(l);if(!w)throw new Error("Could not find element with id "+l+".  Expected type:  "+m.name);if(w instanceof m)return w;throw new Error("Element with id "+l+" has type "+w.constructor.name+".  Expected type:  "+m.name)}function n(l,m,w=1,i=1/0,f=document){const u=[];if(f.querySelectorAll(l).forEach(p=>{u.push((0,c.assertClass)(p,m))}),u.length<w||u.length>i)throw new Error(`Expecting "${l}" to return [${w} - ${i}] instances of ${m.name}, found ${u.length}.`);return u}function s(l,m,w=document){return n(l,m,1,1,w)[0]}function o(l,m,w="milliseconds"){let i;switch(w){case"minutes":{i=m.getSeconds()*1e3+m.getMilliseconds();break}case"seconds":{i=m.getMilliseconds();break}case"milliseconds":{i=0;break}default:throw new Error("wtf")}l.valueAsNumber=+m-m.getTimezoneOffset()*6e4-i}function a(l){const{reject:m,resolve:w,promise:i}=(0,c.makePromise)();return l.toBlob(f=>{f?w(f):m(new Error("blob is null!"))}),i}function r(l){const m=new AudioContext,w=m.createMediaElementSource(l),i=new StereoPannerNode(m,{pan:0});return w.connect(i).connect(m.destination),f=>{i.pan.value=f}}function Q(){const l=new Map;return/^#?(.*)$/.exec(location.hash.replace("+","%20"))[1].split("&").forEach(i=>{const f=i.split("=",2);if(f.length==2){const u=decodeURIComponent(f[0]),p=decodeURIComponent(f[1]);l.set(u,p)}}),l}function d(l,m){var w=document.createElement("div");return w.innerHTML=l.trim(),(0,c.assertClass)(w.firstChild,m,"createElementFromHTML:")}function h(l,m){var w=document.createElement("a");if(w.setAttribute("href","data:text/plain;charset=utf-8,"+encodeURIComponent(m)),w.setAttribute("download",l),document.createEvent){var i=document.createEvent("MouseEvents");i.initEvent("click",!0,!0),w.dispatchEvent(i)}else w.click()}class g{onWake;constructor(m){this.onWake=m,this.callback=this.callback.bind(this),requestAnimationFrame(this.callback)}#t=!1;cancel(){this.#t=!0}callback(m){this.#t||(requestAnimationFrame(this.callback),this.onWake(m))}}Y.AnimationLoop=g;async function M(l){const m=document.createElement("img");m.src=l,await m.decode();const w=m.naturalHeight,i=m.naturalWidth;if(w==0||i==0)throw new Error("problem with image");const f=document.createElement("canvas");f.width=i,f.height=w;const u=f.getContext("2d");if(!u)throw new Error("wtf");return u.drawImage(m,0,0,f.width,f.height),f.toDataURL()}return Y}var B=W0(),q;(function(c){c.LOAD="LOAD",c.EXEC="EXEC",c.FFPROBE="FFPROBE",c.WRITE_FILE="WRITE_FILE",c.READ_FILE="READ_FILE",c.DELETE_FILE="DELETE_FILE",c.RENAME="RENAME",c.CREATE_DIR="CREATE_DIR",c.LIST_DIR="LIST_DIR",c.DELETE_DIR="DELETE_DIR",c.ERROR="ERROR",c.DOWNLOAD="DOWNLOAD",c.PROGRESS="PROGRESS",c.LOG="LOG",c.MOUNT="MOUNT",c.UNMOUNT="UNMOUNT"})(q||(q={}));const B0=(()=>{let c=0;return()=>c++})(),X0=new Error("ffmpeg is not loaded, call `await ffmpeg.load()` first"),U0=new Error("called FFmpeg.terminate()");class q0{#t=null;#e={};#n={};#a=[];#o=[];loaded=!1;#r=()=>{this.#t&&(this.#t.onmessage=({data:{id:e,type:n,data:s}})=>{switch(n){case q.LOAD:this.loaded=!0,this.#e[e](s);break;case q.MOUNT:case q.UNMOUNT:case q.EXEC:case q.FFPROBE:case q.WRITE_FILE:case q.READ_FILE:case q.DELETE_FILE:case q.RENAME:case q.CREATE_DIR:case q.LIST_DIR:case q.DELETE_DIR:this.#e[e](s);break;case q.LOG:this.#a.forEach(o=>o(s));break;case q.PROGRESS:this.#o.forEach(o=>o(s));break;case q.ERROR:this.#n[e](s);break}delete this.#e[e],delete this.#n[e]})};#s=({type:e,data:n},s=[],o)=>this.#t?new Promise((a,r)=>{const Q=B0();this.#t&&this.#t.postMessage({id:Q,type:e,data:n},s),this.#e[Q]=a,this.#n[Q]=r,o?.addEventListener("abort",()=>{r(new DOMException(`Message # ${Q} was aborted`,"AbortError"))},{once:!0})}):Promise.reject(X0);on(e,n){e==="log"?this.#a.push(n):e==="progress"&&this.#o.push(n)}off(e,n){e==="log"?this.#a=this.#a.filter(s=>s!==n):e==="progress"&&(this.#o=this.#o.filter(s=>s!==n))}load=({classWorkerURL:e,...n}={},{signal:s}={})=>(this.#t||(this.#t=e?new Worker(new URL(e,import.meta.url),{type:"module"}):new Worker(new URL(""+new URL("worker-DYSz7Krg.js",import.meta.url).href,import.meta.url),{type:"module"}),this.#r()),this.#s({type:q.LOAD,data:n},void 0,s));exec=(e,n=-1,{signal:s}={})=>this.#s({type:q.EXEC,data:{args:e,timeout:n}},void 0,s);ffprobe=(e,n=-1,{signal:s}={})=>this.#s({type:q.FFPROBE,data:{args:e,timeout:n}},void 0,s);terminate=()=>{const e=Object.keys(this.#n);for(const n of e)this.#n[n](U0),delete this.#n[n],delete this.#e[n];this.#t&&(this.#t.terminate(),this.#t=null,this.loaded=!1)};writeFile=(e,n,{signal:s}={})=>{const o=[];return n instanceof Uint8Array&&o.push(n.buffer),this.#s({type:q.WRITE_FILE,data:{path:e,data:n}},o,s)};mount=(e,n,s)=>{const o=[];return this.#s({type:q.MOUNT,data:{fsType:e,options:n,mountPoint:s}},o)};unmount=e=>{const n=[];return this.#s({type:q.UNMOUNT,data:{mountPoint:e}},n)};readFile=(e,n="binary",{signal:s}={})=>this.#s({type:q.READ_FILE,data:{path:e,encoding:n}},void 0,s);deleteFile=(e,{signal:n}={})=>this.#s({type:q.DELETE_FILE,data:{path:e}},void 0,n);rename=(e,n,{signal:s}={})=>this.#s({type:q.RENAME,data:{oldPath:e,newPath:n}},void 0,s);createDir=(e,{signal:n}={})=>this.#s({type:q.CREATE_DIR,data:{path:e}},void 0,n);listDir=(e,{signal:n}={})=>this.#s({type:q.LIST_DIR,data:{path:e}},void 0,n);deleteDir=(e,{signal:n}={})=>this.#s({type:q.DELETE_DIR,data:{path:e}},void 0,n)}var i0;(function(c){c.MEMFS="MEMFS",c.NODEFS="NODEFS",c.NODERAWFS="NODERAWFS",c.IDBFS="IDBFS",c.WORKERFS="WORKERFS",c.PROXYFS="PROXYFS"})(i0||(i0={}));const j0=""+new URL("ffmpeg-core-CI9Irx9p.js",import.meta.url).href,Z0=""+new URL("ffmpeg-core-CgUfceKH.wasm",import.meta.url).href;class c0{top;bottom;width;letters;spaceAfter;constructor(e,n){const s=n.getWord(e);let o=0;this.letters=s.map(Q=>{const d={x:o,description:Q};return o+=Q.advance+n.kerning,d});const a=this.letters.at(-1);this.width=a?a.x+a.description.advance:0,this.top=n.top,this.bottom=n.bottom;let r=0;[...e].forEach(Q=>{Q==" "&&r++}),this.spaceAfter=r*n.spaceWidth+n.kerning}}class Y0{}class J0{constructor(e){this.font=e}#t=[];addWord(e,n=this.font){const s=new c0(e,n);return this.#t.push(s),s}addText(e,n=this.font){const s=[];for(const o of e.matchAll(/(\n)|([^ \n]*(( +)|$|(?=\n)))/gms)){const a=o[0];if(a[0]==`
`)for(let r=0;r<a.length;r++)this.addLineBreak();else a!=""&&this.addWord(a,n)}return s}addLineBreak(){this.#t.push(new Y0)}align(e=1/0,n="left"){const s=[[]],o=new Set;let a=0;for(this.#t.forEach(l=>{if(l instanceof c0)a>0&&a+l.width>e&&(a=0,s.push([])),a+=l.width+l.spaceAfter,s.at(-1).push(l);else{const m=s.length-1;o.add(m),a=0,s.push([])}});s.length>0&&s.at(-1).length==0;)s.pop();let r=0;const Q=new Array;s.forEach(l=>{if(l.length==0){const m=r,w=m-this.font.top,i=w+this.font.bottom;Q.push({top:m,baseline:w,bottom:i,minWidth:0}),r=i}else{const m=r,w=m-Math.min(...l.map(u=>u.top)),i=w+Math.max(...l.map(u=>u.bottom)),f=$.sum(l.map(u=>u.width+u.spaceAfter))-l.at(-1).spaceAfter;Q.push({top:m,baseline:w,bottom:i,minWidth:f}),r=i}});const d=new Array;e==1/0&&(e=Math.max(...Q.map(({minWidth:l})=>l))),s.forEach((l,m)=>{const w=Q[m],i=w.baseline;function f(){let L=(e-w.minWidth)/2;l.forEach(v=>{d.push({x:L,baseline:i,wordInfo:v}),L+=v.width+v.spaceAfter})}function u(){let L=0;l.forEach(v=>{d.push({x:L,baseline:i,wordInfo:v}),L+=v.width+v.spaceAfter})}function p(){let L=e-w.minWidth;l.forEach(v=>{d.push({x:L,baseline:i,wordInfo:v}),L+=v.width+v.spaceAfter})}function y(){const L=(e-w.minWidth)/(l.length-1);let v=0;l.forEach(k=>{d.push({x:v,baseline:i,wordInfo:k}),v+=k.width+k.spaceAfter+L})}switch(n){case"center":{f();break}case"left":{u();break}case"right":{p();break}case"justify":{m==s.length-1||o.has(m)?u():y();break}default:throw new Error("wtf")}});function*h(l=0,m=0){for(const w of d)for(const i of w.wordInfo.letters){const f=l+w.x+i.x,u=m+w.baseline;yield{x:f,baseline:u,letter:i.description,translatedShape:i.description.shape.translate(f,u),word:w}}}function g(l,m=0,w=0){l.lineCap="round",l.lineJoin="round";for(const i of h(m,w)){const f=new Path2D(i.translatedShape.rawPath);l.stroke(f)}}function M(l=0,m=0){let w=0;const i=[...h(l,m)].flatMap(({translatedShape:p})=>p.splitOnMove()).map(p=>{const y=p.getLength(),L=w+y,k={path:new Path2D(p.rawPath),start:w,length:y,end:L};return w=L,k}),f=w;function u(p,y){y.lineCap="round",y.lineJoin="round";for(const L of i){if(p<=L.start)break;p>=L.end?y.setLineDash([]):y.setLineDash([p-L.start,f]),y.stroke(L.path)}}return{totalLength:f,drawTo:u}}return{width:e,words:d,allRowMetrics:Q,getAllLetters:h,drawAll:g,drawPartial:M}}}function n1(c,e,n){return new DOMPoint(c,e).matrixTransform(n)}function Q0(c,e,n,s=.5,o=.5){const a=c.width/c.height,r=e.width/e.height;let Q,d;switch(n){case"meet":case"srcRect fits completely into destRect":{a>r?(Q=e.width/c.width,d=Q):(d=e.height/c.height,Q=d);break}case"slice":case"srcRect completely covers destRect":{a>r?(d=e.height/c.height,Q=d):(Q=e.width/c.width,d=Q);break}default:throw new Error("wtf")}const h=-c.x*Q+s*(e.width-c.width*Q)+e.x,g=-c.y*d+o*(e.height-c.height*d)+e.y;return new DOMMatrix().translate(h,g).scale(Q,d)}function G0(){{const c={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:244,width:325},n=Q0(c,e,"meet");[{x:c.x,y:c.y},{x:c.x+c.width,y:c.y},{x:c.x+c.width,y:c.y+c.height},{x:c.x,y:c.y+c.height}].forEach(({x:o,y:a})=>{const r=n1(o,a,n);if(r.x<e.x||r.x>e.x+e.width||r.y<e.y||r.y>e.y+e.height)throw new Error(`Test 1 failed: Point (${r.x}, ${r.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}{const c={x:-1,y:-1,width:2,height:2},e={x:0,y:0,height:325,width:244},n=Q0(c,e,"meet");[{x:c.x,y:c.y},{x:c.x+c.width,y:c.y},{x:c.x+c.width,y:c.y+c.height},{x:c.x,y:c.y+c.height}].forEach(({x:o,y:a})=>{const r=n1(o,a,n);if(r.x<e.x||r.x>e.x+e.width||r.y<e.y||r.y>e.y+e.height)throw new Error(`Test 2 failed: Point (${r.x}, ${r.y}) is outside destination (${e.x}, ${e.y}, ${e.width}, ${e.height})`)})}}G0();var N1,h0;function K0(){if(h0)return N1;h0=1,N1=n;var c={a:7,c:6,h:1,l:2,m:2,q:4,s:4,t:2,v:1,z:0},e=/([astvzqmhlc])([^astvzqmhlc]*)/ig;function n(a){var r=[];return a.replace(e,function(Q,d,h){var g=d.toLowerCase();for(h=o(h),g=="m"&&h.length>2&&(r.push([d].concat(h.splice(0,2))),g="l",d=d=="m"?"l":"L");;){if(h.length==c[g])return h.unshift(d),r.push(h);if(h.length<c[g])throw new Error("malformed path data");r.push([d].concat(h.splice(0,c[g])))}}),r}var s=/-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;function o(a){var r=a.match(s);return r?r.map(Number):[]}return N1}var tt=K0();const et=w0(tt);var D1,l0;function nt(){if(l0)return D1;l0=1,D1=c;function c(e){var n=0,s=0,o=0,a=0;return e.map(function(r){r=r.slice();var Q=r[0],d=Q.toUpperCase();if(Q!=d)switch(r[0]=d,Q){case"a":r[6]+=o,r[7]+=a;break;case"v":r[1]+=a;break;case"h":r[1]+=o;break;default:for(var h=1;h<r.length;)r[h++]+=o,r[h++]+=a}switch(d){case"Z":o=n,a=s;break;case"H":o=r[1];break;case"V":a=r[1];break;case"M":o=n=r[1],a=s=r[2];break;default:o=r[r.length-2],a=r[r.length-1]}return r})}return D1}var st=nt();const ot=w0(st);var at=(function(){function c(e,n){var s=[],o=!0,a=!1,r=void 0;try{for(var Q=e[Symbol.iterator](),d;!(o=(d=Q.next()).done)&&(s.push(d.value),!(n&&s.length===n));o=!0);}catch(h){a=!0,r=h}finally{try{!o&&Q.return&&Q.return()}finally{if(a)throw r}}return s}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return c(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}})(),_1=Math.PI*2,W1=function(e,n,s,o,a,r,Q){var d=e.x,h=e.y;d*=n,h*=s;var g=o*d-a*h,M=a*d+o*h;return{x:g+r,y:M+Q}},rt=function(e,n){var s=n===1.5707963267948966?.551915024494:n===-1.5707963267948966?-.551915024494:1.3333333333333333*Math.tan(n/4),o=Math.cos(e),a=Math.sin(e),r=Math.cos(e+n),Q=Math.sin(e+n);return[{x:o-a*s,y:a+o*s},{x:r+Q*s,y:Q-r*s},{x:r,y:Q}]},d0=function(e,n,s,o){var a=e*o-n*s<0?-1:1,r=e*s+n*o;return r>1&&(r=1),r<-1&&(r=-1),a*Math.acos(r)},it=function(e,n,s,o,a,r,Q,d,h,g,M,l){var m=Math.pow(a,2),w=Math.pow(r,2),i=Math.pow(M,2),f=Math.pow(l,2),u=m*w-m*f-w*i;u<0&&(u=0),u/=m*f+w*i,u=Math.sqrt(u)*(Q===d?-1:1);var p=u*a/r*l,y=u*-r/a*M,L=g*p-h*y+(e+s)/2,v=h*p+g*y+(n+o)/2,k=(M-p)/a,I=(l-y)/r,S=(-M-p)/a,V=(-l-y)/r,C=d0(1,0,k,I),P=d0(k,I,S,V);return d===0&&P>0&&(P-=_1),d===1&&P<0&&(P+=_1),[L,v,C,P]},ct=function(e){var n=e.px,s=e.py,o=e.cx,a=e.cy,r=e.rx,Q=e.ry,d=e.xAxisRotation,h=d===void 0?0:d,g=e.largeArcFlag,M=g===void 0?0:g,l=e.sweepFlag,m=l===void 0?0:l,w=[];if(r===0||Q===0)return[];var i=Math.sin(h*_1/360),f=Math.cos(h*_1/360),u=f*(n-o)/2+i*(s-a)/2,p=-i*(n-o)/2+f*(s-a)/2;if(u===0&&p===0)return[];r=Math.abs(r),Q=Math.abs(Q);var y=Math.pow(u,2)/Math.pow(r,2)+Math.pow(p,2)/Math.pow(Q,2);y>1&&(r*=Math.sqrt(y),Q*=Math.sqrt(y));var L=it(n,s,o,a,r,Q,M,m,i,f,u,p),v=at(L,4),k=v[0],I=v[1],S=v[2],V=v[3],C=Math.abs(V)/(_1/4);Math.abs(1-C)<1e-7&&(C=1);var P=Math.max(Math.ceil(C),1);V/=P;for(var T=0;T<P;T++)w.push(rt(S,V)),S+=V;return w.map(function(F){var O=W1(F[0],r,Q,f,i,k,I),Z=O.x,r1=O.y,i1=W1(F[1],r,Q,f,i,k,I),y1=i1.x,V1=i1.y,u1=W1(F[2],r,Q,f,i,k,I),O1=u1.x,x=u1.y;return{x1:Z,y1:r1,x2:y1,y2:V1,x:O1,y:x}})};function Qt(c){for(var e,n=[],s=0,o=0,a=0,r=0,Q=null,d=null,h=0,g=0,M=0,l=c.length;M<l;M++){var m=c[M],w=m[0];switch(w){case"M":a=m[1],r=m[2];break;case"A":var i=ct({px:h,py:g,cx:m[6],cy:m[7],rx:m[1],ry:m[2],xAxisRotation:m[3],largeArcFlag:m[4],sweepFlag:m[5]});if(!i.length)continue;for(var f=0,u;f<i.length;f++)u=i[f],m=["C",u.x1,u.y1,u.x2,u.y2,u.x,u.y],f<i.length-1&&n.push(m);break;case"S":var p=h,y=g;(e=="C"||e=="S")&&(p+=p-s,y+=y-o),m=["C",p,y,m[1],m[2],m[3],m[4]];break;case"T":e=="Q"||e=="T"?(Q=h*2-Q,d=g*2-d):(Q=h,d=g),m=u0(h,g,Q,d,m[1],m[2]);break;case"Q":Q=m[1],d=m[2],m=u0(h,g,m[1],m[2],m[3],m[4]);break;case"L":m=C1(h,g,m[1],m[2]);break;case"H":m=C1(h,g,m[1],g);break;case"V":m=C1(h,g,h,m[1]);break;case"Z":m=C1(h,g,a,r);break}e=w,h=m[m.length-2],g=m[m.length-1],m.length>4?(s=m[m.length-4],o=m[m.length-3]):(s=h,o=g),n.push(m)}return n}function C1(c,e,n,s){return["C",c,e,n,s,n,s]}function u0(c,e,n,s,o,a){return["C",c/3+2/3*n,e/3+2/3*s,o/3+2/3*n,a/3+2/3*s,o,a]}const{abs:g1,cos:a1,sin:f1,acos:ht,atan2:M1,sqrt:c1,pow:K}=Math;function v1(c){return c<0?-K(-c,1/3):K(c,1/3)}const k0=Math.PI,R1=2*k0,Q1=k0/2,lt=1e-6,B1=Number.MAX_SAFE_INTEGER||9007199254740991,X1=Number.MIN_SAFE_INTEGER||-9007199254740991,dt={x:0,y:0,z:0},_={Tvalues:[-.06405689286260563,.06405689286260563,-.1911188674736163,.1911188674736163,-.3150426796961634,.3150426796961634,-.4337935076260451,.4337935076260451,-.5454214713888396,.5454214713888396,-.6480936519369755,.6480936519369755,-.7401241915785544,.7401241915785544,-.820001985973903,.820001985973903,-.8864155270044011,.8864155270044011,-.9382745520027328,.9382745520027328,-.9747285559713095,.9747285559713095,-.9951872199970213,.9951872199970213],Cvalues:[.12793819534675216,.12793819534675216,.1258374563468283,.1258374563468283,.12167047292780339,.12167047292780339,.1155056680537256,.1155056680537256,.10744427011596563,.10744427011596563,.09761865210411388,.09761865210411388,.08619016153195327,.08619016153195327,.0733464814110803,.0733464814110803,.05929858491543678,.05929858491543678,.04427743881741981,.04427743881741981,.028531388628933663,.028531388628933663,.0123412297999872,.0123412297999872],arcfn:function(c,e){const n=e(c);let s=n.x*n.x+n.y*n.y;return typeof n.z<"u"&&(s+=n.z*n.z),c1(s)},compute:function(c,e,n){if(c===0)return e[0].t=0,e[0];const s=e.length-1;if(c===1)return e[s].t=1,e[s];const o=1-c;let a=e;if(s===0)return e[0].t=c,e[0];if(s===1){const Q={x:o*a[0].x+c*a[1].x,y:o*a[0].y+c*a[1].y,t:c};return n&&(Q.z=o*a[0].z+c*a[1].z),Q}if(s<4){let Q=o*o,d=c*c,h,g,M,l=0;s===2?(a=[a[0],a[1],a[2],dt],h=Q,g=o*c*2,M=d):s===3&&(h=Q*o,g=Q*c*3,M=o*d*3,l=c*d);const m={x:h*a[0].x+g*a[1].x+M*a[2].x+l*a[3].x,y:h*a[0].y+g*a[1].y+M*a[2].y+l*a[3].y,t:c};return n&&(m.z=h*a[0].z+g*a[1].z+M*a[2].z+l*a[3].z),m}const r=JSON.parse(JSON.stringify(e));for(;r.length>1;){for(let Q=0;Q<r.length-1;Q++)r[Q]={x:r[Q].x+(r[Q+1].x-r[Q].x)*c,y:r[Q].y+(r[Q+1].y-r[Q].y)*c},typeof r[Q].z<"u"&&(r[Q].z=r[Q].z+(r[Q+1].z-r[Q].z)*c);r.splice(r.length-1,1)}return r[0].t=c,r[0]},computeWithRatios:function(c,e,n,s){const o=1-c,a=n,r=e;let Q=a[0],d=a[1],h=a[2],g=a[3],M;if(Q*=o,d*=c,r.length===2)return M=Q+d,{x:(Q*r[0].x+d*r[1].x)/M,y:(Q*r[0].y+d*r[1].y)/M,z:s?(Q*r[0].z+d*r[1].z)/M:!1,t:c};if(Q*=o,d*=2*o,h*=c*c,r.length===3)return M=Q+d+h,{x:(Q*r[0].x+d*r[1].x+h*r[2].x)/M,y:(Q*r[0].y+d*r[1].y+h*r[2].y)/M,z:s?(Q*r[0].z+d*r[1].z+h*r[2].z)/M:!1,t:c};if(Q*=o,d*=1.5*o,h*=3*o,g*=c*c*c,r.length===4)return M=Q+d+h+g,{x:(Q*r[0].x+d*r[1].x+h*r[2].x+g*r[3].x)/M,y:(Q*r[0].y+d*r[1].y+h*r[2].y+g*r[3].y)/M,z:s?(Q*r[0].z+d*r[1].z+h*r[2].z+g*r[3].z)/M:!1,t:c}},derive:function(c,e){const n=[];for(let s=c,o=s.length,a=o-1;o>1;o--,a--){const r=[];for(let Q=0,d;Q<a;Q++)d={x:a*(s[Q+1].x-s[Q].x),y:a*(s[Q+1].y-s[Q].y)},e&&(d.z=a*(s[Q+1].z-s[Q].z)),r.push(d);n.push(r),s=r}return n},between:function(c,e,n){return e<=c&&c<=n||_.approximately(c,e)||_.approximately(c,n)},approximately:function(c,e,n){return g1(c-e)<=(n||lt)},length:function(c){const n=_.Tvalues.length;let s=0;for(let o=0,a;o<n;o++)a=.5*_.Tvalues[o]+.5,s+=_.Cvalues[o]*_.arcfn(a,c);return .5*s},map:function(c,e,n,s,o){const a=n-e,r=o-s,Q=c-e,d=Q/a;return s+r*d},lerp:function(c,e,n){const s={x:e.x+c*(n.x-e.x),y:e.y+c*(n.y-e.y)};return e.z!==void 0&&n.z!==void 0&&(s.z=e.z+c*(n.z-e.z)),s},pointToString:function(c){let e=c.x+"/"+c.y;return typeof c.z<"u"&&(e+="/"+c.z),e},pointsToString:function(c){return"["+c.map(_.pointToString).join(", ")+"]"},copy:function(c){return JSON.parse(JSON.stringify(c))},angle:function(c,e,n){const s=e.x-c.x,o=e.y-c.y,a=n.x-c.x,r=n.y-c.y,Q=s*r-o*a,d=s*a+o*r;return M1(Q,d)},round:function(c,e){const n=""+c,s=n.indexOf(".");return parseFloat(n.substring(0,s+1+e))},dist:function(c,e){const n=c.x-e.x,s=c.y-e.y;return c1(n*n+s*s)},closest:function(c,e){let n=K(2,63),s,o;return c.forEach(function(a,r){o=_.dist(e,a),o<n&&(n=o,s=r)}),{mdist:n,mpos:s}},abcratio:function(c,e){if(e!==2&&e!==3)return!1;if(typeof c>"u")c=.5;else if(c===0||c===1)return c;const n=K(c,e)+K(1-c,e),s=n-1;return g1(s/n)},projectionratio:function(c,e){if(e!==2&&e!==3)return!1;if(typeof c>"u")c=.5;else if(c===0||c===1)return c;const n=K(1-c,e),s=K(c,e)+n;return n/s},lli8:function(c,e,n,s,o,a,r,Q){const d=(c*s-e*n)*(o-r)-(c-n)*(o*Q-a*r),h=(c*s-e*n)*(a-Q)-(e-s)*(o*Q-a*r),g=(c-n)*(a-Q)-(e-s)*(o-r);return g==0?!1:{x:d/g,y:h/g}},lli4:function(c,e,n,s){const o=c.x,a=c.y,r=e.x,Q=e.y,d=n.x,h=n.y,g=s.x,M=s.y;return _.lli8(o,a,r,Q,d,h,g,M)},lli:function(c,e){return _.lli4(c,c.c,e,e.c)},makeline:function(c,e){return new j(c.x,c.y,(c.x+e.x)/2,(c.y+e.y)/2,e.x,e.y)},findbbox:function(c){let e=B1,n=B1,s=X1,o=X1;return c.forEach(function(a){const r=a.bbox();e>r.x.min&&(e=r.x.min),n>r.y.min&&(n=r.y.min),s<r.x.max&&(s=r.x.max),o<r.y.max&&(o=r.y.max)}),{x:{min:e,mid:(e+s)/2,max:s,size:s-e},y:{min:n,mid:(n+o)/2,max:o,size:o-n}}},shapeintersections:function(c,e,n,s,o){if(!_.bboxoverlap(e,s))return[];const a=[],r=[c.startcap,c.forward,c.back,c.endcap],Q=[n.startcap,n.forward,n.back,n.endcap];return r.forEach(function(d){d.virtual||Q.forEach(function(h){if(h.virtual)return;const g=d.intersects(h,o);g.length>0&&(g.c1=d,g.c2=h,g.s1=c,g.s2=n,a.push(g))})}),a},makeshape:function(c,e,n){const s=e.points.length,o=c.points.length,a=_.makeline(e.points[s-1],c.points[0]),r=_.makeline(c.points[o-1],e.points[0]),Q={startcap:a,forward:c,back:e,endcap:r,bbox:_.findbbox([a,c,e,r])};return Q.intersections=function(d){return _.shapeintersections(Q,Q.bbox,d,d.bbox,n)},Q},getminmax:function(c,e,n){if(!n)return{min:0,max:0};let s=B1,o=X1,a,r;n.indexOf(0)===-1&&(n=[0].concat(n)),n.indexOf(1)===-1&&n.push(1);for(let Q=0,d=n.length;Q<d;Q++)a=n[Q],r=c.get(a),r[e]<s&&(s=r[e]),r[e]>o&&(o=r[e]);return{min:s,mid:(s+o)/2,max:o,size:o-s}},align:function(c,e){const n=e.p1.x,s=e.p1.y,o=-M1(e.p2.y-s,e.p2.x-n),a=function(r){return{x:(r.x-n)*a1(o)-(r.y-s)*f1(o),y:(r.x-n)*f1(o)+(r.y-s)*a1(o)}};return c.map(a)},roots:function(c,e){e=e||{p1:{x:0,y:0},p2:{x:1,y:0}};const n=c.length-1,s=_.align(c,e),o=function(I){return 0<=I&&I<=1};if(n===2){const I=s[0].y,S=s[1].y,V=s[2].y,C=I-2*S+V;if(C!==0){const P=-c1(S*S-I*V),T=-I+S,F=-(P+T)/C,O=-(-P+T)/C;return[F,O].filter(o)}else if(S!==V&&C===0)return[(2*S-V)/(2*S-2*V)].filter(o);return[]}const a=s[0].y,r=s[1].y,Q=s[2].y,d=s[3].y;let h=-a+3*r-3*Q+d,g=3*a-6*r+3*Q,M=-3*a+3*r,l=a;if(_.approximately(h,0)){if(_.approximately(g,0))return _.approximately(M,0)?[]:[-l/M].filter(o);const I=c1(M*M-4*g*l),S=2*g;return[(I-M)/S,(-M-I)/S].filter(o)}g/=h,M/=h,l/=h;const m=(3*M-g*g)/3,w=m/3,i=(2*g*g*g-9*g*M+27*l)/27,f=i/2,u=f*f+w*w*w;let p,y,L,v,k;if(u<0){const I=-m/3,S=I*I*I,V=c1(S),C=-i/(2*V),P=C<-1?-1:C>1?1:C,T=ht(P),F=v1(V),O=2*F;return L=O*a1(T/3)-g/3,v=O*a1((T+R1)/3)-g/3,k=O*a1((T+2*R1)/3)-g/3,[L,v,k].filter(o)}else{if(u===0)return p=f<0?v1(-f):-v1(f),L=2*p-g/3,v=-p-g/3,[L,v].filter(o);{const I=c1(u);return p=v1(-f+I),y=v1(f+I),[p-y-g/3].filter(o)}}},droots:function(c){if(c.length===3){const e=c[0],n=c[1],s=c[2],o=e-2*n+s;if(o!==0){const a=-c1(n*n-e*s),r=-e+n,Q=-(a+r)/o,d=-(-a+r)/o;return[Q,d]}else if(n!==s&&o===0)return[(2*n-s)/(2*(n-s))];return[]}if(c.length===2){const e=c[0],n=c[1];return e!==n?[e/(e-n)]:[]}return[]},curvature:function(c,e,n,s,o){let a,r,Q,d,h=0,g=0;const M=_.compute(c,e),l=_.compute(c,n),m=M.x*M.x+M.y*M.y;if(s?(a=c1(K(M.y*l.z-l.y*M.z,2)+K(M.z*l.x-l.z*M.x,2)+K(M.x*l.y-l.x*M.y,2)),r=K(m+M.z*M.z,3/2)):(a=M.x*l.y-M.y*l.x,r=K(m,3/2)),a===0||r===0)return{k:0,r:0};if(h=a/r,g=r/a,!o){const w=_.curvature(c-.001,e,n,s,!0).k,i=_.curvature(c+.001,e,n,s,!0).k;d=(i-h+(h-w))/2,Q=(g1(i-h)+g1(h-w))/2}return{k:h,r:g,dk:d,adk:Q}},inflections:function(c){if(c.length<4)return[];const e=_.align(c,{p1:c[0],p2:c.slice(-1)[0]}),n=e[2].x*e[1].y,s=e[3].x*e[1].y,o=e[1].x*e[2].y,a=e[3].x*e[2].y,r=18*(-3*n+2*s+3*o-a),Q=18*(3*n-s-3*o),d=18*(o-n);if(_.approximately(r,0)){if(!_.approximately(Q,0)){let l=-d/Q;if(0<=l&&l<=1)return[l]}return[]}const h=2*r;if(_.approximately(h,0))return[];const g=Q*Q-4*r*d;if(g<0)return[];const M=Math.sqrt(g);return[(M-Q)/h,-(Q+M)/h].filter(function(l){return 0<=l&&l<=1})},bboxoverlap:function(c,e){const n=["x","y"],s=n.length;for(let o=0,a,r,Q,d;o<s;o++)if(a=n[o],r=c[a].mid,Q=e[a].mid,d=(c[a].size+e[a].size)/2,g1(r-Q)>=d)return!1;return!0},expandbox:function(c,e){e.x.min<c.x.min&&(c.x.min=e.x.min),e.y.min<c.y.min&&(c.y.min=e.y.min),e.z&&e.z.min<c.z.min&&(c.z.min=e.z.min),e.x.max>c.x.max&&(c.x.max=e.x.max),e.y.max>c.y.max&&(c.y.max=e.y.max),e.z&&e.z.max>c.z.max&&(c.z.max=e.z.max),c.x.mid=(c.x.min+c.x.max)/2,c.y.mid=(c.y.min+c.y.max)/2,c.z&&(c.z.mid=(c.z.min+c.z.max)/2),c.x.size=c.x.max-c.x.min,c.y.size=c.y.max-c.y.min,c.z&&(c.z.size=c.z.max-c.z.min)},pairiteration:function(c,e,n){const s=c.bbox(),o=e.bbox(),a=1e5,r=n||.5;if(s.x.size+s.y.size<r&&o.x.size+o.y.size<r)return[(a*(c._t1+c._t2)/2|0)/a+"/"+(a*(e._t1+e._t2)/2|0)/a];let Q=c.split(.5),d=e.split(.5),h=[{left:Q.left,right:d.left},{left:Q.left,right:d.right},{left:Q.right,right:d.right},{left:Q.right,right:d.left}];h=h.filter(function(M){return _.bboxoverlap(M.left.bbox(),M.right.bbox())});let g=[];return h.length===0||(h.forEach(function(M){g=g.concat(_.pairiteration(M.left,M.right,r))}),g=g.filter(function(M,l){return g.indexOf(M)===l})),g},getccenter:function(c,e,n){const s=e.x-c.x,o=e.y-c.y,a=n.x-e.x,r=n.y-e.y,Q=s*a1(Q1)-o*f1(Q1),d=s*f1(Q1)+o*a1(Q1),h=a*a1(Q1)-r*f1(Q1),g=a*f1(Q1)+r*a1(Q1),M=(c.x+e.x)/2,l=(c.y+e.y)/2,m=(e.x+n.x)/2,w=(e.y+n.y)/2,i=M+Q,f=l+d,u=m+h,p=w+g,y=_.lli8(M,l,i,f,m,w,u,p),L=_.dist(y,c);let v=M1(c.y-y.y,c.x-y.x),k=M1(e.y-y.y,e.x-y.x),I=M1(n.y-y.y,n.x-y.x),S;return v<I?((v>k||k>I)&&(v+=R1),v>I&&(S=I,I=v,v=S)):I<k&&k<v?(S=I,I=v,v=S):I+=R1,y.s=v,y.e=I,y.r=L,y},numberSort:function(c,e){return c-e}};class H1{constructor(e){this.curves=[],this._3d=!1,e&&(this.curves=e,this._3d=this.curves[0]._3d)}valueOf(){return this.toString()}toString(){return"["+this.curves.map(function(e){return _.pointsToString(e.points)}).join(", ")+"]"}addCurve(e){this.curves.push(e),this._3d=this._3d||e._3d}length(){return this.curves.map(function(e){return e.length()}).reduce(function(e,n){return e+n})}curve(e){return this.curves[e]}bbox(){const e=this.curves;for(var n=e[0].bbox(),s=1;s<e.length;s++)_.expandbox(n,e[s].bbox());return n}offset(e){const n=[];return this.curves.forEach(function(s){n.push(...s.offset(e))}),new H1(n)}}const{abs:L1,min:f0,max:p0,cos:ut,sin:ft,acos:pt,sqrt:x1}=Math,mt=Math.PI;class j{constructor(e){let n=e&&e.forEach?e:Array.from(arguments).slice(),s=!1;if(typeof n[0]=="object"){s=n.length;const m=[];n.forEach(function(w){["x","y","z"].forEach(function(i){typeof w[i]<"u"&&m.push(w[i])})}),n=m}let o=!1;const a=n.length;if(s){if(s>4){if(arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");o=!0}}else if(a!==6&&a!==8&&a!==9&&a!==12&&arguments.length!==1)throw new Error("Only new Bezier(point[]) is accepted for 4th and higher order curves");const r=this._3d=!o&&(a===9||a===12)||e&&e[0]&&typeof e[0].z<"u",Q=this.points=[];for(let m=0,w=r?3:2;m<a;m+=w){var d={x:n[m],y:n[m+1]};r&&(d.z=n[m+2]),Q.push(d)}const h=this.order=Q.length-1,g=this.dims=["x","y"];r&&g.push("z"),this.dimlen=g.length;const M=_.align(Q,{p1:Q[0],p2:Q[h]}),l=_.dist(Q[0],Q[h]);this._linear=M.reduce((m,w)=>m+L1(w.y),0)<l/50,this._lut=[],this._t1=0,this._t2=1,this.update()}static quadraticFromPoints(e,n,s,o){if(typeof o>"u"&&(o=.5),o===0)return new j(n,n,s);if(o===1)return new j(e,n,n);const a=j.getABC(2,e,n,s,o);return new j(e,a.A,s)}static cubicFromPoints(e,n,s,o,a){typeof o>"u"&&(o=.5);const r=j.getABC(3,e,n,s,o);typeof a>"u"&&(a=_.dist(n,r.C));const Q=a*(1-o)/o,d=_.dist(e,s),h=(s.x-e.x)/d,g=(s.y-e.y)/d,M=a*h,l=a*g,m=Q*h,w=Q*g,i={x:n.x-M,y:n.y-l},f={x:n.x+m,y:n.y+w},u=r.A,p={x:u.x+(i.x-u.x)/(1-o),y:u.y+(i.y-u.y)/(1-o)},y={x:u.x+(f.x-u.x)/o,y:u.y+(f.y-u.y)/o},L={x:e.x+(p.x-e.x)/o,y:e.y+(p.y-e.y)/o},v={x:s.x+(y.x-s.x)/(1-o),y:s.y+(y.y-s.y)/(1-o)};return new j(e,L,v,s)}static getUtils(){return _}getUtils(){return j.getUtils()}static get PolyBezier(){return H1}valueOf(){return this.toString()}toString(){return _.pointsToString(this.points)}toSVG(){if(this._3d)return!1;const e=this.points,n=e[0].x,s=e[0].y,o=["M",n,s,this.order===2?"Q":"C"];for(let a=1,r=e.length;a<r;a++)o.push(e[a].x),o.push(e[a].y);return o.join(" ")}setRatios(e){if(e.length!==this.points.length)throw new Error("incorrect number of ratio values");this.ratios=e,this._lut=[]}verify(){const e=this.coordDigest();e!==this._print&&(this._print=e,this.update())}coordDigest(){return this.points.map(function(e,n){return""+n+e.x+e.y+(e.z?e.z:0)}).join("")}update(){this._lut=[],this.dpoints=_.derive(this.points,this._3d),this.computedirection()}computedirection(){const e=this.points,n=_.angle(e[0],e[this.order],e[1]);this.clockwise=n>0}length(){return _.length(this.derivative.bind(this))}static getABC(e=2,n,s,o,a=.5){const r=_.projectionratio(a,e),Q=1-r,d={x:r*n.x+Q*o.x,y:r*n.y+Q*o.y},h=_.abcratio(a,e);return{A:{x:s.x+(s.x-d.x)/h,y:s.y+(s.y-d.y)/h},B:s,C:d,S:n,E:o}}getABC(e,n){n=n||this.get(e);let s=this.points[0],o=this.points[this.order];return j.getABC(this.order,s,n,o,e)}getLUT(e){if(this.verify(),e=e||100,this._lut.length===e+1)return this._lut;this._lut=[],e++,this._lut=[];for(let n=0,s,o;n<e;n++)o=n/(e-1),s=this.compute(o),s.t=o,this._lut.push(s);return this._lut}on(e,n){n=n||5;const s=this.getLUT(),o=[];for(let a=0,r,Q=0;a<s.length;a++)r=s[a],_.dist(r,e)<n&&(o.push(r),Q+=a/s.length);return o.length?t/=o.length:!1}project(e){const n=this.getLUT(),s=n.length-1,o=_.closest(n,e),a=o.mpos,r=(a-1)/s,Q=(a+1)/s,d=.1/s;let h=o.mdist,g=r,M=g,l;h+=1;for(let m;g<Q+d;g+=d)l=this.compute(g),m=_.dist(e,l),m<h&&(h=m,M=g);return M=M<0?0:M>1?1:M,l=this.compute(M),l.t=M,l.d=h,l}get(e){return this.compute(e)}point(e){return this.points[e]}compute(e){return this.ratios?_.computeWithRatios(e,this.points,this.ratios,this._3d):_.compute(e,this.points,this._3d,this.ratios)}raise(){const e=this.points,n=[e[0]],s=e.length;for(let o=1,a,r;o<s;o++)a=e[o],r=e[o-1],n[o]={x:(s-o)/s*a.x+o/s*r.x,y:(s-o)/s*a.y+o/s*r.y};return n[s]=e[s-1],new j(n)}derivative(e){return _.compute(e,this.dpoints[0],this._3d)}dderivative(e){return _.compute(e,this.dpoints[1],this._3d)}align(){let e=this.points;return new j(_.align(e,{p1:e[0],p2:e[e.length-1]}))}curvature(e){return _.curvature(e,this.dpoints[0],this.dpoints[1],this._3d)}inflections(){return _.inflections(this.points)}normal(e){return this._3d?this.__normal3(e):this.__normal2(e)}__normal2(e){const n=this.derivative(e),s=x1(n.x*n.x+n.y*n.y);return{t:e,x:-n.y/s,y:n.x/s}}__normal3(e){const n=this.derivative(e),s=this.derivative(e+.01),o=x1(n.x*n.x+n.y*n.y+n.z*n.z),a=x1(s.x*s.x+s.y*s.y+s.z*s.z);n.x/=o,n.y/=o,n.z/=o,s.x/=a,s.y/=a,s.z/=a;const r={x:s.y*n.z-s.z*n.y,y:s.z*n.x-s.x*n.z,z:s.x*n.y-s.y*n.x},Q=x1(r.x*r.x+r.y*r.y+r.z*r.z);r.x/=Q,r.y/=Q,r.z/=Q;const d=[r.x*r.x,r.x*r.y-r.z,r.x*r.z+r.y,r.x*r.y+r.z,r.y*r.y,r.y*r.z-r.x,r.x*r.z-r.y,r.y*r.z+r.x,r.z*r.z];return{t:e,x:d[0]*n.x+d[1]*n.y+d[2]*n.z,y:d[3]*n.x+d[4]*n.y+d[5]*n.z,z:d[6]*n.x+d[7]*n.y+d[8]*n.z}}hull(e){let n=this.points,s=[],o=[],a=0;for(o[a++]=n[0],o[a++]=n[1],o[a++]=n[2],this.order===3&&(o[a++]=n[3]);n.length>1;){s=[];for(let r=0,Q,d=n.length-1;r<d;r++)Q=_.lerp(e,n[r],n[r+1]),o[a++]=Q,s.push(Q);n=s}return o}split(e,n){if(e===0&&n)return this.split(n).left;if(n===1)return this.split(e).right;const s=this.hull(e),o={left:this.order===2?new j([s[0],s[3],s[5]]):new j([s[0],s[4],s[7],s[9]]),right:this.order===2?new j([s[5],s[4],s[2]]):new j([s[9],s[8],s[6],s[3]]),span:s};return o.left._t1=_.map(0,0,1,this._t1,this._t2),o.left._t2=_.map(e,0,1,this._t1,this._t2),o.right._t1=_.map(e,0,1,this._t1,this._t2),o.right._t2=_.map(1,0,1,this._t1,this._t2),n?(n=_.map(n,e,1,0,1),o.right.split(n).left):o}extrema(){const e={};let n=[];return this.dims.forEach((function(s){let o=function(r){return r[s]},a=this.dpoints[0].map(o);e[s]=_.droots(a),this.order===3&&(a=this.dpoints[1].map(o),e[s]=e[s].concat(_.droots(a))),e[s]=e[s].filter(function(r){return r>=0&&r<=1}),n=n.concat(e[s].sort(_.numberSort))}).bind(this)),e.values=n.sort(_.numberSort).filter(function(s,o){return n.indexOf(s)===o}),e}bbox(){const e=this.extrema(),n={};return this.dims.forEach((function(s){n[s]=_.getminmax(this,s,e[s])}).bind(this)),n}overlaps(e){const n=this.bbox(),s=e.bbox();return _.bboxoverlap(n,s)}offset(e,n){if(typeof n<"u"){const s=this.get(e),o=this.normal(e),a={c:s,n:o,x:s.x+o.x*n,y:s.y+o.y*n};return this._3d&&(a.z=s.z+o.z*n),a}if(this._linear){const s=this.normal(0),o=this.points.map(function(a){const r={x:a.x+e*s.x,y:a.y+e*s.y};return a.z&&s.z&&(r.z=a.z+e*s.z),r});return[new j(o)]}return this.reduce().map(function(s){return s._linear?s.offset(e)[0]:s.scale(e)})}simple(){if(this.order===3){const o=_.angle(this.points[0],this.points[3],this.points[1]),a=_.angle(this.points[0],this.points[3],this.points[2]);if(o>0&&a<0||o<0&&a>0)return!1}const e=this.normal(0),n=this.normal(1);let s=e.x*n.x+e.y*n.y;return this._3d&&(s+=e.z*n.z),L1(pt(s))<mt/3}reduce(){let e,n=0,s=0,o=.01,a,r=[],Q=[],d=this.extrema().values;for(d.indexOf(0)===-1&&(d=[0].concat(d)),d.indexOf(1)===-1&&d.push(1),n=d[0],e=1;e<d.length;e++)s=d[e],a=this.split(n,s),a._t1=n,a._t2=s,r.push(a),n=s;return r.forEach(function(h){for(n=0,s=0;s<=1;)for(s=n+o;s<=1+o;s+=o)if(a=h.split(n,s),!a.simple()){if(s-=o,L1(n-s)<o)return[];a=h.split(n,s),a._t1=_.map(n,0,1,h._t1,h._t2),a._t2=_.map(s,0,1,h._t1,h._t2),Q.push(a),n=s;break}n<1&&(a=h.split(n,1),a._t1=_.map(n,0,1,h._t1,h._t2),a._t2=h._t2,Q.push(a))}),Q}translate(e,n,s){s=typeof s=="number"?s:n;const o=this.order;let a=this.points.map((r,Q)=>(1-Q/o)*n+Q/o*s);return new j(this.points.map((r,Q)=>({x:r.x+e.x*a[Q],y:r.y+e.y*a[Q]})))}scale(e){const n=this.order;let s=!1;if(typeof e=="function"&&(s=e),s&&n===2)return this.raise().scale(s);const o=this.clockwise,a=this.points;if(this._linear)return this.translate(this.normal(0),s?s(0):e,s?s(1):e);const r=s?s(0):e,Q=s?s(1):e,d=[this.offset(0,10),this.offset(1,10)],h=[],g=_.lli4(d[0],d[0].c,d[1],d[1].c);if(!g)throw new Error("cannot scale this curve. Try reducing it first.");return[0,1].forEach(function(M){const l=h[M*n]=_.copy(a[M*n]);l.x+=(M?Q:r)*d[M].n.x,l.y+=(M?Q:r)*d[M].n.y}),s?([0,1].forEach(function(M){if(!(n===2&&M)){var l=a[M+1],m={x:l.x-g.x,y:l.y-g.y},w=s?s((M+1)/n):e;s&&!o&&(w=-w);var i=x1(m.x*m.x+m.y*m.y);m.x/=i,m.y/=i,h[M+1]={x:l.x+w*m.x,y:l.y+w*m.y}}}),new j(h)):([0,1].forEach(M=>{if(n===2&&M)return;const l=h[M*n],m=this.derivative(M),w={x:l.x+m.x,y:l.y+m.y};h[M+1]=_.lli4(l,w,g,a[M+1])}),new j(h))}outline(e,n,s,o){if(n=n===void 0?e:n,this._linear){const v=this.normal(0),k=this.points[0],I=this.points[this.points.length-1];let S,V,C;s===void 0&&(s=e,o=n),S={x:k.x+v.x*e,y:k.y+v.y*e},C={x:I.x+v.x*s,y:I.y+v.y*s},V={x:(S.x+C.x)/2,y:(S.y+C.y)/2};const P=[S,V,C];S={x:k.x-v.x*n,y:k.y-v.y*n},C={x:I.x-v.x*o,y:I.y-v.y*o},V={x:(S.x+C.x)/2,y:(S.y+C.y)/2};const T=[C,V,S],F=_.makeline(T[2],P[0]),O=_.makeline(P[2],T[0]),Z=[F,new j(P),O,new j(T)];return new H1(Z)}const a=this.reduce(),r=a.length,Q=[];let d=[],h,g=0,M=this.length();const l=typeof s<"u"&&typeof o<"u";function m(v,k,I,S,V){return function(C){const P=S/I,T=(S+V)/I,F=k-v;return _.map(C,0,1,v+P*F,v+T*F)}}a.forEach(function(v){const k=v.length();l?(Q.push(v.scale(m(e,s,M,g,k))),d.push(v.scale(m(-n,-o,M,g,k)))):(Q.push(v.scale(e)),d.push(v.scale(-n))),g+=k}),d=d.map(function(v){return h=v.points,h[3]?v.points=[h[3],h[2],h[1],h[0]]:v.points=[h[2],h[1],h[0]],v}).reverse();const w=Q[0].points[0],i=Q[r-1].points[Q[r-1].points.length-1],f=d[r-1].points[d[r-1].points.length-1],u=d[0].points[0],p=_.makeline(f,w),y=_.makeline(i,u),L=[p].concat(Q).concat([y]).concat(d);return new H1(L)}outlineshapes(e,n,s){n=n||e;const o=this.outline(e,n).curves,a=[];for(let r=1,Q=o.length;r<Q/2;r++){const d=_.makeshape(o[r],o[Q-r],s);d.startcap.virtual=r>1,d.endcap.virtual=r<Q/2-1,a.push(d)}return a}intersects(e,n){return e?e.p1&&e.p2?this.lineIntersects(e):(e instanceof j&&(e=e.reduce()),this.curveintersects(this.reduce(),e,n)):this.selfintersects(n)}lineIntersects(e){const n=f0(e.p1.x,e.p2.x),s=f0(e.p1.y,e.p2.y),o=p0(e.p1.x,e.p2.x),a=p0(e.p1.y,e.p2.y);return _.roots(this.points,e).filter(r=>{var Q=this.get(r);return _.between(Q.x,n,o)&&_.between(Q.y,s,a)})}selfintersects(e){const n=this.reduce(),s=n.length-2,o=[];for(let a=0,r,Q,d;a<s;a++)Q=n.slice(a,a+1),d=n.slice(a+2),r=this.curveintersects(Q,d,e),o.push(...r);return o}curveintersects(e,n,s){const o=[];e.forEach(function(r){n.forEach(function(Q){r.overlaps(Q)&&o.push({left:r,right:Q})})});let a=[];return o.forEach(function(r){const Q=_.pairiteration(r.left,r.right,s);Q.length>0&&(a=a.concat(Q))}),a}arcs(e){return e=e||.5,this._iterate(e,[])}_error(e,n,s,o){const a=(o-s)/4,r=this.get(s+a),Q=this.get(o-a),d=_.dist(e,n),h=_.dist(e,r),g=_.dist(e,Q);return L1(h-d)+L1(g-d)}_iterate(e,n){let s=0,o=1,a;do{a=0,o=1;let r=this.get(s),Q,d,h,g,M=!1,l=!1,m,w=o,i=1;do if(l=M,g=h,w=(s+o)/2,Q=this.get(w),d=this.get(o),h=_.getccenter(r,Q,d),h.interval={start:s,end:o},M=this._error(h,r,s,o)<=e,m=l&&!M,m||(i=o),M){if(o>=1){if(h.interval.end=i=1,g=h,o>1){let u={x:h.x+h.r*ut(h.e),y:h.y+h.r*ft(h.e)};h.e+=_.angle({x:h.x,y:h.y},u,this.get(1))}break}o=o+(o-s)/2}else o=w;while(!m&&a++<100);if(a>=100)break;g=g||h,n.push(g),s=i}while(o<1);return n}}class S0{#t=document.createElementNS("http://www.w3.org/2000/svg","svg");#e=document.createElementNS("http://www.w3.org/2000/svg","path");constructor(){this.#t.style.width="0",this.#t.style.height="0",this.#t.style.position="absolute",this.#t.appendChild(this.#e),document.body.appendChild(this.#t)}getBBox(){return this.#e.getBBox()}get d(){return this.#e.getAttribute("d")??""}set d(e){this.#e.style.d="",this.#e.style.d=z.cssifyPath(e);const n=this.#e.style.d!="";if(this.#e.style.d="",n)this.#e.setAttribute("d",e);else throw new Error("Invalid path")}get empty(){return this.d==""}clear(){this.d=""}get length(){return this.#e.getTotalLength()}getPoint(e){return this.#e.getPointAtLength(e)}load(e){typeof e!="string"&&(e instanceof z||(e=new z([e])),e=e.rawPath),this.d=e}measure(e){return this.load(e),this.length}}const G=new Intl.NumberFormat("en-US",{maximumSignificantDigits:8,useGrouping:!1}).format;class X{constructor(e,n,s,o){this.x0=e,this.y0=n,this.x=s,this.y=o,$.assertFinite(e,n,s,o),this.asString=`L ${G(s)},${G(o)}`,this.outgoingAngle=this.incomingAngle=Math.atan2(o-n,s-e)}reverse(){return new X(this.x,this.y,this.x0,this.y0)}toJSON(){return{command:"L",x0:this.x0,y0:this.y0,x:this.x,y:this.y}}static relative(e,n,s,o){return new this(e,n,s+e,o+n)}incomingAngle;outgoingAngle;command="L";asString;get length(){return Math.hypot(this.x0-this.x,this.y0-this.y)}translate(e,n){return new X(this.x0+e,this.y0+n,this.x+e,this.y+n)}toCubic(){return new o1(this.x0,this.y0,$.lerp(this.x0,this.x,1/3),$.lerp(this.y0,this.y,1/3),$.lerp(this.x0,this.x,2/3),$.lerp(this.y0,this.y,2/3),this.x,this.y)}transform(e){const n=n1(this.x,this.y,e),s=n1(this.x0,this.y0,e);return new X(s.x,s.y,n.x,n.y)}}class U{constructor(e,n,s,o,a,r,Q){this.x0=e,this.y0=n,this.x1=s,this.y1=o,this.x=a,this.y=r,this.creationInfo=Q,$.assertFinite(e,n,s,o,a,r),this.asString=`Q ${G(s)},${G(o)} ${G(a)},${G(r)}`}reverse(){return U.controlPoints(this.x,this.y,this.x1,this.y1,this.x0,this.y0)}static line(e,n,s,o,a){return new this(e,n,(e+s)/2,(n+o)/2,s,o,a)}static line4(e,n,s,o){return this.line(e,n,s,o,{source:"line"})}static line2(e,n){return this.line4(e.x,e.y,n.x,n.y)}static angles(e,n,s,o,a,r){$.assertFinite(e,n,s,o,a,r);const Q=Ht({x0:e,y0:n,angle:s},{x0:o,y0:a,angle:r+Math.PI});return Q?new this(e,n,Q.x,Q.y,o,a,{source:"angles",success:!0,angle:r,angle0:s}):this.line(e,n,o,a,{source:"angles",success:!1,angle:r,angle0:s})}newAngles(e,n){return e??=this.requestedIncomingAngle,n??=this.requestedOutgoingAngle,U.angles(this.x0,this.y0,e,this.x,this.y,n)}toJSON(){return{command:"Q",x0:this.x0,y0:this.y0,x1:this.x1,y1:this.y1,x:this.x,y:this.y,creationInfo:this.creationInfo}}static controlPoints(e,n,s,o,a,r){return new this(e,n,s,o,a,r,{source:"controlPoints"})}static relative(e,n,s,o,a,r){return this.controlPoints(e,n,s+e,o+n,a+e,r+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y1,this.x-this.x1)}get requestedIncomingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle0:this.incomingAngle}get requestedOutgoingAngle(){return this.creationInfo.source=="angles"?this.creationInfo.angle:this.outgoingAngle}command="Q";asString;translate(e,n){return U.controlPoints(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x+e,this.y+n)}transform(e){const n=n1(this.x0,this.y0,e),s=n1(this.x1,this.y1,e),o=n1(this.x,this.y,e);return U.controlPoints(n.x,n.y,s.x,s.y,o.x,o.y)}toCubic(){return new o1(this.x0,this.y0,$.lerp(this.x0,this.x1,2/3),$.lerp(this.y0,this.y1,2/3),$.lerp(this.x,this.x1,2/3),$.lerp(this.y,this.y1,2/3),this.x,this.y)}split(e){const{x:n,x0:s,x1:o,y:a,y0:r,y1:Q}=this,d=s,h=r,g=(1-e)*s+e*o,M=(1-e)*r+e*Q,l=(1-e)**2*s+2*(1-e)*e*o+e**2*n,m=(1-e)**2*r+2*(1-e)*e*Q+e**2*a,w=U.controlPoints(d,h,g,M,l,m),i=l,f=m,u=(1-e)*o+e*n,p=(1-e)*Q+e*a,y=n,L=a,v=U.controlPoints(i,f,u,p,y,L);return[w,v]}multiSplit(e){if($.assertFinite(e),e<1||(e|0)!=e)throw new Error("wtf");const n=[];let s=this;for(;e>1;){const o=1/e;let a;[a,s]=s.split(o),n.push(a),e--}return n.push(s),n}}class o1{constructor(e,n,s,o,a,r,Q,d){this.x0=e,this.y0=n,this.x1=s,this.y1=o,this.x2=a,this.y2=r,this.x=Q,this.y=d,$.assertFinite(e,n,s,o,a,r,Q,d),this.asString=`C ${G(s)},${G(o)} ${G(a)},${G(r)} ${G(Q)},${G(d)}`}reverse(){return new o1(this.x,this.y,this.x2,this.y2,this.x1,this.y1,this.x0,this.y0)}static relative(e,n,s,o,a,r,Q,d){return new this(e,n,s+e,o+n,a+e,r+n,Q+e,d+n)}get incomingAngle(){return Math.atan2(this.y1-this.y0,this.x1-this.x0)}get outgoingAngle(){return Math.atan2(this.y-this.y2,this.x-this.x2)}command="C";asString;translate(e,n){return new o1(this.x0+e,this.y0+n,this.x1+e,this.y1+n,this.x2+e,this.y2+n,this.x+e,this.y+n)}transform(e){const n=n1(this.x0,this.y0,e),s=n1(this.x1,this.y1,e),o=n1(this.x2,this.y2,e),a=n1(this.x,this.y,e);return new o1(n.x,n.y,s.x,s.y,o.x,o.y,a.x,a.y)}toCubic(){return this}}class b{get commands(){return this.#t}addCommand(e){this.#t.push(e),this.#e=void 0}addCommands(e){return e.forEach(n=>this.addCommand(n)),this}static fromStrings(e){let n=e.join(" ");const s=[];let o;for(;n=n.replace(/^ */,""),n!="";){let a=_0.exec(n);if(a){const r=$.parseFloatX(a[1]),Q=$.parseFloatX(a[2]);if(r===void 0||Q===void 0)throw console.error(a,r,Q,this),new Error("wtf");o&&s.push(o),o=this.M(r,Q),n=a[3];continue}if(o){if(a=H0.exec(n),a){const r=$.parseFloatX(a[1]),Q=$.parseFloatX(a[2]);if(r===void 0||Q===void 0)throw console.error(a,r,Q,this),new Error("wtf");o=o.L(r,Q),n=a[3];continue}if(a=A0.exec(n),a){const r=$.parseFloatX(a[1]),Q=$.parseFloatX(a[2]),d=$.parseFloatX(a[3]),h=$.parseFloatX(a[4]);if(r===void 0||Q===void 0||d===void 0||h===void 0)throw console.error(a,r,Q,d,h,this),new Error("wtf");o=o.Q(r,Q,d,h),n=a[5];continue}if(a=$0.exec(n),a){const r=$.parseFloatX(a[1]),Q=$.parseFloatX(a[2]),d=$.parseFloatX(a[3]),h=$.parseFloatX(a[4]),g=$.parseFloatX(a[5]),M=$.parseFloatX(a[6]);if(r===void 0||Q===void 0||d===void 0||h===void 0||g===void 0||M===void 0)throw console.error(a,r,Q,d,h,g,M,this),new Error("wtf");o=o.C(r,Q,d,h,g,M),n=a[7];continue}}throw console.error(n),new Error("wtf")}return o&&s.push(o),s}static M(e,n){const s=new b;return s.M(e,n),s}#t=[];get pathShape(){return new z(this.#t)}#e;M(e,n,s=NaN){return $.assertFinite(e,n),this.#e={x:e,y:n,outgoingAngle:s},this}previous(){return this.#e??this.#t.at(-1)}H(e){const n=this.previous();return this.addCommand(new X(n.x,n.y,e,n.y)),this}V(e){const n=this.previous();return this.addCommand(new X(n.x,n.y,n.x,e)),this}L(e,n){const s=this.previous();return this.addCommand(new X(s.x,s.y,e,n)),this}Q(e,n,s,o){const a=this.previous();return this.addCommand(U.controlPoints(a.x,a.y,e,n,s,o)),this}Q_HV(e,n){const s=this.previous();return this.Q(e,s.y,e,n)}Q_VH(e,n){const s=this.previous();return this.Q(s.x,n,e,n)}Q_angles(e,n,s,o){const a=this.previous();if(o??=a.outgoingAngle,o===void 0)throw new Error("wtf");return this.addCommand(U.angles(a.x,a.y,o,e,n,s)),this}C(e,n,s,o,a,r){const Q=this.previous();return this.addCommand(new o1(Q.x,Q.y,e,n,s,o,a,r)),this}circle(e,n,s="cw"){const o=this.previous(),a=o.x,r=o.y,Q=Math.atan2(r-n,a-e),d=Math.hypot(r-n,a-e),h=s=="cw"?1:-1,g=Q+Math.PI*2*h,M=$.makeLinear(0,Q,1,g);function l(i){switch(i){case 0:case 1:return o;default:{const f=M(i),u=$.polarToRectangular(d,f);return{x:e+u.x,y:n+u.y}}}}function m(i){return l(i)}return this.addParametricPath(m,8),this}arc(e,n,s,o,a){const r=this.previous(),Q=r.x,d=r.y;let h=$.positiveModulo(Math.atan2(d-n,Q-e),Math.PI*2);const g=Math.hypot(d-n,Q-e);let M=$.positiveModulo(Math.atan2(o-n,s-e),Math.PI*2);const l=Math.hypot(o-n,s-e);a=="cw"?h>M&&(M+=Math.PI*2):h<M&&(h+=Math.PI*2);const m=Math.abs(h-M),w=Math.ceil(m*1.17+1e-4),i=$.makeLinear(0,g,1,l),f=$.makeLinear(0,h,1,M);function u(p){switch(p){case 0:return r;case 1:return{x:s,y:o};default:{const y=$.polarToRectangular(i(p),f(p));return{x:e+y.x,y:n+y.y}}}}return this.addParametricPath(u,w)}addParametricPath(e,n){if(n<=0)throw new Error("wtf");const s=1e-4/n,o=$.initializedArray(n+1,a=>{const r=a/n,Q=e(r),d=b0(e,r,s);return{t:r,point:Q,direction:d}});if(o.some(a=>!isFinite(a.direction))){const{x:a,y:r}=o[0].point;if($.assertFinite(a,r),o.some(Q=>Q.point.x!=a||Q.point.y!=r))throw new Error("Unable to create a path from this function.  Unable to compute the derivative.");for(let Q=0;Q<n;Q++)this.Q(a,r,a,r)}else $.initializedArray(n,r=>({from:o[r],to:o[r+1]})).forEach(r=>{this.Q_angles(r.to.point.x,r.to.point.y,r.to.direction,r.from.direction)});return this}}function m0(c,e,n){if(!(e>=0&&e<=1))throw new Error("Expected 0 ≤ t ≤ 1");const s=Math.max(0,e-n),o=c(s),a=Math.min(1,e+n),r=c(a),Q=r.x-o.x,d=r.y-o.y;return Q==0&&d==0?NaN:Math.atan2(d,Q)}function b0(c,e,n){const s=m0(c,e,n*2),o=m0(c,e,n*1),a=s-o;return o-a}const t1=" *",R="(-?[0-9]+\\.?[0-9]*(?:[eE][-+]?[0-9]+)?)",W="(?: *[, ] *|(?=-))",_0=new RegExp(`^M${t1}${R}${W}${R}(.*)$`),yt=new RegExp(`^m${t1}${R}${W}${R}(.*)$`),H0=new RegExp(`^L${t1}${R}${W}${R}(.*)$`),y0=new RegExp(`^${W}${R}${W}${R}(.*)$`),gt=new RegExp(`^l${t1}${R}${W}${R}(.*)$`),Mt=new RegExp(`^H${t1}${R}(.*)$`),vt=new RegExp(`^h${t1}${R}(.*)$`),Lt=new RegExp(`^V${t1}${R}(.*)$`),xt=new RegExp(`^v${t1}${R}(.*)$`),I0=new RegExp(`^${W}${R}(.*)$`),wt=I0,A0=new RegExp(`^Q${t1}${R}${W}${R}${W}${R}${W}${R}(.*)$`),Et=new RegExp(`^${W}${R}${W}${R}${W}${R}${W}${R}(.*)$`),kt=new RegExp(`^q${t1}${R}${W}${R}${W}${R}${W}${R}(.*)$`),$0=new RegExp(`^C${t1}${R}${W}${R}${W}${R}${W}${R}${W}${R}${W}${R}(.*)$`),g0=new RegExp(`^${W}${R}${W}${R}${W}${R}${W}${R}${W}${R}${W}${R}(.*)$`),St=new RegExp(`^c${t1}${R}${W}${R}${W}${R}${W}${R}${W}${R}${W}${R}(.*)$`),bt=new RegExp("^[zZ](.*)$");class _t extends Error{constructor(e,n){super(e),this.where=n}}class z{getLength(){const e=Qt(ot(et(this.rawPath)));let n=0;return e.forEach((s,o)=>{if(o>0){const a=e[o-1];if(s[0]!="C")throw new Error("wtf");const Q=a.at(-2),d=a.at(-1);if(typeof Q!="number"||typeof d!="number")throw new Error("wtf");const h=[Q,d,...s.slice(1)],g=new j(h);n+=g.length()}}),n}reverse(){return new z(this.commands.toReversed().map(e=>e.reverse()))}static fromString(e){const n=this.fromJson(e);if(n)return n;let s=e,o=null;const a=l=>new _t(l,s),r=l=>{const m=$.parseFloatX(l);if(m===void 0)throw a(`Invalid number: "${l}"`);return m};let Q=0,d=0;const h=[],g=l=>{h.push(l),Q=l.x,d=l.y};let M;for(;s=s.replace(/^ */,""),s!="";){if(o=_0.exec(s)){Q=r(o[1]),d=r(o[2]),M={x0:Q,y0:d},s=o[3];continue}if(o=yt.exec(s)){for(Q+=r(o[1]),d+=r(o[2]),M={x0:Q,y0:d},s=o[3];o=y0.exec(s);){const l=X.relative(Q,d,r(o[1]),r(o[2]));g(l),s=o[3]}continue}if(!M)throw a("Must start with an M command.");if(o=bt.exec(s)){if(Q!=M.x0||d!=M.y0){const l=new X(Q,d,M.x0,M.y0);g(l)}s=o[1];continue}if(o=H0.exec(s)){const l=r(o[1]),m=r(o[2]),w=new X(Q,d,l,m);g(w),s=o[3];continue}if(o=gt.exec(s)){for(;o;){const l=r(o[1]),m=r(o[2]),w=X.relative(Q,d,l,m);g(w),s=o[3],o=y0.exec(s)}continue}if(o=Mt.exec(s)){const l=r(o[1]),m=new X(Q,d,l,d);g(m),s=o[2];continue}if(o=vt.exec(s)){for(;o;){const l=r(o[1]),m=new X(Q,d,Q+l,d);g(m),s=o[2],o=wt.exec(s)}continue}if(o=Lt.exec(s)){const l=r(o[1]),m=new X(Q,d,Q,l);g(m),s=o[2];continue}if(o=xt.exec(s)){for(;o;){const l=r(o[1]),m=new X(Q,d,Q,d+l);g(m),s=o[2],o=I0.exec(s)}continue}if(o=A0.exec(s)){const l=r(o[1]),m=r(o[2]),w=r(o[3]),i=r(o[4]),f=U.controlPoints(Q,d,l,m,w,i);g(f),s=o[5];continue}if(o=kt.exec(s)){for(;o;){const l=r(o[1]),m=r(o[2]),w=r(o[3]),i=r(o[4]),f=U.relative(Q,d,l,m,w,i);g(f),s=o[5],o=Et.exec(s)}continue}if(o=$0.exec(s)){for(;o;){const l=r(o[1]),m=r(o[2]),w=r(o[3]),i=r(o[4]),f=r(o[5]),u=r(o[6]),p=new o1(Q,d,l,m,w,i,f,u);g(p),s=o[7],o=g0.exec(s)}continue}if(o=St.exec(s)){for(;o;){const l=r(o[1]),m=r(o[2]),w=r(o[3]),i=r(o[4]),f=r(o[5]),u=r(o[6]),p=o1.relative(Q,d,l,m,w,i,f,u);g(p),s=o[7],o=g0.exec(s)}continue}throw a("Confused.")}return new this(h)}static fromJson(e){try{const s=JSON.parse(e).commands.map(o=>{switch(o.command){case"C":{const{x0:a,y0:r,x1:Q,y1:d,x2:h,y2:g,x:M,y:l}=o;return new o1(a,r,Q,d,h,g,M,l)}case"L":{const{x0:a,y0:r,x:Q,y:d}=o;return new X(a,r,Q,d)}case"Q":{const{x0:a,y0:r,x:Q,y:d,creationInfo:h}=o;switch(h.source){case"angles":{const{angle0:g,angle:M}=h,l=U.angles(a,r,g,Q,d,M);return(l.creationInfo.source!="angles"||l.creationInfo.success!=h.success)&&console.warn("different",o,l),l}case"controlPoints":{const{x1:g,y1:M}=o;return U.controlPoints(a,r,g,M,Q,d)}case"line":return U.line4(a,r,Q,d);default:throw new Error(`Unknown source: "${h.source}"`)}}default:throw new Error(`Unknown command: "${o.command}"`)}});return new z(s)}catch{return}}matchForMorph(e){const n=this.commands.map(Q=>Q.toCubic()),s=e.commands.map(Q=>Q.toCubic());if(n.length!=s.length){const{shorter:Q,longer:d}=n.length<s.length?{shorter:n,longer:s}:{shorter:s,longer:n};if(Q.length==0)throw new Error("can't morph something into nothing");const h=d.length/Q.length,g=[];Q.forEach((M,l)=>{const m=Math.round((l+1)*h);for(;g.length<m;)g.push(M)}),Q.length=0,Q.push(...g)}if(n.length!=s.length)throw new Error("wtf");function o(Q){return z.cssifyPath(Q.map(d=>new z([d]).rawPath).join())}const a=o(n),r=o(s);return[a,r]}commands;get endX(){return this.commands.at(-1)?.x}get endY(){return this.commands.at(-1)?.y}get startX(){return this.commands.at(0)?.x0}get startY(){return this.commands.at(0)?.y0}constructor(e){this.commands=[...e]}static cssifyPath(e){return`path('${e}')`}get cssPath(){return z.cssifyPath(this.rawPath)}makeElement(){const e=document.createElementNS("http://www.w3.org/2000/svg","path"),n=this.cssPath;if(e.style.d=n,e.style.d=="")throw console.error(n,e),new Error("wtf");return e}static needAnM(e,n){return n?!e||e.x!=n.x0||e.y!=n.y0:!1}get rawPath(){return this.splitOnMove().flatMap(e=>{const n=[`M ${G(e.startX)},${G(e.startY)}`];return e.commands.forEach(s=>n.push(s.asString)),e.startX==e.endX&&e.startY==e.endY&&n.push("Z"),n}).join(" ")}splitOnMove(){const e=[];let n=[];return this.commands.forEach(s=>{z.needAnM(n.at(-1),s)&&(n=[],e.push(n)),n.push(s)}),e.map(s=>new z(s))}static join(e){return new z(e.flatMap(({Δx:n,Δy:s,shape:o})=>o.translate(n,s).commands))}convertToCubics(){return new z(this.commands.map(e=>e.toCubic()))}translate(e,n){return new z(this.commands.map(s=>s.translate(e,n)))}transform(e){return new z(this.commands.map(n=>n.transform(e)))}static parametric(e,n){const s=e(0);return b.M(s.x,s.y).addParametricPath(e,n).pathShape}static glitchFreeParametric(e,n){const s=this.#e(e,n,0);return $.assertNonNullable(s)}static#t=new S0;static#e(e,n,s){if(s>0&&console.log(s),s>=4){console.log("⚝");return}const a=this.parametric(e,n).commands.map((d,h,g)=>{const M=h/g.length,l=(h+1)/g.length;return{command:d,initialT:M,finalT:l}});let r=0;const Q=d=>{const h=new this([d]);this.#t.d=h.rawPath;const g=this.#t.length,M=Math.hypot(d.x0-d.x,d.y0-d.y),l=g/M;return l<2||!isFinite(l)};for(;r<a.length;){const d=a[r].command;if(Q(d))r++;else{const h=Math.max(0,r-1);let g=r+1;for(;g<a.length;){const p=a[g].command;if(g++,Q(p))break}const M=a[h].initialT,l=a[g-1].finalT,m=$.makeLinear(0,M,1,l),w=p=>e(m(p)),i=g-h,f=i+1,u=this.#e(w,f,s+1);if(u===void 0){if(s>0)return;const p=a[r],{x0:y,y0:L,x:v,y:k}=p.command;p.command=U.line4(y,L,v,k),r++}else a.splice(h,i,...u.commands.map((p,y,L)=>{const v=m(y/L.length),k=m((y+1)/L.length);return{command:p,initialT:v,finalT:k}})),r+=f}}return new z(a.map(d=>d.command))}static fixAngleRounding(e){return e+400-400}static toDegrees(e){return Math.round(e*$.degreesPerRadian*100)/100}dump(){const e=this.commands.map((n,s)=>{const{x0:o,y0:a,x:r,y:Q,incomingAngle:d,outgoingAngle:h,command:g}=n,M=document.createElementNS("http://www.w3.org/2000/svg","path");M.setAttribute("d",new z([n]).rawPath);const l=M.getTotalLength(),m=this.commands[s-1],i=z.needAnM(m,n)?{}:{difference:z.toDegrees($.angleBetween(m.outgoingAngle,d))};return{x0:o,y0:a,x:r,y:Q,incomingAngle:z.toDegrees(d),outgoingAngle:z.toDegrees(h),length:l,c:g,...i}});console.table(e),console.log(this.rawPath),console.log(JSON.stringify(this))}}function Ht(c,e){if($.assertFinite(c.x0,c.y0,c.angle,e.x0,e.y0,e.angle),isNaN(c.angle)||isNaN(e.angle)||c.angle==e.angle)return;const n=Math.tan(c.angle),s=Math.tan(e.angle),o=Math.abs(n)*100>Number.MAX_SAFE_INTEGER,a=Math.abs(s)*100>Number.MAX_SAFE_INTEGER;if(o&&a)return;const r=Math.atan2(e.y0-c.y0,e.x0-c.x0),Q=$.angleBetween(c.angle,r),d=$.angleBetween(e.angle,r);if(Q==0||Math.abs(d)==Math.PI){if(Math.abs(Q)==Math.PI||d==0)return;const M=(c.x0+e.x0)/2,l=(c.y0+e.y0)/2;return{x:M,y:l}}const h=Math.sign(Q),g=Math.sign(d);if(!(h!=g||h==0)&&!(Math.abs(d)<=Math.abs(Q)+$.radiansPerDegree))if(o||a){const M=o?c.x0:e.x0,l=o?{...e,slope:s}:{...c,slope:n},m=l.slope*(M-l.x0)+l.y0;return{x:M,y:m}}else{const M=(e.y0-s*e.x0-c.y0+n*c.x0)/(n-s),l=n*(M-c.x0)+c.y0;return{x:M,y:l}}}function It(c){if(!(c instanceof U))throw new Error("wtf");if(c.creationInfo.source!="angles")throw new Error("wtf");return c}class I1{constructor(e,n=16,s){this.f=e;const o=z.parametric(e,n);this.#e=o.commands.map((a,r,Q)=>{const d=r/Q.length,h=(r+1)/Q.length;return this.#o(d,h,It(a))}).sort((a,r)=>a.metric-r.metric),s===void 0&&(I1.#t.load(o),s=I1.#t.getBBox()),typeof s!="number"&&(s=Math.hypot(s.height,s.width)),this.#n=.001*s}static#t=new S0;#e;#n;get commands(){return this.#e}#a(e){this.#e.splice(this.#e.findLastIndex(n=>n.metric<=e.metric)+1,0,e)}#o(e,n,s){let a=0;{const d=[{x:s.x0,y:s.y0}];for(let h=1;h<4;h++){const g=h/4,M=$.lerp(e,n,g);d.push(this.f(M))}d.push({x:s.x,y:s.y}),d.forEach((h,g)=>{const M=d[g+1];M&&(a+=Math.hypot(h.x-M.x,h.y-M.y))})}const r=I1.#t.measure(s),Q=Math.abs(a-r);return s.creationInfo.success,{startT:e,endT:n,command:s,polyLineLength:a,curveLength:r,metric:Q}}add(e){for(let n=0;n<e;n++)this.addOne()}addOne(){const e=this.#e.pop(),{startT:n,endT:s}=e,o=(n+s)/2,a=this.f(o),r=1e-4*(o-n),Q=b0(this.f,o,r),d=U.angles(e.command.x0,e.command.y0,e.command.requestedIncomingAngle,a.x,a.y,Q),h=this.#o(n,o,d);this.#a(h);const g=U.angles(a.x,a.y,Q,e.command.x,e.command.y,e.command.requestedOutgoingAngle),M=this.#o(o,s,g);return this.#a(M),{toSplit:e,firstCommandInfo:h,secondCommandInfo:M}}done(){return this.commands.at(-1).metric<this.#n}go(e=50){for(let n=0;n<e&&!this.done();n++)this.addOne()}get pathShape(){return new z(this.#e.toSorted((e,n)=>e.startT-n.startT).map(({command:e})=>e))}summarize(){function e(n){n.sort((g,M)=>g-M);const s=n.length;function o(g){const l=(n.length-1)*g;if(Number.isInteger(l))return n[l];{const m=Math.floor(l),w=m+1,i=l-m;return $.lerp(n[m],n[w],i)}}if(n.length<2)throw new Error("wtf");const a=$.initializedArray(5,g=>o(g/4));let r=0,Q=0;n.forEach(g=>{r+=g,Q+=g*g});const d=r/s,h=Math.sqrt((Q-s*d*d)/(s-1));return{quartiles:a,mean:d,standardDeviation:h}}return{polyLineLength:e(this.#e.map(({polyLineLength:n})=>n)),curveLength:e(this.#e.map(({curveLength:n})=>n)),metric:e(this.#e.map(({metric:n})=>n)),tCoverage:e(this.#e.map(({startT:n,endT:s})=>s-n)),generation:e(this.#e.map(({startT:n,endT:s})=>-Math.log2(s-n))),count:this.#e.length}}dump(){console.table(this.commands.map(({startT:e,endT:n,metric:s,curveLength:o})=>({startT:e,tCoverage:n-e,generation:-Math.log2(n-e),metric:s,curveLength:o})))}static chordRatio(e){const n=$.FULL_CIRCLE/e,s=2*Math.sin(n/2);return n/s}}window.ParametricToPath=I1;const At=-26,$t=8,Vt=16,Ct=1,Rt=0,Tt=21,zt=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 5,-19 Q 4,-19 4,-20 Q 4,-21 5,-21 Q 5.5857864,-21 6,-20 Q 6.3007391,-19.273951 6,-18 Q 5.7849593,-17.089073 5,-16 Q 4.5811388,-15.418861 4,-15","advance":10},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 9,-21 L 1,0 M 9,-21 L 17,0 M 4,-7 L 14,-7","advance":18},{"key":"B","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.618034,-11.145898 13,-11 M 4,-11 L 13,-11 Q 14.381966,-11 16,-10 Q 16.503548,-9.6887901 17,-9 Q 17.784959,-7.9109272 18,-7 Q 18.354102,-5.5 18,-4 Q 17.784959,-3.0890728 17,-2 Q 16.503548,-1.3112099 16,-1 Q 14.381966,0.0000000000000002220446 13,0 L 4,0","advance":21},{"key":"C","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.662278,-3.9188612 18,-5","advance":21},{"key":"D","d":"M 4,-21 L 4,0 M 4,-21 L 11,-21 Q 12.381966,-21 14,-20 Q 15.007096,-19.37758 16,-18 Q 16.403407,-17.440302 17,-16 Q 17.84371,-13.963105 18,-13 Q 18.405694,-10.5 18,-8 Q 17.84371,-7.0368952 17,-5 Q 16.403407,-3.5596976 16,-3 Q 15.007096,-1.6224198 14,-1 Q 12.381966,0.0000000000000002220446 11,0 L 4,0","advance":21},{"key":"E","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11 M 4,0 L 17,0","advance":19},{"key":"F","d":"M 4,-21 L 4,0 M 4,-21 L 17,-21 M 4,-11 L 12,-11","advance":18},{"key":"G","d":"M 18,-16 Q 17.662278,-17.081139 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Q 8.0890728,-20.784959 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.784959,-4.0890728 18,-5 Q 18.354102,-6.5 18,-8 M 13,-8 L 18,-8","advance":21},{"key":"H","d":"M 4,-21 L 4,0 M 18,-21 L 18,0 M 4,-11 L 18,-11","advance":22},{"key":"I","d":"M 4,-21 L 4,0","advance":8},{"key":"J","d":"M 12,-21 L 12,-5 Q 12,-3.618034 11,-2 Q 10.68879,-1.4964518 10,-1 Q 8.9109272,-0.21504074 8,0 Q 7,0.23606798 6,0 Q 5.0890728,-0.21504074 4,-1 Q 3.3112099,-1.4964518 3,-2 Q 2.3041135,-3.125968 2,-5 Q 1.8377223,-6 2,-7","advance":16},{"key":"K","d":"M 4,-21 L 4,0 M 18,-21 L 4,-7 M 9,-12 L 18,0","advance":21},{"key":"L","d":"M 4,-21 L 4,0 L 16,0","advance":17},{"key":"M","d":"M 4,-21 L 4,0 M 4,-21 L 12,0 M 20,-21 L 12,0 M 20,-21 L 20,0","advance":24},{"key":"N","d":"M 4,-21 L 4,0 M 4,-21 L 18,0 M 18,-21 L 18,0","advance":22},{"key":"O","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z","advance":22},{"key":"P","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.354102,-15.5 18,-14 Q 17.784959,-13.089073 17,-12 Q 16.503548,-11.31121 16,-11 Q 14.381966,-10 13,-10 L 4,-10","advance":21},{"key":"Q","d":"M 9,-21 Q 7.9188612,-20.662278 7,-20 Q 5.8377223,-19.162278 5,-18 Q 4.5965928,-17.440302 4,-16 Q 3.1562904,-13.963105 3,-13 Q 2.5943058,-10.5 3,-8 Q 3.1562904,-7.0368952 4,-5 Q 4.5965928,-3.5596976 5,-3 Q 5.8377223,-1.8377223 7,-1 Q 8.0890728,-0.21504074 9,0 Q 11,0.47213595 13,0 Q 13.910927,-0.21504074 15,-1 Q 16.162278,-1.8377223 17,-3 Q 17.403407,-3.5596976 18,-5 Q 18.84371,-7.0368952 19,-8 Q 19.405694,-10.5 19,-13 Q 18.84371,-13.963105 18,-16 Q 17.403407,-17.440302 17,-18 Q 16.162278,-19.162278 15,-20 Q 13.910927,-20.784959 13,-21 Q 11,-21.472136 9,-21 Z M 12,-4 L 18,2","advance":22},{"key":"R","d":"M 4,-21 L 4,0 M 4,-21 L 13,-21 Q 14.381966,-21 16,-20 Q 16.503548,-19.68879 17,-19 Q 17.784959,-17.910927 18,-17 Q 18.236068,-16 18,-15 Q 17.784959,-14.089073 17,-13 Q 16.503548,-12.31121 16,-12 Q 14.381966,-11 13,-11 L 4,-11 M 11,-11 L 18,0","advance":21},{"key":"S","d":"M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"T","d":"M 8,-21 L 8,0 M 1,-21 L 15,-21","advance":16},{"key":"U","d":"M 4,-21 L 4,-6 Q 4,-4.618034 5,-3 Q 5.763932,-1.763932 7,-1 Q 8.125968,-0.30411354 10,0 Q 11,0.16227766 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.236068,-1.763932 17,-3 Q 18,-4.618034 18,-6 L 18,-21","advance":22},{"key":"V","d":"M 1,-21 L 9,0 M 17,-21 L 9,0","advance":18},{"key":"W","d":"M 2,-21 L 7,0 M 12,-21 L 7,0 M 12,-21 L 17,0 M 22,-21 L 17,0","advance":24},{"key":"X","d":"M 3,-21 L 17,0 M 17,-21 L 3,0","advance":20},{"key":"Y","d":"M 1,-21 L 9,-11 L 9,0 M 17,-21 L 9,-11","advance":18},{"key":"Z","d":"M 17,-21 L 3,0 M 3,-21 L 17,-21 M 3,0 L 17,0","advance":20},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 18,7","advance":18},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 15,-14 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"b","d":"M 4,-21 L 4,0 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"c","d":"M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"d","d":"M 15,-21 L 15,0 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"e","d":"M 3,-8 L 15,-8 Q 15.472136,-8 15,-10 Q 14.784959,-10.910927 14,-12 Q 13.581139,-12.581139 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":18},{"key":"f","d":"M 10,-21 Q 9,-21.236068 8,-21 Q 6.575679,-20.663763 6,-20 Q 5,-18.84699 5,-17 L 5,0 M 2,-14 L 9,-14","advance":12},{"key":"g","d":"M 15,-14 L 15,2 Q 15,3.381966 14,5 Q 13.68879,5.5035482 13,6 Q 11.910927,6.7849593 11,7 Q 9.5,7.354102 8,7 Q 6.881966,6.736068 6,6 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"h","d":"M 4,-21 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"i","d":"M 3,-21 Q 3,-20 4,-20 Q 5,-20 5,-21 Q 5,-22 4,-22 Q 3,-22 3,-21 Z M 4,-14 L 4,0","advance":8},{"key":"j","d":"M 5,-21 Q 5,-20 6,-20 Q 7,-20 7,-21 Q 7,-22 6,-22 Q 5,-22 5,-21 Z M 6,-14 L 6,3 Q 6,4.8469903 5,6 Q 4.424321,6.6637634 3,7 Q 2,7.236068 1,7","advance":10},{"key":"k","d":"M 4,-21 L 4,0 M 14,-14 L 4,-4 M 8,-8 L 15,0","advance":17},{"key":"l","d":"M 4,-21 L 4,0","advance":8},{"key":"m","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0 M 15,-10 Q 16.256584,-11.743416 18,-13 Q 19.089073,-13.784959 20,-14 Q 21.5,-14.354102 23,-14 Q 24.424321,-13.663763 25,-13 Q 26,-11.84699 26,-10 L 26,0","advance":30},{"key":"n","d":"M 4,-14 L 4,0 M 4,-10 Q 5.2565835,-11.743416 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14 Q 13.424321,-13.663763 14,-13 Q 15,-11.84699 15,-10 L 15,0","advance":19},{"key":"o","d":"M 8,-14 Q 6.9188612,-13.662278 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.37758,-1.9929036 15,-3 Q 15.695886,-4.125968 16,-6 Q 16.162278,-7 16,-8 Q 15.695886,-9.874032 15,-11 Q 14.37758,-12.007096 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Z","advance":19},{"key":"p","d":"M 4,-14 L 4,7 M 4,-11 Q 4.8377223,-12.162278 6,-13 Q 7.0890728,-13.784959 8,-14 Q 9.5,-14.354102 11,-14 Q 11.910927,-13.784959 13,-13 Q 14.37758,-12.007096 15,-11 Q 15.695886,-9.874032 16,-8 Q 16.162278,-7 16,-6 Q 15.695886,-4.125968 15,-3 Q 14.37758,-1.9929036 13,-1 Q 11.910927,-0.21504074 11,0 Q 9.5,0.35410197 8,0 Q 7.0890728,-0.21504074 6,-1 Q 4.8377223,-1.8377223 4,-3","advance":19},{"key":"q","d":"M 15,-14 L 15,7 M 15,-11 Q 14.162278,-12.162278 13,-13 Q 11.910927,-13.784959 11,-14 Q 9.5,-14.354102 8,-14 Q 7.0890728,-13.784959 6,-13 Q 4.6224198,-12.007096 4,-11 Q 3.3041135,-9.874032 3,-8 Q 2.8377223,-7 3,-6 Q 3.3041135,-4.125968 4,-3 Q 4.6224198,-1.9929036 6,-1 Q 7.0890728,-0.21504074 8,0 Q 9.5,0.35410197 11,0 Q 11.910927,-0.21504074 13,-1 Q 14.162278,-1.8377223 15,-3","advance":19},{"key":"r","d":"M 4,-14 L 4,0 M 4,-8 Q 4.145898,-9.618034 5,-11 Q 5.6224198,-12.007096 7,-13 Q 8.0890728,-13.784959 9,-14 Q 10.5,-14.354102 12,-14","advance":13},{"key":"s","d":"M 14,-11 Q 13.914214,-12.207107 13,-13 Q 12.272122,-13.631285 10,-14 Q 8.5,-14.243416 7,-14 Q 4.7278782,-13.631285 4,-13 Q 3,-12.132705 3,-11 Q 3,-10 4,-9 Q 4.75,-8.25 6,-8 L 11,-7 Q 12.25,-6.75 13,-6 Q 13.690983,-5.309017 14,-4 Q 14.118034,-3.5 14,-3 Q 13.663763,-1.575679 13,-1 Q 12.272122,-0.36871462 10,0 Q 8.5,0.24341649 7,0 Q 4.7278782,-0.36871462 4,-1 Q 3.0857864,-1.7928932 3,-3","advance":17},{"key":"t","d":"M 5,-21 L 5,-4 Q 5,-2.1530097 6,-1 Q 6.575679,-0.33623659 8,0 Q 9,0.23606798 10,0 M 2,-14 L 9,-14","advance":12},{"key":"u","d":"M 4,-14 L 4,-4 Q 4,-2.1530097 5,-1 Q 5.575679,-0.33623659 7,0 Q 8.5,0.35410197 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.743416,-2.2565835 15,-4 M 15,-14 L 15,0","advance":19},{"key":"v","d":"M 2,-14 L 8,0 M 14,-14 L 8,0","advance":16},{"key":"w","d":"M 3,-14 L 7,0 M 11,-14 L 7,0 M 11,-14 L 15,0 M 19,-14 L 15,0","advance":22},{"key":"x","d":"M 3,-14 L 14,0 M 14,-14 L 3,0","advance":17},{"key":"y","d":"M 2,-14 L 8,0 M 14,-14 L 8,0 Q 6.7047906,3.0221553 6,4 Q 5.1622777,5.1622777 4,6 Q 2.9109272,6.7849593 2,7 Q 1.5,7.118034 1,7","advance":16},{"key":"z","d":"M 14,-14 L 3,0 M 3,-14 L 14,-14 M 3,0 L 14,0","advance":17},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),Pt={top:At,bottom:$t,spaceWidth:Vt,strokeWidth:Ct,kerning:Rt,mHeight:Tt,letters:zt},Ot=-25,Ft=12,Nt=16,Dt=1,Wt=0,Bt=21,Xt=JSON.parse('[{"key":" ","d":"","advance":16},{"key":"!","d":"M 5,-21 L 5,-7 M 5,-2 Q 4,-2 4,-1 Q 4,0.00000000000000012246468 5,0 Q 6,0 6,-1 Q 6,-2 5,-2 Z","advance":10},{"key":"\\"","d":"M 4,-21 L 4,-14 M 12,-21 L 12,-14","advance":16},{"key":"#","d":"M 11,-25 L 4,7 M 17,-25 L 10,7 M 4,-12 L 18,-12 M 3,-6 L 17,-6","advance":21},{"key":"$","d":"M 8,-25 L 8,4 M 12,-25 L 12,4 M 17,-18 Q 16.236068,-19.236068 15,-20 Q 13.874032,-20.695886 12,-21 Q 10,-21.324555 8,-21 Q 6.125968,-20.695886 5,-20 Q 3.4253094,-19.026788 3,-18 Q 2.6992609,-17.273951 3,-16 Q 3.2150407,-15.089073 4,-14 Q 4.4188612,-13.418861 5,-13 Q 5.8603796,-12.379873 7,-12 L 13,-10 Q 14.13962,-9.6201265 15,-9 Q 15.581139,-8.5811388 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.451109,-4.0890728 17,-3 Q 16.574691,-1.9732123 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.763932,-1.763932 3,-3","advance":20},{"key":"%","d":"M 21,-21 L 3,0 M 8,-21 Q 9.4142136,-20.414214 10,-19 Q 10.300739,-18.273951 10,-17 Q 9.690983,-15.690983 9,-15 Q 8.309017,-14.309017 7,-14 Q 5.7260485,-13.699261 5,-14 Q 3.5857864,-14.585786 3,-16 Q 2.6992609,-16.726049 3,-18 Q 3.309017,-19.309017 4,-20 Q 4.690983,-20.690983 6,-21 Q 7.3585702,-21.320715 8,-21 L 10,-20 Q 11.519494,-19.240253 13,-19 Q 14.5,-18.756584 16,-19 Q 16.963105,-19.15629 19,-20 Q 20.035534,-20.428932 21,-21 M 17,-7 Q 15.833333,-6.8333333 15,-6 Q 14.309017,-5.309017 14,-4 Q 13.699261,-2.7260485 14,-2 Q 14.585786,-0.58578644 16,0 Q 16.726049,0.30073915 18,0 Q 19.309017,-0.30901699 20,-1 Q 20.690983,-1.690983 21,-3 Q 21.300739,-4.2739515 21,-5 Q 20.414214,-6.4142136 19,-7 Q 18,-7.4142136 17,-7 Z","advance":24},{"key":"&","d":"M 23,-12 Q 23.207107,-12.5 23,-13 Q 22.707107,-13.707107 22,-14 Q 21.5,-14.207107 21,-14 Q 20.60191,-13.835106 20,-13 Q 19.550592,-12.376479 19,-11 L 17,-6 Q 16.562261,-4.9056517 15,-3 Q 13.880899,-1.6349159 13,-1 Q 11.910927,-0.21504074 11,0 Q 9,0.47213595 7,0 Q 6.0890728,-0.21504074 5,-1 Q 4.4188612,-1.4188612 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.763932,-5 3,-6 Q 3.2150407,-6.9109272 4,-8 Q 4.5252118,-8.7286925 5,-9 L 12,-13 Q 12.474788,-13.271308 13,-14 Q 13.784959,-15.089073 14,-16 Q 14.236068,-17 14,-18 Q 13.690983,-19.309017 13,-20 Q 12,-21 11,-21 Q 10,-21 9,-20 Q 8.309017,-19.309017 8,-18 Q 7.8076617,-17.185242 8,-16 Q 8.2320166,-14.570249 9,-13 Q 9.1717605,-12.648812 11,-10 Q 15.090218,-4.0739613 16,-3 Q 17.214879,-1.5658828 18,-1 Q 19.089073,-0.21504074 20,0 Q 21.273951,0.30073915 22,0 Q 22.707107,-0.29289322 23,-1 Q 23.207107,-1.5 23,-2","advance":26},{"key":"’","d":"M 2,-14 L 2,-10","advance":4},{"key":"(","d":"M 11,-25 Q 9.9009805,-24.09902 9,-23 Q 8.1132681,-21.918361 7,-20 Q 5.4647144,-17.354427 5,-16 Q 4.2902733,-13.931476 4,-11 Q 3.801961,-9 4,-7 Q 4.2902733,-4.0685242 5,-2 Q 5.4647144,-0.64557287 7,2 Q 8.1132681,3.918361 9,5 Q 9.9009805,6.0990195 11,7","advance":14},{"key":")","d":"M 3,-25 Q 4.0990195,-24.09902 5,-23 Q 5.8867319,-21.918361 7,-20 Q 8.5352856,-17.354427 9,-16 Q 9.7097267,-13.931476 10,-11 Q 10.198039,-9 10,-7 Q 9.7097267,-4.0685242 9,-2 Q 8.5352856,-0.64557287 7,2 Q 5.8867319,3.918361 5,5 Q 4.0990195,6.0990195 3,7","advance":14},{"key":"*","d":"M 8,-15 L 8,-3 M 3,-12 L 13,-6 M 13,-12 L 3,-6","advance":16},{"key":"+","d":"M 13,-18 L 13,0 M 4,-9 L 22,-9","advance":26},{"key":",","d":"M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"-","d":"M 4,-9 L 22,-9","advance":26},{"key":".","d":"M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":"/","d":"M 20,-25 L 2,7","advance":22},{"key":"0","d":"M 9,-21 Q 7.3284461,-21.014662 6,-20 Q 4.8921428,-19.153823 4,-17 Q 3.3364804,-15.398122 3,-12 Q 2.8514707,-10.5 3,-9 Q 3.3364804,-5.6018781 4,-4 Q 4.8921428,-1.8461767 6,-1 Q 6.8531197,-0.34839071 9,0 Q 10,0.16227766 11,0 Q 13.14688,-0.34839071 14,-1 Q 15.107857,-1.8461767 16,-4 Q 16.66352,-5.6018781 17,-9 Q 17.148529,-10.5 17,-12 Q 16.66352,-15.398122 16,-17 Q 15.107857,-19.153823 14,-20 Q 13.14688,-20.651609 11,-21 Q 10,-21.162278 9,-21 Z","advance":20},{"key":"1","d":"M 6,-17 Q 7.0811388,-17.337722 8,-18 Q 9.7434165,-19.256584 11,-21 L 11,0","advance":20},{"key":"2","d":"M 4,-16 Q 3.881966,-16.5 4,-17 Q 4.2150407,-17.910927 5,-19 Q 5.4188612,-19.581139 6,-20 Q 7.0890728,-20.784959 8,-21 Q 10,-21.472136 12,-21 Q 12.910927,-20.784959 14,-20 Q 14.581139,-19.581139 15,-19 Q 15.784959,-17.910927 16,-17 Q 16.236068,-16 16,-15 Q 15.88984,-14.533354 15,-13 Q 13.617218,-10.617218 13,-10 L 3,0 L 17,0","advance":20},{"key":"3","d":"M 5,-21 L 16,-21 L 10,-13 Q 11.5,-13.354102 13,-13 Q 13.910927,-12.784959 15,-12 Q 15.68879,-11.503548 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"4","d":"M 13,-21 L 3,-7 L 18,-7 M 13,-21 L 13,0","advance":20},{"key":"5","d":"M 15,-21 L 5,-21 L 4,-12 Q 4.381966,-12.618034 5,-13 Q 6.125968,-13.695886 8,-14 Q 9.5,-14.243416 11,-14 Q 12.874032,-13.695886 14,-13 Q 15.236068,-12.236068 16,-11 Q 16.695886,-9.874032 17,-8 Q 17.162278,-7 17,-6 Q 16.695886,-4.125968 16,-3 Q 15.236068,-1.763932 14,-1 Q 12.874032,-0.30411354 11,0 Q 9.5,0.24341649 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.3377223,-2.9188612 3,-4","advance":20},{"key":"6","d":"M 16,-18 Q 15.914214,-19.207107 15,-20 Q 14.272122,-20.631285 12,-21 Q 11,-21.162278 10,-21 Q 7.8531197,-20.651609 7,-20 Q 5.8921428,-19.153823 5,-17 Q 4.3364804,-15.398122 4,-12 Q 3.7256083,-9.2289128 4,-7 Q 4.3513984,-4.145554 5,-3 Q 5.6653554,-1.8248557 7,-1 Q 8.125968,-0.30411354 10,0 Q 10.5,0.08113883 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.236068,-1.763932 16,-3 Q 16.695886,-4.125968 17,-6 Q 17.081139,-6.5 17,-7 Q 16.695886,-8.874032 16,-10 Q 15.236068,-11.236068 14,-12 Q 12.874032,-12.695886 11,-13 Q 10.5,-13.081139 10,-13 Q 8.125968,-12.695886 7,-12 Q 5.763932,-11.236068 5,-10 Q 4.145898,-8.618034 4,-7","advance":20},{"key":"7","d":"M 17,-21 L 7,0 M 3,-21 L 17,-21","advance":20},{"key":"8","d":"M 8,-21 Q 6.2928932,-21.12132 5,-20 Q 4.3362366,-19.424321 4,-18 Q 3.763932,-17 4,-16 Q 4.309017,-14.690983 5,-14 Q 5.6666667,-13.333333 7,-13 L 11,-12 Q 13.320715,-11.419821 14,-11 Q 15.007096,-10.37758 16,-9 Q 16.784959,-7.9109272 17,-7 Q 17.354102,-5.5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 4.4964518,-1.3112099 4,-2 Q 3.2150407,-3.0890728 3,-4 Q 2.645898,-5.5 3,-7 Q 3.2150407,-7.9109272 4,-9 Q 4.9929036,-10.37758 6,-11 Q 6.6792851,-11.419821 9,-12 L 13,-13 Q 14.333333,-13.333333 15,-14 Q 15.690983,-14.690983 16,-16 Q 16.236068,-17 16,-18 Q 15.663763,-19.424321 15,-20 Q 14.272122,-20.631285 12,-21 Q 10,-21.324555 8,-21 Z","advance":20},{"key":"9","d":"M 16,-14 Q 15.854102,-12.381966 15,-11 Q 14.236068,-9.763932 13,-9 Q 11.874032,-8.3041135 10,-8 Q 9.5,-7.9188612 9,-8 Q 7.125968,-8.3041135 6,-9 Q 4.763932,-9.763932 4,-11 Q 3.3041135,-12.125968 3,-14 Q 2.9188612,-14.5 3,-15 Q 3.3041135,-16.874032 4,-18 Q 4.763932,-19.236068 6,-20 Q 7.125968,-20.695886 9,-21 Q 9.5,-21.081139 10,-21 Q 11.874032,-20.695886 13,-20 Q 14.334645,-19.175144 15,-18 Q 15.648602,-16.854446 16,-14 Q 16.274392,-11.771087 16,-9 Q 15.66352,-5.6018781 15,-4 Q 14.107857,-1.8461767 13,-1 Q 12.14688,-0.34839071 10,0 Q 9,0.16227766 8,0 Q 5.7278782,-0.36871462 5,-1 Q 4.0857864,-1.7928932 4,-3","advance":20},{"key":":","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 4,-5 Q 3,-5 3,-4 Q 3,-3 4,-3 Q 5,-3 5,-4 Q 5,-5 4,-5 Z","advance":8},{"key":";","d":"M 4,-12 Q 3,-12 3,-11 Q 3,-10 4,-10 Q 5,-10 5,-11 Q 5,-12 4,-12 Z M 5,-4 Q 5,-3 4,-3 Q 3,-3 3,-4 Q 3,-5 4,-5 Q 4.5857864,-5 5,-4 Q 5.4142136,-3 5,-2 Q 4.4142136,-0.58578644 3,0","advance":8},{"key":"<","d":"M 20,-18 L 4,-9 L 20,0","advance":24},{"key":"=","d":"M 4,-12 L 22,-12 M 4,-6 L 22,-6","advance":26},{"key":">","d":"M 4,-18 L 20,-9 L 4,0","advance":24},{"key":"?","d":"M 3,-16 Q 2.881966,-16.5 3,-17 Q 3.2150407,-17.910927 4,-19 Q 4.4188612,-19.581139 5,-20 Q 6.0890728,-20.784959 7,-21 Q 9,-21.472136 11,-21 Q 11.910927,-20.784959 13,-20 Q 13.581139,-19.581139 14,-19 Q 14.784959,-17.910927 15,-17 Q 15.236068,-16 15,-15 Q 14.784959,-14.089073 14,-13 Q 13.581139,-12.418861 13,-12 Q 11.162278,-10.675445 9,-10 L 9,-7 M 9,-2 Q 8,-2 8,-1 Q 8,0.00000000000000012246468 9,0 Q 10,0 10,-1 Q 10,-2 9,-2 Z","advance":18},{"key":"@","d":"M 18,-13 Q 17.833333,-14.166667 17,-15 Q 16.309017,-15.690983 15,-16 Q 13.5,-16.354102 12,-16 Q 11.089073,-15.784959 10,-15 Q 9.3112099,-14.503548 9,-14 Q 8.3041135,-12.874032 8,-11 Q 7.7114926,-9.2221371 8,-8 Q 8.309017,-6.690983 9,-6 Q 9.690983,-5.309017 11,-5 Q 12.5,-4.645898 14,-5 Q 15.309017,-5.309017 16,-6 Q 16.833333,-6.8333333 17,-8 M 12,-16 Q 10.763932,-15.236068 10,-14 Q 9.3041135,-12.874032 9,-11 Q 8.7114926,-9.2221371 9,-8 Q 9.2150407,-7.0890728 10,-6 Q 10.418861,-5.4188612 11,-5 M 18,-16 L 17,-8 Q 16.792057,-6.3364584 17,-6 Q 17.381966,-5.381966 19,-5 Q 20.273951,-4.6992609 21,-5 Q 22.026788,-5.4253094 23,-7 Q 23.695886,-8.125968 24,-10 Q 24.162278,-11 24,-12 Q 23.84371,-12.963105 23,-15 Q 22.403407,-16.440302 22,-17 Q 21.162278,-18.162278 20,-19 Q 19.440302,-19.403407 18,-20 Q 15.963105,-20.84371 15,-21 Q 13.5,-21.243416 12,-21 Q 11.036895,-20.84371 9,-20 Q 7.5596976,-19.403407 7,-19 Q 5.8377223,-18.162278 5,-17 Q 4.5965928,-16.440302 4,-15 Q 3.1562904,-12.963105 3,-12 Q 2.7565835,-10.5 3,-9 Q 3.1562904,-8.0368952 4,-6 Q 4.5965928,-4.5596976 5,-4 Q 5.8377223,-2.8377223 7,-2 Q 7.5596976,-1.5965928 9,-1 Q 11.036895,-0.1562904 12,0 Q 13.5,0.24341649 15,0 Q 15.963105,-0.1562904 18,-1 Q 19.440302,-1.5965928 20,-2 Q 20.581139,-2.4188612 21,-3 M 19,-16 L 18,-8 Q 17.807955,-6.4636382 18,-6 Q 18.292893,-5.2928932 19,-5","advance":27},{"key":"A","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 3.0619516,-1.7654114 5,-4 Q 6.5336244,-5.7682838 8,-8 Q 10.09173,-11.183459 12,-15 L 15,-21 L 15,0 Q 14.700877,-1.566959 14,-3 Q 13.320601,-4.3891255 12,-6 Q 11.09902,-7.0990195 10,-8 Q 7.8885621,-9.7309651 7,-10 Q 5.8445752,-10.349834 5,-10 Q 4.2928932,-9.7071068 4,-9 Q 3.6992609,-8.2739515 4,-7 Q 4.2150407,-6.0890728 5,-5 Q 5.6349159,-4.1191013 7,-3 Q 8.6108745,-1.6793988 10,-1 Q 12.044639,0.0000000000000002220446 13,0 L 18,0","advance":20},{"key":"B","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 16.777863,-21.288507 18,-21 Q 19.309017,-20.690983 20,-20 Q 20.690983,-19.309017 21,-18 Q 21.236068,-17 21,-16 Q 20.784959,-15.089073 20,-14 Q 19.581139,-13.418861 19,-13 Q 18.440302,-12.596593 17,-12 Q 15.535534,-11.393398 14,-11 M 13,-11 Q 13.5,-11.081139 14,-11 Q 15.874032,-10.695886 17,-10 Q 17.503548,-9.6887901 18,-9 Q 18.784959,-7.9109272 19,-7 Q 19.354102,-5.5 19,-4 Q 18.784959,-3.0890728 18,-2 Q 17.581139,-1.4188612 17,-1 Q 15.910927,-0.21504074 15,0 Q 13.5,0.35410197 12,0 Q 10.690983,-0.30901699 10,-1 Q 9.1666667,-1.8333333 9,-3","advance":23},{"key":"C","d":"M 12,-15 Q 11.792893,-14.5 12,-14 Q 12.292893,-13.292893 13,-13 Q 13.726049,-12.699261 15,-13 Q 16.309017,-13.309017 17,-14 Q 17.690983,-14.690983 18,-16 Q 18.236068,-17 18,-18 Q 17.690983,-19.309017 17,-20 Q 16.309017,-20.690983 15,-21 Q 13.777863,-21.288507 12,-21 Q 10.125968,-20.695886 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 13.007096,-1.6224198 14,-3 Q 14.662278,-3.9188612 15,-5","advance":20},{"key":"D","d":"M 13,-21 Q 11.833333,-20.833333 11,-20 Q 10.58711,-19.58711 10,-18 Q 9.3933406,-16.360043 9,-14 L 8,-8 Q 7.8366366,-7.0198193 7,-5 Q 6.4034072,-3.5596976 6,-3 Q 5.1622777,-1.8377223 4,-1 Q 2.9109272,-0.21504074 2,0 Q 0.72604853,0.30073915 0,0 Q -0.70710678,-0.29289322 -1,-1 Q -1.4142136,-2 -1,-3 Q -0.70710678,-3.7071068 0,-4 Q 0.72604853,-4.3007391 2,-4 Q 3.309017,-3.690983 4,-3 L 6,-1 Q 6.6125741,-0.38742589 9,0 Q 10.5,0.24341649 12,0 Q 13.874032,-0.30411354 15,-1 Q 16.007096,-1.6224198 17,-3 Q 18.197734,-4.6617677 19,-7 Q 19.709727,-9.0685242 20,-12 Q 20.245983,-14.484185 20,-16 Q 19.695886,-17.874032 19,-19 Q 18.68879,-19.503548 18,-20 Q 16.910927,-20.784959 16,-21 Q 14.089073,-21.451109 13,-21 Q 11.585786,-20.414214 11,-19 Q 10.766804,-18.437016 11,-17 Q 11.232017,-15.570249 12,-14 Q 12.679399,-12.610875 14,-11 Q 14.90098,-9.9009805 16,-9 Q 17.081639,-8.1132681 19,-7 Q 19.968871,-6.4377423 21,-6","advance":23},{"key":"E","d":"M 14,-17 Q 13.792893,-16.5 14,-16 Q 14.292893,-15.292893 15,-15 Q 16,-14.585786 17,-15 Q 17.707107,-15.292893 18,-16 Q 18.300739,-16.726049 18,-18 Q 17.663763,-19.424321 17,-20 Q 16.272122,-20.631285 14,-21 Q 12,-21.324555 10,-21 Q 7.7278782,-20.631285 7,-20 Q 6.3362366,-19.424321 6,-18 Q 5.645898,-16.5 6,-15 Q 6.2150407,-14.089073 7,-13 Q 7.4964518,-12.31121 8,-12 Q 9.381966,-11.145898 11,-11 Q 9.5,-11.243416 8,-11 Q 6.125968,-10.695886 5,-10 Q 4.4964518,-9.6887901 4,-9 Q 3.2150407,-7.9109272 3,-7 Q 2.645898,-5.5 3,-4 Q 3.2150407,-3.0890728 4,-2 Q 4.4964518,-1.3112099 5,-1 Q 6.125968,-0.30411354 8,0 Q 9.5,0.24341649 11,0 Q 12.874032,-0.30411354 14,-1 Q 15.007096,-1.6224198 16,-3 Q 16.662278,-3.9188612 17,-5","advance":20},{"key":"F","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5 M 9,-11 L 18,-11","advance":20},{"key":"G","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 4.0054842,-2.4454712 6,-5 Q 7.7042607,-7.1827769 9,-10 Q 9.3445349,-10.749095 10,-13 Q 10.879306,-16.019586 11,-17 Q 11.284702,-19.312668 11,-20 Q 10.707107,-20.707107 10,-21 Q 9.5,-21.207107 9,-21 Q 8.6019102,-20.835106 8,-20 Q 7.2150407,-18.910927 7,-18 Q 6.645898,-16.5 7,-15 Q 7.309017,-13.690983 8,-13 Q 8.690983,-12.309017 10,-12 Q 11.629516,-11.615323 14,-12 Q 15.874032,-12.304114 17,-13 Q 17.503548,-13.31121 18,-14 Q 18.662278,-14.918861 19,-16 L 19,-10 Q 19,-7.9145363 18,-5 Q 17.598867,-3.8308838 17,-3 Q 16.007096,-1.6224198 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":23},{"key":"H","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 7,-9 L 16,-12 Q 16.650413,-12.216804 18,-13 Q 19.918361,-14.113268 21,-15 Q 22.365084,-16.119101 23,-17 Q 23.784959,-18.089073 24,-19 Q 24.15037,-19.636976 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.5,-21.207107 22,-21 Q 21.20382,-20.670212 20,-19 Q 19.193186,-17.880605 18,-15 Q 16.866964,-12.26461 16,-9 Q 15.194907,-5.9683709 15,-4 Q 14.760254,-1.5787985 15,-1 Q 15.292893,-0.29289322 16,0 Q 16.363024,0.15036957 17,0 Q 17.910927,-0.21504074 19,-1 Q 19.440449,-1.3174579 20,-2 Q 21.148529,-3.4009805 22,-5","advance":24},{"key":"I","d":"M 14,-5 Q 12.90098,-5.9009805 12,-7 Q 11.113268,-8.081639 10,-10 Q 9.4005886,-11.032893 9,-12 Q 8.1562904,-14.036895 8,-15 Q 7.7114926,-16.777863 8,-18 Q 8.2150407,-18.910927 9,-20 Q 9.6019102,-20.835106 10,-21 Q 11,-21.414214 12,-21 Q 12.39809,-20.835106 13,-20 Q 13.784959,-18.910927 14,-18 Q 14.209277,-17.11349 14,-15 Q 13.757083,-12.546781 13,-10 Q 12.519554,-8.3838089 11,-5 Q 10.270239,-3.3749372 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":17},{"key":"J","d":"M 10,3 Q 8.8438171,1.604122 8,0 Q 6.7160888,-2.4407544 6,-5 Q 5.2851244,-7.5549099 5,-11 Q 4.6711435,-14.973495 5,-17 Q 5.3687146,-19.272122 6,-20 Q 6.575679,-20.663763 8,-21 Q 9.2739515,-21.300739 10,-21 Q 10.513394,-20.787345 11,-20 Q 11.695886,-18.874032 12,-17 Q 12.184487,-15.863139 12,-14 Q 11.805093,-12.031629 11,-9 Q 9.5,-4.5 8,0 Q 7,3 6,6 Q 5.5,7.5 5,9 Q 4.2928932,10.707107 4,11 Q 2.8603796,12.13962 2,12 Q 1.372001,11.89809 1,11 Q 0.7668044,10.437016 1,9 Q 1.2320166,7.570249 2,6 Q 2.6793988,4.6108745 4,3 Q 4.9009805,1.9009805 6,1 Q 7.081639,0.1132681 9,-1 Q 10.937742,-2.1245155 13,-3","advance":15},{"key":"K","d":"M 7,-14 Q 5.8333333,-14.166667 5,-15 Q 4.309017,-15.690983 4,-17 Q 3.881966,-17.5 4,-18 Q 4.309017,-19.309017 5,-20 Q 5.690983,-20.690983 7,-21 Q 7.5,-21.118034 8,-21 Q 9.309017,-20.690983 10,-20 Q 10.690983,-19.309017 11,-18 Q 11.161823,-17.314506 11,-16 Q 10.879306,-15.019586 10,-12 Q 8.8512237,-8.0550359 8,-6 Q 6.8068144,-3.1193952 6,-2 Q 4.7961796,-0.32978838 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3 M 24,-18 Q 24.414214,-19 24,-20 Q 23.707107,-20.707107 23,-21 Q 22.636976,-21.15037 22,-21 Q 21.089073,-20.784959 20,-20 Q 18.7167,-19.075049 18,-18 L 16,-15 Q 15.2833,-13.924951 14,-13 Q 12.910927,-12.215041 12,-12 Q 11,-11.763932 10,-12 M 12,-12 Q 13,-10.801787 13,-10 L 13,-3 Q 13,-2.3874259 14,-1 Q 14.60191,-0.16489419 15,0 Q 15.363024,0.15036957 16,0 Q 16.910927,-0.21504074 18,-1 Q 18.440449,-1.3174579 19,-2 Q 20.148529,-3.4009805 21,-5","advance":24},{"key":"L","d":"M 4,-9 Q 5,-8.8768944 6,-9 Q 8.410165,-9.2967049 10,-10 Q 11.217197,-10.538451 13,-12 Q 14.365084,-13.119101 15,-14 Q 15.784959,-15.089073 16,-16 Q 16.354102,-17.5 16,-19 Q 15.618034,-20.618034 15,-21 Q 14.197453,-21.496001 13,-21 Q 12.60191,-20.835106 12,-20 Q 11.401133,-19.169116 11,-18 Q 11,-18 10,-13 Q 9.5,-10.5 9,-8 Q 8.5665179,-6.3676952 8,-5 Q 7.4034072,-3.5596976 7,-3 Q 6.1622777,-1.8377223 5,-1 Q 3.9109272,-0.21504074 3,0 Q 1.7260485,0.30073915 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12,0.16227766 13,0 Q 14.874032,-0.30411354 16,-1 Q 17.236068,-1.763932 18,-3","advance":19},{"key":"M","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 15.5,-21.118034 16,-21 Q 17.309017,-20.690983 18,-20 Q 18.690983,-19.309017 19,-18 Q 19.139518,-17.408993 19,-16 Q 18.902173,-15.012043 18,-11 Q 17.472066,-8.6522317 17,-7 L 15,0 M 17,-7 L 20,-15 Q 20.957715,-17.553907 22,-19 Q 22.418861,-19.581139 23,-20 Q 24.089073,-20.784959 25,-21 Q 25.5,-21.118034 26,-21 Q 27.309017,-20.690983 28,-20 Q 28.690983,-19.309017 29,-18 Q 29.139518,-17.408993 29,-16 Q 28.772694,-13.704427 28,-11 L 26,-4 Q 25.492747,-2.224616 26,-1 Q 26.292893,-0.29289322 27,0 Q 27.363024,0.15036957 28,0 Q 28.910927,-0.21504074 30,-1 Q 30.440449,-1.3174579 31,-2 Q 32.148529,-3.4009805 33,-5","advance":33},{"key":"N","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1395178,-17.408993 9,-16 Q 8.902173,-15.012043 8,-11 Q 7.4720662,-8.6522317 7,-7 L 5,0 M 7,-7 L 10,-15 Q 10.957715,-17.553907 12,-19 Q 12.418861,-19.581139 13,-20 Q 14.089073,-20.784959 15,-21 Q 16,-21.236068 17,-21 Q 18.309017,-20.690983 19,-20 Q 19.690983,-19.309017 20,-18 Q 20.139518,-17.408993 20,-16 Q 19.772694,-13.704427 19,-11 L 17,-4 Q 16.492747,-2.224616 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"O","d":"M 12,-21 Q 10.381966,-20.854102 9,-20 Q 8.2694753,-19.548511 7,-18 Q 6.1132681,-16.918361 5,-15 Q 4.2824473,-13.763528 4,-13 Q 3.2392581,-10.943519 3,-9 Q 2.7199935,-6.7254777 3,-5 Q 3.3041135,-3.125968 4,-2 Q 4.3112099,-1.4964518 5,-1 Q 6.0890728,-0.21504074 7,0 Q 7.8147581,0.19233829 9,0 Q 10.874032,-0.30411354 12,-1 Q 12.730525,-1.4514891 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.717553,-7.2364722 17,-8 Q 17.760742,-10.056481 18,-12 Q 18.280006,-14.274522 18,-16 Q 17.695886,-17.874032 17,-19 Q 16.68879,-19.503548 16,-20 Q 14.910927,-20.784959 14,-21 Q 12.726049,-21.300739 12,-21 Q 10.585786,-20.414214 10,-19 Q 9.6502066,-18.155524 10,-16 Q 10.232017,-14.570249 11,-13 Q 11.679399,-11.610875 13,-10 Q 13.90098,-8.9009805 15,-8 Q 16.081639,-7.1132681 18,-6 Q 18.968871,-5.4377423 20,-5","advance":21},{"key":"P","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.963105,-21.480846 20,-21 Q 20.910927,-20.784959 22,-20 Q 22.581139,-19.581139 23,-19 Q 23.784959,-17.910927 24,-17 Q 24.354102,-15.5 24,-14 Q 23.784959,-13.089073 23,-12 Q 22.581139,-11.418861 22,-11 Q 20.910927,-10.215041 20,-10 Q 18.5,-9.645898 17,-10 Q 16.089073,-10.215041 15,-11 Q 14.418861,-11.418861 14,-12","advance":25},{"key":"Q","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.767983,-12.570249 17,-11 Q 16.320601,-9.6108745 15,-8 Q 13.198039,-5.801961 11,-4 Q 9.918361,-3.1132681 8,-2 Q 6.9671065,-1.4005886 6,-1 Q 3.9631048,-0.1562904 3,0 Q 1.562984,0.2331956 1,0 Q 0.29289322,-0.29289322 0,-1 Q -0.41421356,-2 0,-3 Q 0.29289322,-3.7071068 1,-4 Q 1.7260485,-4.3007391 3,-4 Q 3.774116,-3.817256 5,-3 L 8,-1 Q 9.0174033,-0.32173116 11,0 Q 12.5,0.24341649 14,0 Q 15.874032,-0.30411354 17,-1 Q 18.236068,-1.763932 19,-3","advance":22},{"key":"R","d":"M 13,-19 Q 13.707107,-18.707107 14,-18 Q 14.284702,-17.312668 14,-15 Q 13.879306,-14.019586 13,-11 Q 12.425612,-9.027518 12,-8 Q 11.599411,-7.0328935 11,-6 Q 9.8867319,-4.081639 9,-3 Q 7.8808987,-1.6349159 7,-1 Q 5.9109272,-0.21504074 5,0 Q 4.3630243,0.15036957 4,0 Q 3.2928932,-0.29289322 3,-1 Q 2.7602538,-1.5787985 3,-4 Q 3.1949071,-5.9683709 4,-9 Q 4.4334821,-10.632305 5,-12 Q 5.4005886,-12.967107 6,-14 Q 7.1132681,-15.918361 8,-17 Q 9.1191013,-18.365084 10,-19 Q 10.559698,-19.403407 12,-20 Q 14.036895,-20.84371 15,-21 Q 17.370484,-21.384677 19,-21 Q 19.910927,-20.784959 21,-20 Q 21.581139,-19.581139 22,-19 Q 22.784959,-17.910927 23,-17 Q 23.354102,-15.5 23,-14 Q 22.784959,-13.089073 22,-12 Q 21.581139,-11.418861 21,-11 Q 19.910927,-10.215041 19,-10 Q 17.777863,-9.7114926 16,-10 Q 14.418861,-10.256584 13,-11 Q 13.581139,-10.581139 14,-10 Q 15,-8.6125741 15,-8 L 15,-3 Q 15,-2 16,-1 Q 17,-0.0000000000000001110223 18,0 Q 18.612574,0.000000000000000034004694 20,-1 Q 20.440449,-1.3174579 21,-2 Q 22.148529,-3.4009805 23,-5","advance":25},{"key":"S","d":"M 0,0 Q 1.0811388,-0.33772234 2,-1 Q 2.7079677,-1.5102743 4,-3 Q 4.9224409,-4.0635833 7,-7 Q 8.440881,-9.0365375 9,-10 Q 10.198823,-12.065787 11,-14 Q 11.84371,-16.036895 12,-17 Q 12.349793,-19.155524 12,-20 Q 11.707107,-20.707107 11,-21 Q 10.5,-21.207107 10,-21 Q 9.6019102,-20.835106 9,-20 Q 8.2150407,-18.910927 8,-18 Q 7.763932,-17 8,-16 Q 8.2150407,-15.089073 9,-14 Q 9.9249506,-12.7167 11,-12 L 14,-10 Q 15.075049,-9.2833004 16,-8 Q 16.784959,-6.9109272 17,-6 Q 17.236068,-5 17,-4 Q 16.784959,-3.0890728 16,-2 Q 15.503548,-1.3112099 15,-1 Q 13.874032,-0.30411354 12,0 Q 10,0.32455532 8,0 Q 6.125968,-0.30411354 5,-1 Q 3.9929036,-1.6224198 3,-3 Q 2.2150407,-4.0890728 2,-5 Q 1.763932,-6 2,-7","advance":20},{"key":"T","d":"M 10,-15 Q 9,-14.763932 8,-15 Q 6.690983,-15.309017 6,-16 Q 5,-17 5,-18 Q 5,-19.132705 6,-20 Q 6.7278782,-20.631285 9,-21 Q 10.819162,-21.295209 12,-21 L 16,-20 Q 17.457006,-19.635749 19,-20 Q 20.118034,-20.263932 21,-21 M 16,-20 L 14,-13 Q 12.920991,-9.22347 12,-7 Q 10.806814,-4.1193952 10,-3 Q 9.1622777,-1.8377223 8,-1 Q 6.9109272,-0.21504074 6,0 Q 5,0.23606798 4,0 Q 2.690983,-0.30901699 2,-1 Q 1.309017,-1.690983 1,-3 Q 0.69926085,-4.2739515 1,-5 Q 1.2928932,-5.7071068 2,-6 Q 2.7260485,-6.3007391 4,-6 Q 5.118034,-5.736068 6,-5","advance":19},{"key":"U","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.309017,-1.690983 7,-1 Q 7.690983,-0.30901699 9,0 Q 10,0.23606798 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.581139,-1.4188612 14,-2 Q 14.647421,-2.898248 16,-6 Q 18.071616,-10.750654 19,-14 L 21,-21 M 19,-14 Q 18.420128,-12.019968 18,-10 Q 17.163856,-5.9798285 17,-4 Q 16.79306,-1.4995966 17,-1 Q 17.292893,-0.29289322 18,0 Q 18.363024,0.15036957 19,0 Q 19.910927,-0.21504074 21,-1 Q 21.440449,-1.3174579 22,-2 Q 23.148529,-3.4009805 24,-5","advance":24},{"key":"V","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.7572653,-3.0282406 6,-2 Q 6.381966,-0.38196601 7,0 Q 7.5527864,0.34164079 9,0 Q 9.9109272,-0.21504074 11,-1 Q 12.321348,-1.9523738 14,-4 Q 14.886732,-5.081639 16,-7 Q 17.198823,-9.065787 18,-11 Q 18.425612,-12.027518 19,-14 Q 19.879306,-17.019586 20,-18 Q 20.189802,-19.541778 20,-20 Q 19.707107,-20.707107 19,-21 Q 18.5,-21.207107 18,-21 Q 17.60191,-20.835106 17,-20 Q 16.215041,-18.910927 16,-18 Q 15.807662,-17.185242 16,-16 Q 16.304114,-14.125968 17,-13 Q 17.62242,-11.992904 19,-11 Q 19.918861,-10.337722 21,-10","advance":23},{"key":"W","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.155957,-17.339355 9,-15 L 8,0 M 18,-21 L 8,0 M 18,-21 L 16,0 M 30,-21 Q 28.918861,-20.662278 28,-20 Q 26.938048,-19.234589 25,-17 Q 23.163318,-14.882287 22,-13 Q 20.601984,-10.737962 19,-7 L 16,0","advance":28},{"key":"X","d":"M 8,-15 Q 7,-14.585786 6,-15 Q 5.2928932,-15.292893 5,-16 Q 4.6992609,-16.726049 5,-18 Q 5.309017,-19.309017 6,-20 Q 6.690983,-20.690983 8,-21 Q 9,-21.236068 10,-21 Q 11.309017,-20.690983 12,-20 Q 12.690983,-19.309017 13,-18 Q 13.343404,-16.545318 13,-15 L 11,-6 Q 10.656596,-4.4546824 11,-3 Q 11.309017,-1.690983 12,-1 Q 12.690983,-0.30901699 14,0 Q 15,0.23606798 16,0 Q 17.309017,-0.30901699 18,-1 Q 18.690983,-1.690983 19,-3 Q 19.300739,-4.2739515 19,-5 Q 18.707107,-5.7071068 18,-6 Q 17,-6.4142136 16,-6 M 23,-18 Q 23.414214,-19 23,-20 Q 22.707107,-20.707107 22,-21 Q 21.273951,-21.300739 20,-21 Q 19.089073,-20.784959 18,-20 Q 17.119101,-19.365084 16,-18 Q 14.543967,-16.223925 14,-15 L 10,-6 Q 9.4560335,-4.7760753 8,-3 Q 6.8808987,-1.6349159 6,-1 Q 4.9109272,-0.21504074 4,0 Q 2.7260485,0.30073915 2,0 Q 1.2928932,-0.29289322 1,-1 Q 0.58578644,-2 1,-3","advance":24},{"key":"Y","d":"M 5,-14 Q 3.8333333,-14.166667 3,-15 Q 2.309017,-15.690983 2,-17 Q 1.881966,-17.5 2,-18 Q 2.309017,-19.309017 3,-20 Q 3.690983,-20.690983 5,-21 Q 5.5,-21.118034 6,-21 Q 7.309017,-20.690983 8,-20 Q 8.690983,-19.309017 9,-18 Q 9.1618231,-17.314506 9,-16 Q 8.8048059,-14.414418 8,-12 L 7,-9 Q 6.1951941,-6.5855823 6,-5 Q 5.8381769,-3.6854937 6,-3 Q 6.2150407,-2.0890728 7,-1 Q 7.6019102,-0.16489419 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.880899,-1.6349159 14,-3 Q 14.886732,-4.081639 16,-6 Q 16.783196,-7.3495867 17,-8 L 19,-14 M 21,-21 L 19,-14 Q 17.464952,-8.6273337 16,-4 Q 14.740258,-0.020863203 14,2 Q 12.914109,4.9644227 12,7 Q 10.369801,10.630199 10,11 Q 8.8603796,12.13962 8,12 Q 7.372001,11.89809 7,11 Q 6.7668044,10.437016 7,9 Q 7.2320166,7.570249 8,6 Q 8.6793988,4.6108745 10,3 Q 11.351471,1.3514707 13,0 Q 13.909902,-0.74594117 16,-2 L 21,-5","advance":23},{"key":"Z","d":"M 13,-15 Q 12.662278,-13.918861 12,-13 Q 11.581139,-12.418861 11,-12 Q 9.9109272,-11.215041 9,-11 Q 7.5527864,-10.658359 7,-11 Q 6.381966,-11.381966 6,-13 Q 5.8076617,-13.814758 6,-15 Q 6.3041135,-16.874032 7,-18 Q 7.763932,-19.236068 9,-20 Q 10.125968,-20.695886 12,-21 Q 13.777863,-21.288507 15,-21 Q 16.309017,-20.690983 17,-20 Q 17.690983,-19.309017 18,-18 Q 18.384677,-16.370484 18,-14 Q 17.84371,-13.036895 17,-11 Q 15.806814,-8.1193952 15,-7 Q 14.234589,-5.9380484 12,-4 Q 9.8822874,-2.1633176 8,-1 Q 6.618034,-0.14589803 6,0 Q 4.0890728,0.45110872 3,0 Q 2.2928932,-0.29289322 2,-1 Q 1.5857864,-2 2,-3 Q 2.2928932,-3.7071068 3,-4 Q 4.0890728,-4.4511087 6,-4 Q 6.9109272,-3.7849593 8,-3 Q 8.5811388,-2.5811388 9,-2 Q 9.7849593,-0.91092721 10,0 Q 10.288507,1.2221371 10,3 Q 9.8437096,3.9631048 9,6 Q 8.5994114,6.9671065 8,8 Q 6.5311289,10.531129 6,11 Q 4.7325556,12.118877 4,12 Q 3.372001,11.89809 3,11 Q 2.7668044,10.437016 3,9 Q 3.2320166,7.570249 4,6 Q 4.6793988,4.6108745 6,3 Q 7.3514707,1.3514707 9,0 Q 10.563458,-1.281729 12,-2 L 18,-5","advance":21},{"key":"[","d":"M 4,-25 L 4,7 M 5,-25 L 5,7 M 4,-25 L 11,-25 M 4,7 L 11,7","advance":14},{"key":"\\\\","d":"M 0,-21 L 14,3","advance":14},{"key":"]","d":"M 9,-25 L 9,7 M 10,-25 L 10,7 M 3,-25 L 10,-25 M 3,7 L 10,7","advance":14},{"key":"^","d":"M 8,-23 L 0,-9 M 8,-23 L 16,-9","advance":16},{"key":"_","d":"M 0,7 L 20,7","advance":20},{"key":"‘","d":"M 5,-16 Q 3.5857864,-15.414214 3,-14 Q 2.5857864,-13 3,-12 Q 3.4142136,-11 4,-11 Q 5,-11 5,-12 Q 5,-13 4,-13 Q 3,-13 3,-12","advance":8},{"key":"a","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"b","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.3775802,-1.9929036 7,-3 Q 7.6958865,-4.125968 8,-6 Q 8.2434165,-7.5 8,-9 Q 7.9460321,-6.861508 9,-5 Q 9.4332814,-4.2347425 10,-4 Q 10.726049,-3.6992609 12,-4 Q 13.118034,-4.263932 14,-5","advance":14},{"key":"c","d":"M 7,-7 Q 7.2071068,-7.5 7,-8 Q 6.7071068,-8.7071068 6,-9 Q 5.2739515,-9.3007391 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4.6856967,0.39793901 6,0 Q 7.4342585,-0.43425855 9,-2 Q 10.3,-3.3 11,-5","advance":11},{"key":"d","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.309017,-0.30901699 7,-1 Q 7.5,-1.5 8,-3 L 14,-21 M 10,-9 L 9,-4 Q 8.5953718,-1.9768589 9,-1 Q 9.2928932,-0.29289322 10,0 Q 10.363024,0.15036957 11,0 Q 11.910927,-0.21504074 13,-1 Q 13.440449,-1.3174579 14,-2 Q 15.148529,-3.4009805 16,-5","advance":16},{"key":"e","d":"M 1,-2 Q 2.0811388,-2.3377223 3,-3 Q 3.5811388,-3.4188612 4,-4 Q 4.7849593,-5.0890728 5,-6 Q 5.3007391,-7.2739515 5,-8 Q 4.7071068,-8.7071068 4,-9 Q 3.6369757,-9.1503696 3,-9 Q 1.690983,-8.690983 1,-8 Q 0.30901699,-7.309017 0,-6 Q -0.35410197,-4.5 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.4404493,-1.3174579 8,-2 Q 9.1485293,-3.4009805 10,-5","advance":10},{"key":"f","d":"M 0,-5 L 4,-10 Q 4.9433189,-11.179149 6,-13 Q 6.5994114,-14.032893 7,-15 Q 7.8437096,-17.036895 8,-18 Q 8.2331956,-19.437016 8,-20 Q 7.627999,-20.89809 7,-21 Q 6.1396204,-21.13962 5,-20 Q 4.3333333,-19.333333 4,-18 L 2,-10 Q 0.8,-5.2 -1,-1 L -4,6 Q -4.8258876,7.9270711 -5,9 Q -5.2331956,10.437016 -5,11 Q -4.627999,11.89809 -4,12 Q -3.0070463,12.161134 -2,11 Q -1.2353756,10.118381 -1,8 L 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"g","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 M 10,-9 L 8,-2 Q 6.5529061,3.0648285 4,9 Q 3.2452082,10.754792 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"h","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.3693981,-7.1081942 9,-6 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"i","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.3630243,0.15036957 2,0 Q 2.9109272,-0.21504074 4,-1 Q 4.4404493,-1.3174579 5,-2 Q 6.1485293,-3.4009805 7,-5","advance":7},{"key":"j","d":"M 3,-14 Q 2.5,-13.5 3,-13 Q 3.5,-12.5 4,-13 Q 4.5,-13.5 4,-14 Q 3.5,-14.5 3,-14 Z M 0,-5 L 2,-9 L -4,9 Q -4.5,10.5 -5,11 Q -6.1396204,12.13962 -7,12 Q -7.627999,11.89809 -8,11 Q -8.2331956,10.437016 -8,9 Q -7.6958865,7.125968 -7,6 Q -6.3227663,4.9042129 -4,3 Q -2.4365419,1.718271 -1,1 L 1,0 Q 2.4365419,-0.71827095 4,-2 Q 5.6485293,-3.3514707 7,-5","advance":7},{"key":"k","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.6161088,-16.962243 2,-14 Q 1.3734361,-10.987489 1,-8 L 0,0 Q 0.39339828,-1.5355339 1,-3 Q 1.4005886,-3.9671065 2,-5 Q 3.4688711,-7.5311289 4,-8 Q 4.8162246,-8.7205485 6,-9 Q 7.2739515,-9.3007391 8,-9 Q 8.7071068,-8.7071068 9,-8 Q 9.4960013,-6.802547 9,-6 Q 8.618034,-5.381966 7,-5 Q 5.5,-4.645898 4,-5 Q 5.7071068,-4.8786797 6,-4 L 7,-1 Q 7.2265409,-0.32037724 8,0 Q 8.3630243,0.15036957 9,0 Q 9.9109272,-0.21504074 11,-1 Q 11.440449,-1.3174579 12,-2 Q 13.148529,-3.4009805 14,-5","advance":14},{"key":"l","d":"M 0,-5 Q 1.0356941,-6.476204 2,-8 Q 3.9257589,-11.043084 5,-13 Q 5.699047,-14.273435 6,-15 Q 6.8437096,-17.036895 7,-18 Q 7.2331956,-19.437016 7,-20 Q 6.627999,-20.89809 6,-21 Q 5.1396204,-21.13962 4,-20 Q 3.5871103,-19.58711 3,-18 Q 2.5399223,-16.756292 2,-14 Q 1.2113543,-9.9739811 1,-7 Q 0.63603897,-1.8786797 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.3630243,0.15036957 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.4404493,-1.3174579 6,-2 Q 7.1485293,-3.4009805 8,-5","advance":8},{"key":"m","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.094901,-7.7708892 12,-7 Q 11.879306,-6.019586 11,-3 Q 10.557607,-1.4807976 10,0 M 11,-3 Q 11.437742,-4.0311289 12,-5 Q 13.468871,-7.5311289 14,-8 Q 14.816225,-8.7205485 16,-9 Q 17.273951,-9.3007391 18,-9 Q 18.707107,-8.7071068 19,-8 Q 19.369398,-7.1081942 19,-6 L 18,-3 Q 17.630602,-1.8918058 18,-1 Q 18.292893,-0.29289322 19,0 Q 19.363024,0.15036957 20,0 Q 20.910927,-0.21504074 22,-1 Q 22.440449,-1.3174579 23,-2 Q 24.148529,-3.4009805 25,-5","advance":25},{"key":"n","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 3.2674444,-9.1188774 4,-9 Q 4.627999,-8.8980898 5,-8 Q 5.0949008,-7.7708892 5,-7 Q 4.8793055,-6.019586 4,-3 Q 3.5576072,-1.4807976 3,0 M 4,-3 Q 4.4377423,-4.0311289 5,-5 Q 6.4688711,-7.5311289 7,-8 Q 7.8162246,-8.7205485 9,-9 Q 10.273951,-9.3007391 11,-9 Q 11.707107,-8.7071068 12,-8 Q 12.369398,-7.1081942 12,-6 L 11,-3 Q 10.630602,-1.8918058 11,-1 Q 11.292893,-0.29289322 12,0 Q 12.363024,0.15036957 13,0 Q 13.910927,-0.21504074 15,-1 Q 15.440449,-1.3174579 16,-2 Q 17.148529,-3.4009805 18,-5","advance":18},{"key":"o","d":"M 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 5.9109272,-0.21504074 7,-1 Q 7.5811388,-1.4188612 8,-2 Q 8.7849593,-3.0890728 9,-4 Q 9.236068,-5 9,-6 Q 8.690983,-7.309017 8,-8 Q 6.8603796,-9.1396204 6,-9 Q 5.372001,-8.8980898 5,-8 Q 4.6992609,-7.2739515 5,-6 Q 5.309017,-4.690983 6,-4 Q 6.690983,-3.309017 8,-3 Q 9.5,-2.645898 11,-3 Q 11.910927,-3.2150407 13,-4 Q 13.581139,-4.4188612 14,-5","advance":14},{"key":"p","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.4354686,-7.3064058 2,-6 L -4,12 M 2,-6 Q 2.1666667,-7.1666667 3,-8 Q 3.690983,-8.690983 5,-9 Q 6,-9.236068 7,-9 Q 8.309017,-8.690983 9,-8 Q 9.690983,-7.309017 10,-6 Q 10.236068,-5 10,-4 Q 9.7849593,-3.0890728 9,-2 Q 8.5811388,-1.4188612 8,-1 Q 7.0811388,-0.33772234 6,0 M 2,-1 Q 2.881966,-0.26393202 4,0 Q 5.2221371,0.28850743 7,0 Q 7.9631048,-0.1562904 10,-1 Q 11.440302,-1.5965928 12,-2 Q 13.743416,-3.2565835 15,-5","advance":15},{"key":"q","d":"M 9,-6 Q 8.8333333,-7.1666667 8,-8 Q 7.309017,-8.690983 6,-9 Q 5,-9.236068 4,-9 Q 3.0890728,-8.7849593 2,-8 Q 1.4188612,-7.5811388 1,-7 Q 0.21504074,-5.9109272 0,-5 Q -0.23606798,-4 0,-3 Q 0.30901699,-1.690983 1,-1 Q 1.690983,-0.30901699 3,0 Q 4,0.23606798 5,0 Q 6.118034,-0.26393202 7,-1 M 10,-9 Q 9.5440795,-7.4853068 9,-6 Q 8.1595457,-3.7056066 7,-1 L 4,6 Q 3.1741124,7.9270711 3,9 Q 2.7668044,10.437016 3,11 Q 3.372001,11.89809 4,12 Q 4.9929537,12.161134 6,11 Q 7,9.8469903 7,8 L 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"r","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 1,-8 3,-8 L 6,-8 Q 6.5857864,-8 7,-7 Q 7.3693981,-6.1081942 7,-5 L 6,-2 Q 5.815301,-1.4459029 6,-1 Q 6.2928932,-0.29289322 7,0 Q 7.3630243,0.15036957 8,0 Q 8.9109272,-0.21504074 10,-1 Q 10.440449,-1.3174579 11,-2 Q 12.148529,-3.4009805 13,-5","advance":13},{"key":"s","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 2.5622577,-8.9688711 3,-10 Q 2.5835741,-8.6246388 3,-8 L 5,-5 Q 5.817256,-3.774116 6,-3 Q 6.3416408,-1.5527864 6,-1 Q 5.309017,0.11803399 4,0 M 0,-1 Q 0.88196601,-0.26393202 2,0 Q 4,0.47213595 6,0 Q 6.9109272,-0.21504074 8,-1 Q 8.4404493,-1.3174579 9,-2 Q 10.148529,-3.4009805 11,-5","advance":11},{"key":"t","d":"M 0,-5 Q 1.0933866,-6.4377423 2,-8 Q 3.1245155,-9.9377423 4,-12 M 7,-21 L 1,-3 Q 0.63060194,-1.8918058 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.7260485,0.30073915 4,0 Q 4.9109272,-0.21504074 6,-1 Q 6.4404493,-1.3174579 7,-2 Q 8.1485293,-3.4009805 9,-5 M 1,-13 L 8,-13","advance":9},{"key":"u","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 8,-3 Q 7.6306019,-1.8918058 8,-1 Q 8.2928932,-0.29289322 9,0 Q 9.3630243,0.15036957 10,0 Q 10.910927,-0.21504074 12,-1 Q 12.440449,-1.3174579 13,-2 Q 14.148529,-3.4009805 15,-5","advance":15},{"key":"v","d":"M 0,-5 L 2,-9 L 1,-4 Q 0.59537178,-1.9768589 1,-1 Q 1.2928932,-0.29289322 2,0 Q 2.281492,0.1165978 3,0 Q 4.874032,-0.30411354 6,-1 Q 7.236068,-1.763932 8,-3 Q 8.6958865,-4.125968 9,-6 Q 9.2434165,-7.5 9,-9 Q 8.9460321,-6.861508 10,-5 Q 10.433281,-4.2347425 11,-4 Q 11.726049,-3.6992609 13,-4 Q 14.118034,-4.263932 15,-5","advance":15},{"key":"w","d":"M 3,-9 Q 1.763932,-8.236068 1,-7 Q 0.30411354,-5.874032 0,-4 Q -0.19233829,-2.8147581 0,-2 Q 0.38196601,-0.38196601 1,0 Q 1.5527864,0.34164079 3,0 Q 3.9109272,-0.21504074 5,-1 Q 6.1622777,-1.8377223 7,-3 M 9,-9 L 7,-3 Q 6.6306019,-1.8918058 7,-1 Q 7.2928932,-0.29289322 8,0 Q 8.7260485,0.30073915 10,0 Q 10.910927,-0.21504074 12,-1 Q 13.37758,-1.9929036 14,-3 Q 14.695886,-4.125968 15,-6 Q 15.243416,-7.5 15,-9 Q 14.946032,-6.861508 16,-5 Q 16.433281,-4.2347425 17,-4 Q 17.726049,-3.6992609 19,-4 Q 20.118034,-4.263932 21,-5","advance":21},{"key":"x","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7,-8.5857864 7,-8 L 7,-1 Q 7,-0.41421356 8,0 Q 9.2668628,0.52475173 11,0 Q 12.434259,-0.43425855 14,-2 Q 15.3,-3.3 16,-5 M 13,-8 Q 12.707107,-8.7071068 12,-9 Q 11,-9.4142136 10,-9 Q 9.438533,-8.7674328 9,-8 L 5,-1 Q 4.561467,-0.23256725 4,0 Q 3,0.41421356 2,0 Q 1.2928932,-0.29289322 1,-1","advance":16},{"key":"y","d":"M 0,-5 L 2,-9 L 0,-3 Q -0.36939806,-1.8918058 0,-1 Q 0.29289322,-0.29289322 1,0 Q 1.7260485,0.30073915 3,0 Q 3.9109272,-0.21504074 5,-1 Q 5.8808987,-1.6349159 7,-3 Q 8.1485293,-4.4009805 9,-6 M 10,-9 L 4,9 Q 3.5,10.5 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 1.6772337,4.9042129 4,3 Q 5.5634581,1.718271 7,1 L 9,0 Q 10.436542,-0.71827095 12,-2 Q 13.648529,-3.3514707 15,-5","advance":15},{"key":"z","d":"M 0,-5 Q 0.60165334,-6.7655644 2,-8 Q 2.8162246,-8.7205485 4,-9 Q 5.2739515,-9.3007391 6,-9 Q 7.4142136,-8.4142136 8,-7 Q 8.3007391,-6.2739515 8,-5 Q 7.7849593,-4.0890728 7,-3 Q 6.0070964,-1.6224198 5,-1 Q 3.618034,-0.14589803 2,0 Q 3.1666667,0.16666667 4,1 Q 4.690983,1.690983 5,3 Q 5.2885074,4.2221371 5,6 Q 4.8437096,6.9631048 4,9 Q 3.2928932,10.707107 3,11 Q 1.8603796,12.13962 1,12 Q 0.37200097,11.89809 0,11 Q -0.2331956,10.437016 0,9 Q 0.30411354,7.125968 1,6 Q 2.0511187,4.2992542 4,3 L 7,1 Q 9.3385564,-0.55903758 11,-2 Q 12.606602,-3.3933983 14,-5","advance":14},{"key":"{","d":"M 9,-25 Q 7.9188612,-24.662278 7,-24 Q 6.4188612,-23.581139 6,-23 Q 5.2150407,-21.910927 5,-21 Q 4.763932,-20 5,-19 Q 5.309017,-17.690983 6,-17 L 7,-16 Q 7.690983,-15.309017 8,-14 Q 8.3007391,-12.726049 8,-12 Q 7.4142136,-10.585786 6,-10 M 7,-24 Q 6.263932,-23.118034 6,-22 Q 5.763932,-21 6,-20 Q 6.309017,-18.690983 7,-18 L 8,-17 Q 8.690983,-16.309017 9,-15 Q 9.236068,-14 9,-13 Q 8.690983,-11.690983 8,-11 Q 6.3333333,-9.3333333 4,-9 Q 6.3333333,-8.6666667 8,-7 Q 8.690983,-6.309017 9,-5 Q 9.236068,-4 9,-3 Q 8.690983,-1.690983 8,-1 L 7,0 Q 6.309017,0.69098301 6,2 Q 5.763932,3 6,4 Q 6.263932,5.118034 7,6 M 6,-8 Q 7.4142136,-7.4142136 8,-6 Q 8.3007391,-5.2739515 8,-4 Q 7.690983,-2.690983 7,-2 L 6,-1 Q 5.309017,-0.30901699 5,1 Q 4.763932,2 5,3 Q 5.2150407,3.9109272 6,5 Q 6.4188612,5.5811388 7,6 Q 7.9188612,6.6622777 9,7","advance":14},{"key":"|","d":"M 4,-25 L 4,7","advance":8},{"key":"}","d":"M 5,-25 Q 6.0811388,-24.662278 7,-24 Q 7.5811388,-23.581139 8,-23 Q 8.7849593,-21.910927 9,-21 Q 9.236068,-20 9,-19 Q 8.690983,-17.690983 8,-17 L 7,-16 Q 6.309017,-15.309017 6,-14 Q 5.6992609,-12.726049 6,-12 Q 6.5857864,-10.585786 8,-10 M 7,-24 Q 7.736068,-23.118034 8,-22 Q 8.236068,-21 8,-20 Q 7.690983,-18.690983 7,-18 L 6,-17 Q 5.309017,-16.309017 5,-15 Q 4.763932,-14 5,-13 Q 5.309017,-11.690983 6,-11 Q 7.6666667,-9.3333333 10,-9 Q 7.6666667,-8.6666667 6,-7 Q 5.309017,-6.309017 5,-5 Q 4.763932,-4 5,-3 Q 5.309017,-1.690983 6,-1 L 7,0 Q 7.690983,0.69098301 8,2 Q 8.236068,3 8,4 Q 7.736068,5.118034 7,6 M 8,-8 Q 6.5857864,-7.4142136 6,-6 Q 5.6992609,-5.2739515 6,-4 Q 6.309017,-2.690983 7,-2 L 8,-1 Q 8.690983,-0.30901699 9,1 Q 9.236068,2 9,3 Q 8.7849593,3.9109272 8,5 Q 7.5811388,5.5811388 7,6 Q 6.0811388,6.6622777 5,7","advance":14},{"key":"~","d":"M 3,-6 Q 2.8377223,-7 3,-8 Q 3.3687146,-10.272122 4,-11 Q 4.575679,-11.663763 6,-12 Q 7,-12.236068 8,-12 Q 8.9728913,-11.770332 10,-11 L 14,-8 Q 15.027109,-7.2296685 16,-7 Q 17,-6.763932 18,-7 Q 19.309017,-7.309017 20,-8 Q 20.833333,-8.8333333 21,-10 M 3,-8 Q 3.1666667,-9.1666667 4,-10 Q 4.690983,-10.690983 6,-11 Q 7,-11.236068 8,-11 Q 8.9728913,-10.770332 10,-10 L 14,-7 Q 15.027109,-6.2296685 16,-6 Q 17,-5.763932 18,-6 Q 19.424321,-6.3362366 20,-7 Q 20.631285,-7.7278782 21,-10 Q 21.162278,-11 21,-12","advance":24},{"key":"▮","d":"M 0,-21 L 0,0 Q 0.5,0.5 1,0 L 1,-21 Q 1.5,-21.5 2,-21 L 2,0 Q 2.5,0.5 3,0 L 3,-21 Q 3.5,-21.5 4,-21 L 4,0 Q 4.5,0.5 5,0 L 5,-21 Q 5.5,-21.5 6,-21 L 6,0 Q 6.5,0.5 7,0 L 7,-21 Q 7.5,-21.5 8,-21 L 8,0 Q 8.5,0.5 9,0 L 9,-21 Q 9.5,-21.5 10,-21 L 10,0 Q 10.5,0.5 11,0 L 11,-21 Q 11.5,-21.5 12,-21 L 12,0 Q 12.5,0.5 13,0 L 13,-21 Q 13.5,-21.5 14,-21 L 14,0 Q 14.5,0.5 15,0 L 15,-21 Q 15.5,-21.5 16,-21 L 16,0","advance":16}]'),Ut={top:Ot,bottom:Ft,spaceWidth:Nt,strokeWidth:Dt,kerning:Wt,mHeight:Bt,letters:Xt};class A1{constructor(e,n,s,o,a,r,Q){this.top=e,this.bottom=n,this.spaceWidth=s,this.strokeWidth=o,this.kerning=a,this.mHeight=r,this.#t=new Map(Q)}getWord(e){const n=[];for(const s of e){const o=this.getChar(s);o&&n.push(o)}return n}#t;getChar(e){return this.#t.get(e)}static fromJSON(e){typeof e=="string"&&(e=JSON.parse(e));const n=e.top,s=e.bottom,o=e.spaceWidth,a=e.strokeWidth,r=e.kerning,Q=e.mHeight;$.assertFinite(n,s,o,a,r,Q);const d=new this(n,s,o,a,r,Q,[]);return $.assertClass(e.letters,Array).forEach(g=>{const M=g.key,l=g.advance,m=g.d;if($.assertFinite(l),typeof M!="string"||typeof m!="string")throw console.error("Expecting {key,advance,d}, found",g),new Error("wtf");const w={shape:z.fromString(m),advance:l};d.#t.set(M,w)}),d}resize(e){const n=e/this.mHeight;if(n==1)return this;const s=new A1(n*this.top,n*this.bottom,n*this.spaceWidth,n*this.strokeWidth,n*this.kerning,e,[]),o=new DOMMatrix;return o.scaleSelf(n),this.#t.forEach((a,r)=>{const Q={advance:n*a.advance,shape:a.shape.transform(o)};s.#t.set(r,Q)}),s}static cursive(e){return this.fromJSON(Ut).resize(e)}static futuraL(e){return this.fromJSON(Pt).resize(e)}}const T1=0,d1=Math.PI/4,w1=2*d1,qt=3*d1,M0=4*d1,jt=5*d1,z1=6*d1,v0=7*d1;class G1{constructor(e,n,s){this.advance=n,this.fontMetrics=s,e instanceof z?this.#t=()=>e:this.#t=e}reshape(e){return new G1(e,this.advance,this.fontMetrics)}#t;get shape(){return this.#t()}get cssPath(){return this.shape.cssPath}get d(){return this.shape.rawPath}makeElement(){return this.shape.makeElement()}makeElements(){return this.shape.splitOnMove().map(e=>({innerShape:e,element:e.makeElement()}))}}function Zt(c){const e=Yt(c),{top:n,bottom:s,spaceWidth:o,strokeWidth:a,defaultKerning:r,mHeight:Q}=(e.get("0")??$.pickAny(e)).fontMetrics;return new A1(n,s,o,a,r,Q,e)}function Yt(c){const e=new Map;typeof c=="number"&&(c=new V0(c));const n=(i,f,u)=>{const p=new G1(f,u,c);if(e.has(i))throw new Error(`duplicate letter: "${i}", previous letter: "${[...e].at(-1)[0]}"`);e.set(i,p)},{aWidth:s,digitWidth:o,capitalTop:a,capitalTopMiddle:r,capitalMiddle:Q,capitalBottomMiddle:d,baseline:h,descender:g,strokeWidth:M}=c,l=0,m=M/3;{const i=c.mHeight,f=.5803571598560251*i,u=[];u.push(U.controlPoints(.5803571598560251*i,-.011904772996231272*i,.1993461912459357*i,-.4845653833822309*i,.15178572549774305*i,-.5833333559985097*i)),u.push(U.controlPoints(.15178572549774305*i,-.5833333559985097*i,.07142858010885174*i,-.7502096094253163*i,.07142858010885174*i,-.8809523915616125*i)),u.push(U.controlPoints(.07142858010885174*i,-.8809523915616125*i,.07142858010885174*i,-1*i,.18154763484090689*i,-1*i)),u.push(U.controlPoints(.18154763484090689*i,-1*i,.3125000278492327*i,-1*i,.3125000278492327*i,-.8809523857747589*i)),u.push(U.controlPoints(.3125000278492327*i,-.8809523857747589*i,.3125000278492327*i,-.795672021064033*i,.14880952935525849*i,-.5863095347804337*i)),u.push(U.controlPoints(.14880952935525849*i,-.5863095347804337*i,0*i,-.39598002063544424*i,0*i,-.23511904966855834*i)),u.push(U.controlPoints(0*i,-.23511904966855834*i,0*i,0*i,.16369048113341364*i,0*i)),u.push(U.controlPoints(.16369048113341364*i,0*i,.31699631330709954*i,0*i,.45535713019840074*i,-.4583333263408854*i)),n("&",new z(u),f)}{const i=o,f=i/2*Math.sqrt(3),u=(h+a)/2,p=u-i/2,y=p+i,L=0,v=f;n("<",new z([U.line4(v,p,L,u),U.line4(L,u,v,y)]),f),n(">",new z([U.line4(L,p,v,u),U.line4(v,u,L,y)]),f)}{const i=o*.9,f=i/2,u=i/2,p=u*Math.SQRT1_2,y=b.M(l,a+u);y.arc(f,a+u,f+p,a+u+p,"cw"),y.Q_angles(f,d,w1),y.M(f,h-m),y.L(f,h),n("?",y.pathShape,i)}{const i=o*7/8,f=i/2,u=i,p=i/2,y=c.mHeight/8,L=a-y,v=h+y;if(v-L<p*4)throw new Error("wtf");const k=(L+v)/2,I=b.M(u,L).arc(u,L+p,f,L+p,"ccw").L(f,k-p).arc(l,k-p,l,k,"cw").arc(l,k+p,f,k+p,"cw").L(f,v-p).arc(u,v-p,u,v,"ccw").pathShape;n("{",I,i);const S=b.M(l,L).arc(l,L+p,f,L+p,"cw").L(f,k-p).arc(u,k-p,u,k,"ccw").arc(u,k+p,f,k+p,"ccw").L(f,v-p).arc(l,v-p,l,v,"cw").pathShape;n("}",S,i)}{const i=o,u=i/2,p=i;{const y=(g-h)*2,L=g,v=L-y,k=a-y/4,I=k+y;if(y<=0||L<=v||v<=I||I<=k)throw new Error("wtf");const S=o*.5;{const V=b.M(S,k).Q_HV(0,I).V(v).Q_VH(S,L).pathShape;n("(",V,S)}{const V=o*.5,C=b.M(0,k).Q_HV(V,I).V(v).Q_VH(0,L).pathShape;n(")",C,V)}{const V=b.M(S,k).H(0).V(L).H(S).pathShape;n("[",V,S)}{const V=b.M(0,k).H(S).V(L).H(0).pathShape;n("]",V,S)}}{const y=o*.4,L=o*.3,v=l,k=v+y,I=k+L,S=I+L,V=S+y,C=V,P=o*.25,T=Q,F=T-P,O=T+P,Z=b.M(v,T).Q_angles(k,F,T1,v0).Q_angles(I,T,(w1+d1)/2).Q_angles(S,O,T1).Q_angles(V,T,v0).pathShape;n("~",Z,C)}{const y=o*.75,L=y/2,v=b.M(L,Q-L).V(Q+L).M(l,Q).H(y).pathShape;n("+",v,y)}{const y=o*.75,L=b.M(l,Q).H(y).pathShape;n("-",L,y)}{const y=o*.75,L=2*M,v=y+L,k=Q-v/2,I=k+v,S=k,V=k+y,C=(S+V)/2,P=0,T=y,F=y/2,O=new z([new X(P,C,T,C),new X(F,S,F,V),new X(P,I,T,I)]);n("±",O,y)}{const y=o*.75,L=0,v=y/2,k=y,I=2*M,S=Q,V=new z([new X(L,S,k,S),new X(v,S-I-m,v,S-I),new X(v,S+I,v,S+I+m)]);b.M(L,Q).H(y).pathShape,n("÷",V,y)}{const y=o*.75*Math.SQRT1_2,L=Q-y/2,v=Q+y/2,k=0,I=y,S=new z([new X(k,L,I,v),new X(I,L,k,v)]);n("×",S,y)}{const y=o/2*.9,L=5,v=-Math.PI/2,k=(a+h)/2,I=0,S=$.initializedArray(L,O=>{const Z=O*(Math.PI*2)/L+v,r1=$.polarToRectangular(I,Z),i1=$.polarToRectangular(y,Z);return[r1,i1]}),V=S.flat(),C=Math.min(...V.map(({x:O})=>O));V.forEach(O=>{O.x-=C,O.y+=k});const P=S.map(([O,Z])=>new X(O.x,O.y,Z.x,Z.y)),T=new z(P),F=Math.max(...V.map(({x:O})=>O));n("*",T,F)}{const y=o*.75,L=b.M(l,Q-M*1.25).H(y).M(l,Q+M*1.25).H(y).pathShape;n("=",L,y)}{const y=o*1.25,L=h+M,v=b.M(0,L).H(y).pathShape;n("_",v,y)}{const y=o/2,L=3*y,v=y/3,k=a,I=k+y,S=I+y,V=S+y,C=b.M(y+v,k).L(y-v,V).M(2*y+v,k).L(2*y-v,V).M(0,I).H(L).M(0,S).H(L).pathShape;n("#",C,L)}{const y=o/2,L=3*y,v=0,k=y,I=L/2,S=2*y,V=L,C=a+(c.mHeight-L)/2,P=C+k,T=C+I,F=C+S,O=C+V,Z=b.M(S,T).Q_VH(I,P).Q_HV(k,T).Q_VH(I,F).Q_HV(S,T).Q_VH((S+V)/2,F).Q_HV(V,T).V((P+T)/2).Q_VH(I,C).Q_HV(v,T).Q_VH(I,O).H((S+V)/2).pathShape;n("@",Z,L)}{const y=b.M(u,a).Q(p,a,p,r).L(p,d).Q(p,h,u,h).Q(l,h,l,d).L(l,r).Q(l,a,u,a).M(p,r).L(l,d).pathShape;n("0",y,i)}{const y=b.M(l,r).Q(u,r,u,a).L(u,h).M(l,h).L(p,h).pathShape;n("1",y,i)}{const y=b.M(l,r).Q_VH(u,a).Q_HV(p,r).Q_VH(u,Q).Q_HV(l,h).L(p,h).pathShape;n("2",y,i)}{const y=b.M(l,r).Q_VH(u,a).Q_HV(p,r).Q_VH(u,Q).Q_HV(p,d).Q_VH(u,h).Q_HV(l,d).pathShape;n("3",y,i)}{const y=(u+p)/2,L=(u+l)/2,v=b.M(p,Q).L(l,Q).L(L,a).M(y,a).L(y,h).pathShape;n("4",v,i)}{const y=l+o/5,L=p-o/5,v=(Q+d)/2,k=b.M(L,a).L(y,a).L(l,Q).Q_VH(u,r).Q_HV(p,v).Q_VH(u,h).Q_HV(l,d).pathShape;n("5",k,i)}{const y=b.M(p,a).Q_HV(l,d).Q_VH(u,h).Q_HV(p,d).Q_VH(u,Q).Q_HV(l,d).pathShape;n("6",y,i)}{const y=b.M(l,a).L(p,a).L(l,h).pathShape;n("7",y,i)}{const y=b.M(u,a).Q(p,a,p,r).Q(p,Q,u,Q).Q(l,Q,l,d).Q(l,h,u,h).Q(p,h,p,d).Q(p,Q,u,Q).Q(l,Q,l,r).Q(l,a,u,a).pathShape;n("8",y,i)}{const y=b.M(p,r).Q(p,a,u,a).Q(l,a,l,r).Q(l,Q,u,Q).Q(p,Q,p,r).Q(p,h,l,h).pathShape;n("9",y,i)}}{const i=b.M(l,h).L(s/2,a).L(c.aWidth,h).M(c.aWidth/4,Q).L(c.aWidth*.75,Q).pathShape;n("A",i,s)}{const i=o,f=r-a;if(f<=0)throw new Error("wtf");const u=(i-f)*(2/3),p=h-d;if(p<=0)throw new Error("wtf");const y=i-p,L=b.M(l,h).L(l,a).L(u,a).Q_HV(u+f,a+f).Q(u+f,Q,u,Q).L(l,Q).M(Math.max(y,u),Q).Q_HV(y+p,h-p).Q_VH(y,h).L(l,h).pathShape;n("B",L,i)}{const i=o,u=i/2,p=i,y=b.M(p,r).Q(p,a,u,a).Q(l,a,l,r).L(l,d).Q(l,h,u,h).Q(p,h,p,d).pathShape;n("C",y,i)}{const i=o,u=i/2,p=i,y=b.M(l,a).L(l,h).L(u,h).Q(p,h,p,d).L(p,r).Q(p,a,u,a).L(l,a).pathShape;n("D",y,i)}{const i=o,f=i*(2/3),u=i,p=b.M(u,a).L(l,a).L(l,h).L(u,h).M(f,Q).L(l,Q).pathShape;n("E",p,i)}{const i=o,f=i*(2/3),u=i,p=b.M(u,a).L(l,a).L(l,h).M(f,Q).L(l,Q).pathShape;n("F",p,i)}{const i=o,u=i/2,p=i,y=b.M(p,r).Q(p,a,u,a).Q(l,a,l,r).L(l,d).Q(l,h,u,h).Q(p,h,p,d).L(p,Q).L(u,Q).pathShape;n("G",y,i)}{const i=o,f=i,u=b.M(l,a).L(l,h).M(f,a).L(f,h).M(l,Q).L(f,Q).pathShape;n("H",u,i)}{const i=c.mHeight/3,f=i/2,u=i,p=b.M(l,a).L(u,a).M(l,h).L(u,h).M(f,a).L(f,h).pathShape;n("I",p,i)}{const i=o*.85,u=i/2,p=i,y=b.M(p,a).L(p,d).Q(p,h,u,h).Q(l,h,l,d).pathShape;n("J",y,i)}{const i=o+M,f=(a+h)/2,u=b.M(l,a).L(l,h).M(i,a).L(l+M,f).L(i,h).pathShape;n("K",u,i)}{const i=o,f=b.M(l,a).L(l,h).L(i,h).pathShape;n("L",f,i)}{const i=o*1.5,f=i/2,u=b.M(l,h).L(l,a).L(f,Q).L(i,a).L(i,h).pathShape;n("M",u,i)}{const i=o*1.2,f=b.M(l,h).L(l,a).L(i,h).L(i,a).pathShape;n("N",f,i)}{const i=o*1.5,f=i/2,u=(a+h)/2,p=b.M(f,a).Q_HV(i,u).Q_VH(f,h).Q_HV(l,u).Q_VH(f,a).pathShape;n("O",p,i)}{const i=o,f=Q-r;if(f<=0)throw new Error("wtf");const u=i-f,p=b.M(l,a).L(l,h).M(l,a).L(u,a).Q_HV(i,r).Q_VH(u,Q).L(l,Q).pathShape;n("P",p,i)}{const i=o*1.5,f=i/2,u=(a+h)/2,p=b.M(f,a).Q_HV(i,u).Q_VH(f,h).Q_HV(l,u).Q_VH(f,a).M(i-f*.75,h-f*.75).L(i+f/6,h+f/6).pathShape;n("Q",p,i)}{const i=o,f=Q-r;if(f<=0)throw new Error("wtf");const u=i-f,p=b.M(l,a).L(l,h).M(l,a).L(u,a).Q_HV(i,r).Q_VH(u,Q).L(l,Q).M(u,Q).L(i,h).pathShape;n("R",p,i)}{const i=o,f=o/2,u=o,p=b.M(u,r).Q_VH(f,a).Q_HV(l,r).Q_VH(f,Q).Q_HV(u,d).Q_VH(f,h).Q_HV(l,d).pathShape;n("S",p,i)}{const f=o+M,u=f/2,p=f,y=c.mHeight/8,L=b.M(p,r).Q_VH(u,a).Q_HV(l,r).Q_VH(u,Q).Q_HV(p,d).Q_VH(u,h).Q_HV(l,d).M(u,a-y).V(h+y).pathShape;n("$",L,f)}{const i=o,f=i/2,u=b.M(f,a).L(f,h).M(i,a).L(l,a).pathShape;n("T",u,i)}{const i=(d+Q)/2,f=Math.abs(i-h)*.85,u=f*2,p=b.M(l,a).V(i).Q_VH(f,h).Q_HV(u,i).V(a).pathShape;n("U",p,u)}{const i=s,f=i/2,u=b.M(l,a).L(f,h).L(i,a).pathShape;n("V",u,i)}{const i=s*1.5,f=i/3,u=i/2,p=f*2,y=b.M(l,a).L(f,h).L(u,Q).L(p,h).L(i,a).pathShape;n("W",y,i)}{const i=o,f=b.M(i,a).L(l,h).M(l,a).L(i,h).pathShape;n("X",f,i)}{const i=M,f=o+i,u=b.M(f,a).L(i,h).M(l,a).L(f/2,Q).pathShape;n("Y",u,f)}{const i=o,f=b.M(l,a).H(i).L(l,h).H(i).pathShape;n("Z",f,i)}{const i=o/4,f=o*1.2,u=b.M(i*2,a+i).Q_VH(i,a).Q_HV(0,a+i).Q_VH(i,a+i*2).Q_HV(i*2,a+i),y=u.pathShape.translate(f-i*2,c.mHeight-i*2);u.addCommands(y.commands),u.M(f,a).L(l,h);const L=u.pathShape;n("%",L,f)}{const i=o,f=b.M(i,a).L(l,h).pathShape;n("/",f,i)}{const i=o,f=b.M(l,a).L(i,h).pathShape;n("\\",f,i)}{const i=o,f=i*.05,u=i+f,p=i/2,y=b.M(i,d).Q_VH(p,Q).Q_HV(l,d).Q_VH(p,h).Q_HV(u,Q).V(h).pathShape;n("a",y,u)}{const i=o,f=i*.05,u=i+f,p=f,y=f+i/2,L=u,v=b.M(p,d).Q_VH(y,h).Q_HV(L,d).Q_VH(y,Q).Q_HV(l,h).V(a).pathShape;n("b",v,u)}{const i=o*.875,f=0,u=o/2,p=i,y=(Q+d)/2,L=(d+h)/2,v=b.M(p,y).Q_VH(u,Q).Q_HV(f,d).Q_VH(u,h).Q_HV(p,L).pathShape;n("c",v,i)}{const i=o,f=i*.05,u=i+f,p=i/2,y=b.M(u,a).L(u,h).Q_VH(p,Q).Q_HV(l,d).Q_VH(p,h).Q_HV(i,d).pathShape;n("d",y,u)}const w=o/8;{const i=o,f=o/2,u=i,p=u-w,y=b.M(l,d).H(u).Q_VH(f,Q).Q_HV(l,d).Q_VH(f,h).H(p).pathShape;n("e",y,i)}{const i=o*.75,f=i/2,u=i,p=b.M(u,a).Q_HV(f,r).V(h).M(u,Q).H(l).pathShape;n("f",p,i)}{const i=o,f=i*.05,u=i+f,p=i/2,y=b.M(i,d).Q_VH(p,Q).Q_HV(l,d).Q_VH(p,h).Q_HV(u,Q).V(h).Q_VH(p,g).H(l+w).pathShape;n("g",y,u)}{const i=o*.85,f=i/2,u=b.M(l,a).V(h).Q_VH(f,Q).Q_HV(i,d).V(h).pathShape;n("h",u,i)}{const f=b.M(l,Q).V(h).M(l,r).V(r-m).pathShape;n("i",f,0)}{const i=Math.abs(h-g),f=i/2,u=b.M(i,Q).V(h).Q_VH(f,g).Q_HV(l,h).M(i,r).V(r-m).pathShape;n("j",u,i)}{const f=b.M(l,h).V(h-m).pathShape;n(".",f,0)}{const f=b.M(l,a).V(d).M(l,h).V(h-m).pathShape;n("!",f,0)}{const f=(g-h)/2,u=f/2,p=b.M(l,h-m).V(h).Q_VH(-u,h+f).pathShape;n(",",p,0)}{const u=(g-h)/2+m,p=new z([new X(l,a,l,a+u)]);n("'",p,0)}{const f=(g-h)/2+m,u=f,p=f,y=new z([new X(l,a,p,a+f)]);n("`",y,u)}{const f=(g-h)/2+m,u=f,p=f*2,y=p,L=a,v=a+f,k=b.M(l,v).L(u,L).L(y,v).pathShape;n("^",k,p)}{const i=M*2,u=(g-h)/2+m,p=new z([new X(l,a,l,a+u),new X(i,a,i,a+u)]);n('"',p,i)}{const f=Q,u=b.M(l,h).V(h-m).M(l,f-m).V(f).pathShape;n(":",u,0)}{const f=new z([new X(l,a,l,h)]);n("|",f,0)}{const f=Q,u=(g-h)/2,p=u/2,y=b.M(l,h-m).V(h).Q_VH(-p,h+u).M(l,f-m).V(f).pathShape;n(";",y,0)}{const i=c.xHeight*2/3,f=o/10,u=i+f,p=b.M(l,a).V(h).M(i,Q).L(l,Q+i).M(i/2,h-i).L(u,h).pathShape;n("k",p,u)}{const f=b.M(l,a).V(h).pathShape;n("l",f,0)}{const i=o*1.5,f=i/4,u=i/2,p=i*3/4,y=i,L=b.M(l,Q).V(h).Q_VH(f,Q).Q_HV(u,d).V(h).M(u,d).Q_VH(p,Q).Q_HV(y,d).V(h).pathShape;n("m",L,i)}{const i=o*.85,f=i/2,u=b.M(l,Q).V(h).Q_VH(f,Q).Q_HV(i,d).V(h).pathShape;n("n",u,i)}{const i=o,f=0,u=i/2,p=i,y=b.M(u,Q).Q_HV(p,d).Q_VH(u,h).Q_HV(f,d).Q_VH(u,Q).pathShape;n("o",y,i)}{const i=o,f=o*.05,u=i+f,p=f,y=f+i/2,L=u,v=b.M(p,d).Q_VH(y,Q).Q_HV(L,d).Q_VH(y,h).Q_HV(l,Q).V(g).pathShape;n("p",v,u)}{const i=o,f=i/2,u=o*.05,p=i+u,y=Math.abs(h-g),L=p+y/2,v=p+y,k=b.M(i,d).Q_VH(f,Q).Q_HV(l,d).Q_VH(f,h).Q_HV(p,Q).V(h).Q_VH(L,g).Q_HV(v,(h+g*2)/3).pathShape;n("q",k,v*.667)}{const i=o,f=i/2,u=b.M(l,Q).V(h).Q_VH(f,Q).Q_HV(i,d).pathShape;n("r",u,i)}{const i=c.xHeight*2/3,f=i/2,u=h,p=d,y=Q,L=(u+p)/2,v=(p+y)/2,k=(v+y)/2,I=(u+L)/2,S=b.M(i,k).Q_VH(f,y).Q_HV(l,v).Q_VH(f,p).Q_HV(i,L).Q_VH(f,u).Q_HV(l,I).pathShape;n("s",S,i)}{const i=o*.75,f=i/2,u=i,p=b.M(f,r).V(d).Q_VH(u,h).M(u,Q).H(l).pathShape;n("t",p,i)}{const i=o*.85,f=i/2,u=b.M(l,Q).V(d).Q_VH(f,h).Q_HV(i,Q).L(i,h).pathShape;n("u",u,i)}{const i=o,f=i/2,u=b.M(l,Q).L(f,h).L(i,Q).pathShape;n("v",u,i)}{const i=c.xHeight*1.5,f=i/3,u=i/2,p=f*2,y=b.M(l,Q).L(f,h).L(u,d).L(p,h).L(i,Q).pathShape;n("w",y,i)}{const i=o,f=b.M(i,Q).L(l,h).M(l,Q).L(i,h).pathShape;n("x",f,i)}{const i=o,f=i/2,u=(Q+g)/2,p=b.M(i,Q).L(l,g).M(l,Q).L(f,u).pathShape;n("y",p,i)}{const i=o,f=b.M(l,Q).H(i).L(l,h).H(i).pathShape;n("z",f,i)}{const i=o/2,f=i/2,u=b.M(f,a).circle(f,a+f,"cw").pathShape;n("°",u,i)}{const i=-a,f=i/2,u=b.M(f,a).circle(f,a+f,"cw").pathShape;n("◯",u,i)}{const i=-a,f=i/2,u=a/2,p=b.M(0,u).arc(f,u,i,u,"cw").pathShape;n("◠",p,i)}{const i=-a,f=i/2,u=a/2,p=b.M(0,u).arc(f,u,i,u,"ccw").pathShape;n("◡",p,i)}{const i=-a,f=i/4,u=a+f,p=b.M(f*2,u).arc(f*3,u,i,u,"cw").Q_angles(f*2,h,qt,w1).Q_angles(0,u,z1,jt).arc(f,u,f*2,u,"cw").pathShape;n("♡",p,i)}{const i=c.mHeight,f=i/4,u=f;{const p=i,y=(a+h)/2,L=b.M(u,y-f).L(0,y).L(u,y+f).M(0,y).L(p,y).M(p-u,y-f).L(p,y).L(p-u,y+f);n("↔",L.pathShape,p);const v=new z(L.commands.slice(0,3));n("←",v,p);const k=new z(L.commands.slice(2,5));n("→",k,p)}{const y=f,L=f*2,v=L,k=b.M(0,a+u).L(y,a).L(v,a+u).M(y,a).L(y,h).M(0,h-u).L(y,h).L(v,h-u);n("↕",k.pathShape,L);const I=new z(k.commands.slice(0,3));n("↑",I,L);const S=new z(k.commands.slice(2,5));n("↓",S,L)}}{const i=c.mHeight,f=0,u=i/2,p=i,y=a,L=h,v=(y+L)/2,k=Math.PI/16,I=b.M(u,y).Q_angles(p,v,T1+k,w1-k).Q_angles(u,L,w1+k,M0-k).Q_angles(f,v,M0+k,z1-k).Q_angles(u,y,z1+k,T1-k).pathShape;n("✧",I,i)}{let i=function(S,V){const C=S.maxY-S.minY,T=(V.bottom-V.top)/C,O=(S.maxX-S.minX)*T,Z=0,r1=O,i1=$.makeBoundedLinear(S.minX,Z,S.maxX,r1),y1=$.makeBoundedLinear(S.minY,V.top,S.maxY,V.bottom);return{x:i1,y:y1,advance:r1}},f=function(){const S={x:1/0,y:1/0},V={x:-1/0,y:-1/0};L.forEach(F=>{["x","y"].forEach(O=>{S[O]=Math.min(S[O],F[O]),V[O]=Math.max(V[O],F[O])})});const C={minX:S.x,maxX:V.x,minY:S.y,maxY:V.y},T=i(C,{top:a,bottom:h});return L.forEach(F=>{F.x=T.x(F.x),F.y=T.y(F.y)}),T};const y=z1,L=$.initializedArray(5,S=>{const V=y+S*(2*Math.PI)*2/5;return $.polarToRectangular(1,V)}),v=f(),k=L.map((S,V,C)=>{const P=C.at(V+1-C.length);return new X(S.x,S.y,P.x,P.y)});n("☆",new z(k),v.advance);const I=L.map((S,V,C)=>{const P=C.at(V+1-C.length),T=Math.atan2(P.y-S.y,P.x-S.x),F=.175;return U.angles(S.x,S.y,T+F,P.x,P.y,T-F)});n("⭒",new z(I),v.advance)}return new Map([...e.entries()].sort(([i],[f])=>i<f?-1:i==f?1:0))}class V0{constructor(e,n=e/10){if(this.fontSize=e,this.strokeWidth=n,e<=0||!isFinite(e))throw new Error("wtf")}get mHeight(){return this.fontSize}get xHeight(){return this.fontSize*.5}get aWidth(){return this.fontSize*.75}get digitWidth(){return this.fontSize*.5}get defaultKerning(){return this.strokeWidth*2.5}get spaceWidth(){return this.strokeWidth+this.digitWidth/2}get top(){return this.capitalTop-this.mHeight/4}get capitalTop(){return this.baseline-this.mHeight}get capitalTopMiddle(){return(this.capitalTop+this.capitalMiddle)/2}get capitalMiddle(){return this.baseline-this.xHeight}get capitalBottomMiddle(){return(this.baseline+this.capitalMiddle)/2}get baseline(){return 0}get descender(){return this.mHeight/4}get bottom(){return this.descender+this.mHeight/4}}class Jt{constructor(e,n,s){this.delayMS=e,this.cumulative=n,this.action=s,this.request=this.request.bind(this)}#t=!1;#e=NaN;#n(){const e=isNaN(this.#e)?this.delayMS:this.delayMS-(performance.now()-this.#e);this.#t=!0,this.#e=NaN,setTimeout(()=>{isFinite(this.#e)?this.#n():(this.#t=!1,this.action())},e)}request(){this.#t?this.cumulative&&(this.#e=performance.now()):this.#n()}}const e1=B.getById("preview",HTMLCanvasElement),h1=$.assertNonNullable(e1.getContext("2d"));let p1={totalLength:0,drawTo(c,e){}};function*C0(c){for(let e=0;e<c;e++){const n=e/(c-1);h1.clearRect(0,0,h1.canvas.width,h1.canvas.height),p1.drawTo(n*p1.totalLength,h1);const s=$.makePromise();e1.toBlob(o=>{o?s.resolve(o):s.reject(new Error("failed"))}),yield s.promise}}async function Gt(){document.body.insertAdjacentHTML("beforeend","<h2>Frames</h2>");for await(const c of C0(10)){const e=URL.createObjectURL(c),n=document.createElement("img");n.classList.add("show-images"),n.src=e,document.body.append(n)}}window.showImages=Gt;const Kt=B.getById("ffmpeg-notes",HTMLDivElement),t2=B.getById("ffmpeg-progress",HTMLTableCellElement),e2=B.getById("ffmpeg-output",HTMLTableCellElement);function U1(c){Kt.append(c,document.createElement("br"))}function R0(c){t2.textContent=c}function n2(c){e2.textContent=c}const s2=async c=>{c.on("log",({message:e})=>{/^frame=/.test(e)?n2(e):U1(e)}),c.on("progress",({progress:e})=>R0(`Compressing: ${e*100}%`));try{await c.load({coreURL:j0,wasmURL:Z0}),U1("FFmpeg loaded successfully")}catch(e){throw U1("FFmpeg load failed"),console.error("FFmpeg load failed:",e),e}},K1=B.getById("simpleOutline",HTMLButtonElement),t0=B.getById("bigShadow",HTMLButtonElement),e0=B.getById("extruded",HTMLButtonElement);let T0=()=>{console.warn("huh?")},z0=()=>{console.warn("huh?")},P0=()=>{console.warn("huh?")};K1.addEventListener("click",()=>T0());t0.addEventListener("click",()=>z0());e0.addEventListener("click",()=>P0());function O0(){K1.disabled=!0,t0.disabled=!0,e0.disabled=!0}O0();const $1=B.getById("createVideo",HTMLButtonElement);async function o2(){$1.disabled=!0;const c=new q0;await s2(c);const e=$.assertNonNullable($.parseFloatX(Y1.value)),n=Math.round(e*30);for(const[h,g]of $.zip(C0(n),$.count())){const l=`frame${(g+1).toString().padStart(2,"0")}.png`;R0(`Creating ${l} of ${n}`),c.writeFile(l,new Uint8Array(await(await h).arrayBuffer()))}const s=await c.exec(["-framerate","30","-i","frame%02d.png","-c:v","prores_ks","-pix_fmt","yuva444p10le","-y","output.mov"]);if(s!==0)throw new Error(`ffmpeg exec problem: ${s}`);const o=await c.readFile("output.mov"),a=typeof o=="string"?o:$.assertClass(o.buffer,ArrayBuffer),r=new Blob([a],{type:"video/quicktime"}),Q=URL.createObjectURL(r),d=document.createElement("a");d.href=Q,d.download="output.mov",d.click(),URL.revokeObjectURL(Q),$1.disabled=!1}$1.addEventListener("click",o2);const Z1=B.getById("fontSize",HTMLInputElement),n0=B.getById("text",HTMLTextAreaElement),F0=B.getById("strokeColor",HTMLInputElement),P1=B.getById("lineWidth",HTMLInputElement),Y1=B.getById("duration",HTMLInputElement),N0=B.getById("recommendedLineWidth",HTMLButtonElement),J1=B.selectorQuery('input[name="showBottomLine"]',HTMLInputElement),E1=B.getById("lineWidth-2",HTMLInputElement),q1=B.getById("strokeColor-2",HTMLInputElement),j1=B.getById("alpha",HTMLInputElement),k1=B.getById("X-offset",HTMLInputElement),S1=B.getById("Y-offset",HTMLInputElement),b1=B.getById("delay",HTMLInputElement),s0=B.getById("backgroundColor",HTMLInputElement);class o0{static#t=[Z1,n0,F0,P1,s0];static#e=["alignment","fontFamily"];static read(){const e=new URLSearchParams(location.hash.substring(1));this.#t.forEach(n=>{const s=e.get(n.id);typeof s=="string"&&(n.value=s)}),this.#e.forEach(n=>{const s=e.get(n);if(typeof s=="string"){const o=B.selectorQueryAll(`input[type="radio"][name="${n}"][value="${s}"]`,HTMLInputElement);o.length!=1?console.warn("Expecting 1 radio button",o,n,s):o[0].checked=!0}})}static#n(){const e=new URLSearchParams;this.#t.forEach(n=>{e.append(n.id,n.value)}),this.#e.forEach(n=>{const s=B.selectorQuery(`input[type="radio"][name="${n}"]:checked`,HTMLInputElement).value;e.append(n,s)}),location.replace("#"+e.toString())}static writeSoon=new Jt(50,!0,()=>this.#n()).request;static init(){this.#t.forEach(e=>{e.addEventListener("input",this.writeSoon),B.selectorQueryAll('input[type="radio"]',HTMLInputElement).forEach(n=>n.addEventListener("input",this.writeSoon))})}}o0.init();let m1=NaN;N0.addEventListener("click",()=>{Number.isFinite(m1)&&(P1.value=m1.toString(),l1(),o0.writeSoon())});const L0=B.getById("error",HTMLDivElement),a2=B.getById("length",HTMLSpanElement),x0=B.getById("total-time",HTMLSpanElement),r2=B.getById("progress",HTMLInputElement);function l1(){try{L0.style.display="none";const c=$.parseFloatX(Z1.value),e=$.parseFloatX(P1.value),n=$.parseFloatX(Y1.value),s=$.parseFloatX(E1.value),o=$.parseFloatX(k1.value),a=$.parseFloatX(S1.value),r=$.parseFloatX(b1.value);if([[c,Z1],[e,P1],[n,Y1],[s,E1],[o,k1],[a,S1],[r,b1]].forEach(([i,f])=>{f.style.backgroundColor=i===void 0?"pink":""}),c===void 0||e===void 0||n===void 0||J1.checked&&(s===void 0||o===void 0||a===void 0||r===void 0)){$1.disabled=!0,O0();return}$1.disabled=!1;const Q=B.selectorQuery('input[type="radio"][name="fontFamily"]:checked',HTMLInputElement).value;let d;switch(Q){case"standard":{d=Zt(new V0(c,e)),m1=c/10;break}case"Hershey Cursive":{d=A1.cursive(c),m1=d.strokeWidth;break}case"Hershey Futura L":{d=A1.futuraL(c),m1=d.strokeWidth;break}default:throw new Error("wtf")}N0.innerText=`Recommended: ${m1.toLocaleString(void 0,{maximumFractionDigits:2})} pixels`;const h=new J0(d);h.addText(n0.value);const g=B.selectorQuery('input[type="radio"][name="alignment"]:checked',HTMLInputElement).value,M=c*25,l=h.align(M,g),m=(d.bottom-d.top)/2;e1.width=M+2*m,e1.height=(l.allRowMetrics.at(-1)?.bottom??0)+2*m,e1.style.width=`${e1.width/devicePixelRatio}px`,e1.style.height=`${e1.height/devicePixelRatio}px`,h1.strokeStyle=F0.value,h1.lineWidth=e,p1=l.drawPartial(m,m),a2.innerText=p1.totalLength.toLocaleString(void 0,{maximumFractionDigits:2}),n===void 0||r===void 0?x0.innerText="???":x0.innerText=(n+Math.abs(r)).toLocaleString(void 0,{maximumFractionDigits:4}),T0=()=>{E1.value=(e*1.25).toString(),j1.value="1",q1.value="#000000",k1.value="0",S1.value="0",b1.value="0",l1()},K1.disabled=!1;const w=60*$.radiansPerDegree;z0=()=>{const i=e*.8,f=Math.cos(w)*i,u=Math.sin(w)*i,p=e*1.1;E1.value=p.toString(),j1.value="0.5",q1.value="#000000",k1.value=f.toFixed(5),S1.value=u.toFixed(5),b1.value="0",l1()},t0.disabled=!1,P0=()=>{const i=e/3,f=Math.cos(w)*i,u=Math.sin(w)*i,p=e/3;E1.value=p.toString(),j1.value="1",q1.value="#ff0894",k1.value=f.toFixed(5),S1.value=u.toFixed(5),b1.value="0",l1()},e0.disabled=!1,p1.drawTo(r2.valueAsNumber*p1.totalLength,h1)}catch(c){L0.style.display="",console.error(c)}}o0.read();l1();[n0,...B.selectorQueryAll("input",HTMLInputElement)].forEach(c=>{c.addEventListener("input",l1)});window.updateSample=l1;function D0(c=s0.value,e=10){const n=`color-mix(in srgb-linear, ${c} ${100-e}%, white ${e}%)`,s=`color-mix(in srgb-linear, ${c} ${100-e}%, black ${e}%)`,o=document.createElement("canvas");o.width=2,o.height=2;const a=o.getContext("2d");a.fillStyle=n,a.fillRect(0,0,2,2),a.fillStyle=s,a.fillRect(0,1,1,1),a.fillRect(1,0,1,1);const r=o.toDataURL("image/png");e1.style.background=`url(${r}) repeat`,e1.style.backgroundSize="20px 20px",e1.style.imageRendering="pixelated"}D0();s0.addEventListener("input",()=>D0());{let c=function(){const s=J1.checked?"calc-size(fit-content, size * 1)":"calc-size(fit-content, size * 0)";e.style.height=s};const e=B.getById("bottom-line-sub-container",HTMLDivElement);c(),J1.addEventListener("click",c)}
